"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[2976],{8298:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>m});var o=a(5250),n=a(5545);const s=JSON.parse('{"hash":"actions/data","pageTitle":"Data Actions","pageDescription":"The Data Actions are used to get and set data on bots.","pageSidebarLabel":"Data","contents":[{"id":768,"order":9999,"name":"applyDiffToSnapshot","reflection":{"id":768,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Applies the given difference to the given snapshot and returns a new snapshot that represents the result."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"applyDiffToSnapshot"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4557,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4557"}],"parameters":[{"id":769,"name":"snapshot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the snapshot that the delta should be applied to. This is also called the baseline snapshot."}],"blockTags":[]},"type":{"type":"reference","target":38427,"name":"BotState","package":"@casual-simulation/aux-common","id":38427,"qualifiedName":"BotsState"}},{"id":770,"name":"diff","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the delta that should be applied to the snapshot. You can create a delta from two snapshots by using the "},{"kind":"text","text":"[`diffSnapshots(first, second)`](ref:diffSnapshots)"},{"kind":"text","text":" function."}],"blockTags":[]},"type":{"type":"reference","target":38430,"name":"PartialBotState","package":"@casual-simulation/aux-common","id":38430,"qualifiedName":"PartialBotsState"}}],"type":{"type":"reference","target":38427,"name":"BotState","package":"@casual-simulation/aux-common","id":38427,"qualifiedName":"BotsState"}},"comment":{"text":"Applies the given difference to the given snapshot and returns a new snapshot that represents the result.","tags":[{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"applyDiffToSnapshot"}]},"group":"01-data-actions"},{"id":863,"order":9999,"name":"changeState","reflection":{"id":863,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Changes the state that the given bot occupies in the given group. If the state was changed, then the ["},{"kind":"code","text":"`@[groupName][stateName]OnExit`"},{"kind":"text","text":"](tags:@[groupName][stateName]OnExit) and ["},{"kind":"code","text":"`@[groupName][stateName]OnEnter`"},{"kind":"text","text":"](tags:@[groupName][stateName]OnExit) whispers are sent to the bot."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nChange the #state of the bot to \\"Running\\"\\n// Triggers\\n```"}]},{"tag":"@stateRunningOnEnter","content":[{"kind":"text","text":"changeState(bot, \\"Running\\");"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nChange the #playbackState of the bot to \\"Playing\\"\\n// Triggers\\n```"}]},{"tag":"@playbackStatePlayingOnEnter","content":[{"kind":"text","text":"changeState(bot, \\"Playing\\", \\"playbackState\\");"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"changeState"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14323,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14323"}],"parameters":[{"id":864,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot whose state should be changed."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}},{"id":865,"name":"stateName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the value that should be set on the bot."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":866,"name":"groupName","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the name of the tag that should be changed on the bot. If not specified, then the "},{"kind":"code","text":"`#state`"},{"kind":"text","text":" tag will be used."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Changes the state that the given bot occupies in the given group. If the state was changed, then the [`@[groupName][stateName]OnExit`](tags:@[groupName][stateName]OnExit) and [`@[groupName][stateName]OnEnter`](tags:@[groupName][stateName]OnExit) whispers are sent to the bot.","tags":[{"tagName":"example","text":"```ts\\nChange the #state of the bot to \\"Running\\"\\n// Triggers\\n```"},{"tagName":"stateRunningOnEnter","text":"changeState(bot, \\"Running\\");"},{"tagName":"example","text":"```ts\\nChange the #playbackState of the bot to \\"Playing\\"\\n// Triggers\\n```"},{"tagName":"playbackStatePlayingOnEnter","text":"changeState(bot, \\"Playing\\", \\"playbackState\\");"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"changeState"}]},"group":"01-data-actions"},{"id":847,"order":9999,"name":"create","reflection":{"id":847,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Creates a new bot or combination of bots with the given mods. Also triggers ["},{"kind":"code","text":"`@onCreate`"},{"kind":"text","text":"](tags:@onCreate) on all the created bots.\\nBy default, bots are created with a unique "},{"kind":"text","text":"[`#id`](tags:id)"},{"kind":"text","text":", "},{"kind":"text","text":"[`#creator`](tags:creator)"},{"kind":"text","text":" set to the current "},{"kind":"code","text":"`bot.id`"},{"kind":"text","text":", and "},{"kind":"text","text":"[`#space`](tags:space)"},{"kind":"text","text":" set to "},{"kind":"code","text":"`shared`"},{"kind":"text","text":".\\nBots must be created with at least one tag. If "},{"kind":"code","text":"`create()`"},{"kind":"text","text":" tries to make a bot with zero tags then an error will be thrown.\\n\\nIf "},{"kind":"text","text":"[`#creator`](tags:creator)"},{"kind":"text","text":" references a non-existent bot or a bot with a different "},{"kind":"text","text":"[`#space`](tags:space)"},{"kind":"text","text":" than the created bot, then "},{"kind":"text","text":"[`#creator`](tags:creator)"},{"kind":"text","text":" will be set to "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The bot(s) that were created."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a red bot\\nlet redBot = create({\\n    color: \\"red\\"\\n});\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a parent and a child bot\\nlet myParentBot = create({\\n  creator: null,\\n   label: \\"Parent\\"\\n});\\nlet myChildBot = create({\\n   creator: getID(myParentBot),\\n   label: \\"Child\\"\\n});\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a red bot in the tempLocal  space\\nlet myBot = create({ space: \\"tempLocal\\", color: \\"red\\" });\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a bot from multiple mods\\n// myBot is placed in the \\"myDimension\\" dimension and is colored green\\nlet myBot = create({ myDimension: true }, {\\n    color: \\"green\\"\\n});\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a red bot and a blue bot\\nlet [myRedBot, myBlueBot] = create({ creator: null}, [\\n    {\\n       color: \\"red\\"\\n    },\\n    {\\n      color: \\"blue\\"\\n    }\\n});\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"create"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14086,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14086"}],"parameters":[{"id":848,"name":"mods","variant":"param","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"the mods that should be applied to the new bot(s).\\nIf no parameters are specified, then the new bot will have its "},{"kind":"text","text":"[`#creator`](tags:creator)"},{"kind":"text","text":" set to "},{"kind":"code","text":"`bot.id`"},{"kind":"text","text":" and "},{"kind":"text","text":"[`#space`](tags:space)"},{"kind":"text","text":" set to "},{"kind":"code","text":"`shared`"},{"kind":"text","text":".\\nIf an array of mods is used for a parameter, then one bot will be created for _each unique combination of mods_."}],"blockTags":[]},"type":{"type":"array","elementType":{"type":"reference","target":35481,"name":"Mod","package":"@casual-simulation/aux-runtime","id":35481,"qualifiedName":"Mod"}}}],"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}}]}},"comment":{"text":"Creates a new bot or combination of bots with the given mods. Also triggers [`@onCreate`](tags:@onCreate) on all the created bots.\\nBy default, bots are created with a unique id, creator set to the current `bot.id`, and space set to `shared`.\\nBots must be created with at least one tag. If `create()` tries to make a bot with zero tags then an error will be thrown.\\n\\nIf creator references a non-existent bot or a bot with a different space than the created bot, then creator will be set to `null`.","tags":[{"tagName":"returns","text":"The bot(s) that were created."},{"tagName":"example","text":"```ts\\nCreate a red bot\\nlet redBot = create({\\n    color: \\"red\\"\\n});\\n```"},{"tagName":"example","text":"```ts\\nCreate a parent and a child bot\\nlet myParentBot = create({\\n  creator: null,\\n   label: \\"Parent\\"\\n});\\nlet myChildBot = create({\\n   creator: getID(myParentBot),\\n   label: \\"Child\\"\\n});\\n```"},{"tagName":"example","text":"```ts\\nCreate a red bot in the tempLocal  space\\nlet myBot = create({ space: \\"tempLocal\\", color: \\"red\\" });\\n```"},{"tagName":"example","text":"```ts\\nCreate a bot from multiple mods\\n// myBot is placed in the \\"myDimension\\" dimension and is colored green\\nlet myBot = create({ myDimension: true }, {\\n    color: \\"green\\"\\n});\\n```"},{"tagName":"example","text":"```ts\\nCreate a red bot and a blue bot\\nlet [myRedBot, myBlueBot] = create({ creator: null}, [\\n    {\\n       color: \\"red\\"\\n    },\\n    {\\n      color: \\"blue\\"\\n    }\\n});\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"create"}]},"group":"01-data-actions"},{"id":851,"order":9999,"name":"destroy","reflection":{"id":851,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Removes the given bot, list of bots, or bot by #id and triggers"}],"blockTags":[{"tag":"@onDestroy","content":[{"kind":"text","text":"for each of the destroyed bots.\\n\\nNote that only destroyable bots will be destroyed. Bots that have "},{"kind":"text","text":"[`#destroyable`](tags:destroyable)"},{"kind":"text","text":" set to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" will not be destroyed.\\n\\nAlso note that all bots that have "},{"kind":"text","text":"[`#creator`](tags:creator)"},{"kind":"text","text":" set to the "},{"kind":"text","text":"[`#id`](tags:id)"},{"kind":"text","text":" of a destroyed bot will also be destroyed (unless they are not destroyable). This happens recursively until there are no more bots to destroy."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDestroy a the bot with the name \\"bob\\"\\ndestroy(getBot(\\"#name\\", \\"bob\\"));\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDestroy all bots that are colored red\\ndestroy(getBots(\\"#color\\", \\"red\\"));\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDestroy a bot by its ID\\n// Destroy the bot with the #id: \\"config\\"\\ndestroy(\\"config\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"destroy"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14227,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14227"}],"parameters":[{"id":852,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot, bot ID, or list of bots to destroy."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}]}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Removes the given bot, list of bots, or bot by #id and triggers","tags":[{"tagName":"onDestroy","text":"for each of the destroyed bots.\\n\\nNote that only destroyable bots will be destroyed. Bots that have destroyable set to `false` will not be destroyed.\\n\\nAlso note that all bots that have creator set to the id of a destroyed bot will also be destroyed (unless they are not destroyable). This happens recursively until there are no more bots to destroy."},{"tagName":"example","text":"```ts\\nDestroy a the bot with the name \\"bob\\"\\ndestroy(getBot(\\"#name\\", \\"bob\\"));\\n```"},{"tagName":"example","text":"```ts\\nDestroy all bots that are colored red\\ndestroy(getBots(\\"#color\\", \\"red\\"));\\n```"},{"tagName":"example","text":"```ts\\nDestroy a bot by its ID\\n// Destroy the bot with the #id: \\"config\\"\\ndestroy(\\"config\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"destroy"}]},"group":"01-data-actions"},{"id":763,"order":9999,"name":"diffSnapshots","reflection":{"id":763,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Calculates the difference between the two given snapshots.\\nThe returned value is such that if you were to apply the changes (using "},{"kind":"text","text":"[`applyDiffToSnapshot(snapshot, diff)`](ref:applyDiffToSnapshot)"},{"kind":"text","text":") it represents to the first snapshot you would end up with the second snapshot."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCalculate the diff between two snapshots\\nconst first = getSnapshot([thisBot]);\\nthisBot.tags.color = \'red\';\\nconst second = getSnapshot([thisBot]);\\nconst diff = diffSnapshots(first, second);\\n\\nconsole.log(diff);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"diffSnapshots"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4470,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4470"}],"parameters":[{"id":764,"name":"first","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the snapshot that should be used as the baseline for the diff."}],"blockTags":[]},"type":{"type":"reference","target":38427,"name":"BotState","package":"@casual-simulation/aux-common","id":38427,"qualifiedName":"BotsState"}},{"id":765,"name":"second","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the snapshot that should be used as the target for the diff."}],"blockTags":[]},"type":{"type":"reference","target":38427,"name":"BotState","package":"@casual-simulation/aux-common","id":38427,"qualifiedName":"BotsState"}}],"type":{"type":"reference","target":38430,"name":"PartialBotState","package":"@casual-simulation/aux-common","id":38430,"qualifiedName":"PartialBotsState"}},"comment":{"text":"Calculates the difference between the two given snapshots.\\nThe returned value is such that if you were to apply the changes (using applyDiffToSnapshot) it represents to the first snapshot you would end up with the second snapshot.","tags":[{"tagName":"example","text":"```ts\\nCalculate the diff between two snapshots\\nconst first = getSnapshot([thisBot]);\\nthisBot.tags.color = \'red\';\\nconst second = getSnapshot([thisBot]);\\nconst diff = diffSnapshots(first, second);\\n\\nconsole.log(diff);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"diffSnapshots"}]},"group":"01-data-actions"},{"id":881,"order":9999,"name":"getBotLinks","reflection":{"id":881,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the list of bot links that are stored in tags on the specified bot.\\n\\nThis function can be useful if you want to discover what tags are linking to bots and get those bot IDs."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the list of bot links on this bot\\nlet botLinks = getBotLinks(thisBot);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBotLinks"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14404,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14404"}],"parameters":[{"id":882,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot to get the links for."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}],"type":{"type":"array","elementType":{"type":"reference","target":38293,"name":"ParsedBotLink","package":"@casual-simulation/aux-common","id":38293,"qualifiedName":"ParsedBotLink"}}},"comment":{"text":"Gets the list of bot links that are stored in tags on the specified bot.\\n\\nThis function can be useful if you want to discover what tags are linking to bots and get those bot IDs.","tags":[{"tagName":"example","text":"```ts\\nGet the list of bot links on this bot\\nlet botLinks = getBotLinks(thisBot);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getBotLinks"}]},"group":"01-data-actions"},{"id":737,"order":9999,"name":"getBotPosition","reflection":{"id":737,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the 3D position of the given bot in the given dimension."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the position of this bot in the #home dimension\\nlet position = getBotPosition(thisBot, \\"home\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBotPosition"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3952,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3952"}],"parameters":[{"id":738,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or bot ID whose position should be retrieved."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}]}},{"id":739,"name":"dimension","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the dimension that the position should be retrieved for."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":58,"name":"Vector3","package":"@casual-simulation/aux-common","id":58,"qualifiedName":"Vector3"}},"comment":{"text":"Gets the 3D position of the given bot in the given dimension.","tags":[{"tagName":"example","text":"```ts\\nGet the position of this bot in the #home dimension\\nlet position = getBotPosition(thisBot, \\"home\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getBotPosition"}]},"group":"01-data-actions"},{"id":742,"order":9999,"name":"getBotRotation","reflection":{"id":742,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the 3D rotation of the given bot in the given dimension."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the rotation of this bot in the #home dimension\\nlet rotation = getBotRotation(thisBot, \\"home\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBotRotation"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3981,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3981"}],"parameters":[{"id":743,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or bot ID whose rotation should be retrieved."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}]}},{"id":744,"name":"dimension","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the dimension that the rotation should be retrieved for."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":167,"name":"Rotation","package":"@casual-simulation/aux-common","id":167,"qualifiedName":"Rotation"}},"comment":{"text":"Gets the 3D rotation of the given bot in the given dimension.","tags":[{"tagName":"example","text":"```ts\\nGet the rotation of this bot in the #home dimension\\nlet rotation = getBotRotation(thisBot, \\"home\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getBotRotation"}]},"group":"01-data-actions"},{"id":727,"order":9999,"name":"getBotTagValues","reflection":{"id":727,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets a list of all the values in the inst for the given tag. Optionally accepts a filter for the tag values."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind the number of bots named bob and print it\\nconst numberOfBobs = getBotTagValues(\\"#name\\", \\"bob\\").length;\\nos.toast(numberOfBobs);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all the bot ages above 10\\nconst agesOver10 = getBotTagValues(\\"#age\\", age => age > 10);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBotTagValues"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3867,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3867"}],"parameters":[{"id":728,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the tag to search for."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":729,"name":"filter","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the filter that the tag values should match. If not specified, then all the tag values are included. If it is a function, then it will be used to match values. Otherwise, only tags that match the value will be included."}],"blockTags":[]},"type":{"type":"reference","target":35477,"name":"TagFilter","package":"@casual-simulation/aux-runtime","id":35477,"qualifiedName":"TagFilter"}}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}},"comment":{"text":"Gets a list of all the values in the inst for the given tag. Optionally accepts a filter for the tag values.","tags":[{"tagName":"example","text":"```ts\\nFind the number of bots named bob and print it\\nconst numberOfBobs = getBotTagValues(\\"#name\\", \\"bob\\").length;\\nos.toast(numberOfBobs);\\n```"},{"tagName":"example","text":"```ts\\nFind all the bot ages above 10\\nconst agesOver10 = getBotTagValues(\\"#age\\", age => age > 10);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docname","text":"getBotTagValues"},{"tagName":"docgroup","text":"01-data-actions"}]},"group":"01-data-actions"},{"id":755,"order":9999,"name":"getFormattedJSON","reflection":{"id":755,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data formatted in a human-readable manner."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nSort a nicely formatted copy of a bot in a tag\\nlet bob = getBot(\\"#name\\", \\"bob\\");\\ntags.savedBot = getFormattedJSON(bob);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getFormattedJSON"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4407,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4407"}],"parameters":[{"id":756,"name":"data","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the data that should be [cloned](https://en.wikipedia.org/wiki/Serialization) into the JSON format. If given a bot, then the returned JSON will be able to be able to be converted back into a mod via "},{"kind":"text","text":"[`getMod(bot, ...tags)`](ref:getMod)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data formatted in a human-readable manner.","tags":[{"tagName":"example","text":"```ts\\nSort a nicely formatted copy of a bot in a tag\\nlet bob = getBot(\\"#name\\", \\"bob\\");\\ntags.savedBot = getFormattedJSON(bob);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getFormattedJSON"}]},"group":"01-data-actions"},{"id":747,"order":9999,"name":"getID","reflection":{"id":747,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the "},{"kind":"text","text":"[`#id`](tags:id)"},{"kind":"text","text":" of the given bot."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the ID of the current bot\\nlet id = getID(thisBot);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the ID of a bot with #name set to \\"bob\\"\\nlet id = getID(getBot(\\"#name\\", \\"bob\\"));\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getID"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4365,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4365"}],"parameters":[{"id":748,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot whose ID should be retrieved. If given a bot ID, then it will be returned. If given null or something that is not a bot, then null will be returned."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}]}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Gets the id of the given bot.","tags":[{"tagName":"example","text":"```ts\\nGet the ID of the current bot\\nlet id = getID(thisBot);\\n```"},{"tagName":"example","text":"```ts\\nGet the ID of a bot with #name set to \\"bob\\"\\nlet id = getID(getBot(\\"#name\\", \\"bob\\"));\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getID"}]},"group":"01-data-actions"},{"id":751,"order":9999,"name":"getJSON","reflection":{"id":751,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nStore a copy of a bot in a tag\\nlet bob = getBot(\\"#name\\", \\"bob\\");\\ntags.savedBot = getJSON(bob);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getJSON"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4387,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4387"}],"parameters":[{"id":752,"name":"data","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the data that should be [cloned](https://en.wikipedia.org/wiki/Serialization) into the JSON format. If given a bot, then the returned JSON will be able to be able to be converted back into a mod via "},{"kind":"text","text":"[`getMod(bot, ...tags)`](ref:getMod)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data.","tags":[{"tagName":"example","text":"```ts\\nStore a copy of a bot in a tag\\nlet bob = getBot(\\"#name\\", \\"bob\\");\\ntags.savedBot = getJSON(bob);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getJSON"}]},"group":"01-data-actions"},{"id":877,"order":9999,"name":"getLink","reflection":{"id":877,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Creates and returns a bot link that references the given bots. The link can then be stored in a tag to save it. Useful for creating bot links for an arbitrary number of bots."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nCreate a link to this bot\\nlet link = getLink(thisBot);\\n```"}]},{"tag":"@examples","content":[{"kind":"text","text":"Toast a link to this bot\\ntoast(getLink(thisBot));"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getLink"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14370,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14370"}],"parameters":[{"id":878,"name":"bots","variant":"param","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"The bots that the link should point to."}],"blockTags":[]},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}]}}]}}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Creates and returns a bot link that references the given bots. The link can then be stored in a tag to save it. Useful for creating bot links for an arbitrary number of bots.","tags":[{"tagName":"example","text":"```ts\\nCreate a link to this bot\\nlet link = getLink(thisBot);\\n```"},{"tagName":"examples","text":"Toast a link to this bot\\ntoast(getLink(thisBot));"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getLink"}]},"group":"01-data-actions"},{"id":759,"order":9999,"name":"getSnapshot","reflection":{"id":759,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets a snapshot of the given bots. Snapshots are like mods (see "},{"kind":"text","text":"[`getMod(bot, ...tags)`](ref:getMod)"},{"kind":"text","text":") except they contain multiple bots and include the ID, space, tags, and tag masks of the bots."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getSnapshot"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4423,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4423"}],"parameters":[{"id":760,"name":"bots","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or list of bots that a snapshot should be created out of."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}]}}],"type":{"type":"reference","target":38427,"name":"BotState","package":"@casual-simulation/aux-common","id":38427,"qualifiedName":"BotsState"}},"comment":{"text":"Gets a snapshot of the given bots. Snapshots are like mods (see getMod) except they contain multiple bots and include the ID, space, tags, and tag masks of the bots.","tags":[{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getSnapshot"}]},"group":"01-data-actions"},{"id":711,"order":9999,"name":"getbot-filters","reflection":{"id":711,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Get the first bot that matches all of the given filter(s).\\nIf multiple bots match the given filter(s), then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\\nIf no bots match the given filter(s), then "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" is returned."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind a bot with the #test tag\\nlet foundBot = getBot(byTag(\\"#test\\"));\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind a bot with #name set to \\"bob\\" and in the #people dimension\\nlet foundBot = getBot(byTag(\\"#name\\", \\"bob\\"), inDimension(\\"people\\"));\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docid","content":[{"kind":"text","text":"getbot-filters"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBot"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3816,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3816"}],"parameters":[{"id":712,"name":"filters","variant":"param","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"If no filters are specified, then all bots in the inst are returned. If multiple filters are specified, then only the bots that match all of the filters are returned."}],"blockTags":[]},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":713,"name":"__type","variant":"declaration","kind":65536,"flags":{},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":769,"character":25,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L769"}],"signatures":[{"id":714,"name":"__type","variant":"signature","kind":4096,"flags":{},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":769,"character":25,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L769"}],"parameters":[{"id":715,"name":"bot","variant":"param","kind":32768,"flags":{},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}],"type":{"type":"intrinsic","name":"boolean"}}]}}}}],"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},"comment":{"text":"Get the first bot that matches all of the given filter(s).\\nIf multiple bots match the given filter(s), then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\\nIf no bots match the given filter(s), then `undefined` is returned.","tags":[{"tagName":"example","text":"```ts\\nFind a bot with the #test tag\\nlet foundBot = getBot(byTag(\\"#test\\"));\\n```"},{"tagName":"example","text":"```ts\\nFind a bot with #name set to \\"bob\\" and in the #people dimension\\nlet foundBot = getBot(byTag(\\"#name\\", \\"bob\\"), inDimension(\\"people\\"));\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docid","text":"getbot-filters"},{"tagName":"docname","text":"getBot"}]},"group":"01-data-actions"},{"id":718,"order":9999,"name":"getbot-tag","reflection":{"id":718,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the first bot that matches the given tag and value.\\nIf multiple bots match the given tag and value, then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\\nIf no bots match the given tag and value, then "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" is returned."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind the first bot with #name set to \\"bob\\"\\nlet foundBot = getBot(\\"#name\\", \\"bob\\");\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind the first bot with a #height larger than 2\\nlet foundBot = getBot(\\"#height\\", height => height > 2);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind the first bot with the #test tag\\nlet foundBot = getBot(\\"#test\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docid","content":[{"kind":"text","text":"getbot-tag"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBot"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3841,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3841"}],"parameters":[{"id":719,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the tag to search for."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":720,"name":"value","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the value the tag should match. If not specified, then the first bot with the tag will be returned. If specified, then the first bot that has the same tag and value will be returned. If you specify a function as the value, then it will be used to match tag values."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},"comment":{"text":"Gets the first bot that matches the given tag and value.\\nIf multiple bots match the given tag and value, then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\\nIf no bots match the given tag and value, then `undefined` is returned.","tags":[{"tagName":"example","text":"```ts\\nFind the first bot with #name set to \\"bob\\"\\nlet foundBot = getBot(\\"#name\\", \\"bob\\");\\n```"},{"tagName":"example","text":"```ts\\nFind the first bot with a #height larger than 2\\nlet foundBot = getBot(\\"#height\\", height => height > 2);\\n```"},{"tagName":"example","text":"```ts\\nFind the first bot with the #test tag\\nlet foundBot = getBot(\\"#test\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docid","text":"getbot-tag"},{"tagName":"docname","text":"getBot"}]},"group":"01-data-actions"},{"id":695,"order":9999,"name":"getbots-filters","reflection":{"id":695,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the "},{"kind":"text","text":"[`#id`](tags:id)"},{"kind":"text","text":" tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGets all the bots in the inst.\\nlet bots = getBots();\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all bots with the \\"test\\" tag\\nlet bots = getBots(byTag(\\"#test\\"));\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all bots with #name set to \\"bob\\" and in the #people dimension\\nlet bots = getBots(byTag(\\"#name\\", \\"bob\\"), inDimension(\\"people\\"));\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBots"}]},{"tag":"@docid","content":[{"kind":"text","text":"getbots-filters"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3751,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3751"}],"parameters":[{"id":696,"name":"filters","variant":"param","kind":32768,"flags":{"isRest":true},"comment":{"summary":[{"kind":"text","text":"If no filters are specified, then all bots in the inst are returned. If multiple filters are specified, then only the bots that match all of the filters are returned."}],"blockTags":[]},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":697,"name":"__type","variant":"declaration","kind":65536,"flags":{},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":769,"character":25,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L769"}],"signatures":[{"id":698,"name":"__type","variant":"signature","kind":4096,"flags":{},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":769,"character":25,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L769"}],"parameters":[{"id":699,"name":"bot","variant":"param","kind":32768,"flags":{},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}],"type":{"type":"intrinsic","name":"boolean"}}]}}}}],"type":{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}}},"comment":{"text":"Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the id tag.","tags":[{"tagName":"example","text":"```ts\\nGets all the bots in the inst.\\nlet bots = getBots();\\n```"},{"tagName":"example","text":"```ts\\nFind all bots with the \\"test\\" tag\\nlet bots = getBots(byTag(\\"#test\\"));\\n```"},{"tagName":"example","text":"```ts\\nFind all bots with #name set to \\"bob\\" and in the #people dimension\\nlet bots = getBots(byTag(\\"#name\\", \\"bob\\"), inDimension(\\"people\\"));\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"getBots"},{"tagName":"docid","text":"getbots-filters"}]},"group":"01-data-actions"},{"id":702,"order":9999,"name":"getbots-tag","reflection":{"id":702,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the "},{"kind":"text","text":"[`#id`](tags:id)"},{"kind":"text","text":" tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all the bots with #name set to \\"bob\\"\\nlet bots = getBots(\\"#name\\", \\"bob\\");\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all bots with a #height larger than 2\\nlet bots = getBots(\\"#height\\", height => height > 2);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nFind all bots with the #test tag\\nlet bots = getBots(\\"#test\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@doctitle","content":[{"kind":"text","text":"Data Actions"}]},{"tag":"@docsidebar","content":[{"kind":"text","text":"Data"}]},{"tag":"@docdescription","content":[{"kind":"text","text":"The Data Actions are used to get and set data on bots."}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docgrouptitle","content":[{"kind":"text","text":"Data Actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getBots"}]},{"tag":"@docid","content":[{"kind":"text","text":"getbots-tag"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":3728,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L3728"}],"parameters":[{"id":703,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":704,"name":"value","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the value the tag should match. If not specified, then all bots with the tag will be included. If specified, then only bots that have the same tag and value will be included. If you specify a function as the value, then it will be used to match tag values."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}}},"comment":{"text":"Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the id tag.","tags":[{"tagName":"example","text":"```ts\\nFind all the bots with #name set to \\"bob\\"\\nlet bots = getBots(\\"#name\\", \\"bob\\");\\n```"},{"tagName":"example","text":"```ts\\nFind all bots with a #height larger than 2\\nlet bots = getBots(\\"#height\\", height => height > 2);\\n```"},{"tagName":"example","text":"```ts\\nFind all bots with the #test tag\\nlet bots = getBots(\\"#test\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"doctitle","text":"Data Actions"},{"tagName":"docsidebar","text":"Data"},{"tagName":"docdescription","text":"The Data Actions are used to get and set data on bots."},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docgrouptitle","text":"Data Actions"},{"tagName":"docname","text":"getBots"},{"tagName":"docid","text":"getbots-tag"}]},"group":"01-data-actions"},{"id":826,"order":9999,"name":"removeTags","reflection":{"id":826,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Removes all the tags from the given bot that match the given tag section."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRemove tags named starting with \\"abc\\" from this bot.\\nremoveTags(thisBot, \\"abc\\");\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRemove tags named \\"hello\\" using a case-insensitive regex from this bot.\\nremoveTags(thisBot, /^hello$/gi);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"removeTags"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13886,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13886"}],"parameters":[{"id":827,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or list of bots that should have the tags removed."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}]}},{"id":828,"name":"tagSection","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the string or regex that specifies which tags to remove. If given a string, then all the tags that start with the given string will be removed. If given a regex, then all the tags which match the regex will be removed."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"RegExp"},"name":"RegExp","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Removes all the tags from the given bot that match the given tag section.","tags":[{"tagName":"example","text":"```ts\\nRemove tags named starting with \\"abc\\" from this bot.\\nremoveTags(thisBot, \\"abc\\");\\n```"},{"tagName":"example","text":"```ts\\nRemove tags named \\"hello\\" using a case-insensitive regex from this bot.\\nremoveTags(thisBot, /^hello$/gi);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"removeTags"}]},"group":"01-data-actions"},{"id":831,"order":9999,"name":"renameTag","reflection":{"id":831,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Renames the given original tag on the given bot or list of bots to the given new tag. If the original tag does not exist on the bot, then no changes will take place. If the new tag already exists on the bot, then it will be overwritten with the contents of the original tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRename the \\"auxColor\\" tag to \\"color\\"\\nrenameTag(thisBot, \\"auxColor\\", \\"color\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"renameTag"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13935,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13935"}],"parameters":[{"id":832,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or list of bots that should have the tag renamed."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}}]}},{"id":833,"name":"originalTag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the tag that should be renamed."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":834,"name":"newTag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the new name that the tag should have."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Renames the given original tag on the given bot or list of bots to the given new tag. If the original tag does not exist on the bot, then no changes will take place. If the new tag already exists on the bot, then it will be overwritten with the contents of the original tag.","tags":[{"tagName":"example","text":"```ts\\nRename the \\"auxColor\\" tag to \\"color\\"\\nrenameTag(thisBot, \\"auxColor\\", \\"color\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"renameTag"}]},"group":"01-data-actions"},{"id":885,"order":9999,"name":"updateBotLinks","reflection":{"id":885,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Updates the links in the given bot to point to the new Bot IDs specified in the given ID map.\\n\\nThis function is useful if you know that the links in the given bot are outdated and you know which IDs map to the new IDs."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nChange all references to \\"botA\\" to \\"botB\\" on this bot\\nupdateBotLinks(thisBot, {\\n   \\"botA\\": \\"botB\\"\\n});\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"updateBotLinks"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":14438,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L14438"}],"parameters":[{"id":886,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot whose links should be updated."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}},{"id":887,"name":"idMap","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the map of old bot IDs to the new IDs that should replace them. Each property should be an old ID and each value should be a new ID."}],"blockTags":[]},"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Updates the links in the given bot to point to the new Bot IDs specified in the given ID map.\\n\\nThis function is useful if you know that the links in the given bot are outdated and you know which IDs map to the new IDs.","tags":[{"tagName":"example","text":"```ts\\nChange all references to \\"botA\\" to \\"botB\\" on this bot\\nupdateBotLinks(thisBot, {\\n   \\"botA\\": \\"botB\\"\\n});\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"updateBotLinks"}]},"group":"01-data-actions"},{"id":1044,"order":9999,"name":"uuid","reflection":{"id":1044,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Creates a [Universally Unique IDentifier (UUID)](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\nUseful for generating a random identifier that is guaranteed to be unique"}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGenerate a new UUID and toast it\\nconst id = uuid();\\nos.toast(id);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"uuid"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":10721,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L10721"}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Creates a [Universally Unique IDentifier (UUID)](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\nUseful for generating a random identifier that is guaranteed to be unique","tags":[{"tagName":"example","text":"```ts\\nGenerate a new UUID and toast it\\nconst id = uuid();\\nos.toast(id);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"01-data-actions"},{"tagName":"docname","text":"uuid"}]},"group":"01-data-actions"},{"id":791,"order":9999,"name":"clearTagMasks","reflection":{"id":791,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Clears the tag masks on the given bot or list of bots. If a space is specified, then only the tag masks in that space will be deleted."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"clearTagMasks"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13706,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13706"}],"parameters":[{"id":792,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or list of bots that the tag mask should be set on."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}}]}},{"id":793,"name":"space","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the space that the tag mask should exist in. If omitted, then the tag masks in all spaces will be deleted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"text":"Clears the tag masks on the given bot or list of bots. If a space is specified, then only the tag masks in that space will be deleted.","tags":[{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"clearTagMasks"}]},"group":"02-data-actions"},{"id":818,"order":9999,"name":"deleteTagMaskText","reflection":{"id":818,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Deletes the specified number of characters from the given tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nIf a space is specified, then only the tag mask in that space will be changed.\\n\\nReturns the resulting raw tag value."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDelete the last two characters from a tag mask.\\ndeleteTagMaskText(bot, \\"myTag\\", tags.myTag.length - 2, 2);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDelete the first 3 characters from a tag mask in the local space.\\ndeleteTagMaskText(bot, \\"myTag\\", 0, 3, \\"local\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"deleteTagMaskText"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13847,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13847"}],"parameters":[{"id":819,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot that should be edited."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},{"id":820,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The tag that should be edited."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":821,"name":"index","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the zero-based index that the text should start to be deleted at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":822,"name":"count","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the number of characters that should be deleted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":823,"name":"space","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the space that the tag mask is in. If omitted, then the "},{"kind":"code","text":"`tempLocal`"},{"kind":"text","text":" space will be used."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Deletes the specified number of characters from the given tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nIf a space is specified, then only the tag mask in that space will be changed.\\n\\nReturns the resulting raw tag value.","tags":[{"tagName":"example","text":"```ts\\nDelete the last two characters from a tag mask.\\ndeleteTagMaskText(bot, \\"myTag\\", tags.myTag.length - 2, 2);\\n```"},{"tagName":"example","text":"```ts\\nDelete the first 3 characters from a tag mask in the local space.\\ndeleteTagMaskText(bot, \\"myTag\\", 0, 3, \\"local\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"deleteTagMaskText"}]},"group":"02-data-actions"},{"id":811,"order":9999,"name":"deleteTagText","reflection":{"id":811,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Deletes the specified number of characters from the given tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nReturns the resulting raw tag value."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDelete the last two characters from a tag.\\ndeleteTagText(bot, \\"myTag\\", tags.myTag.length - 2, 2);\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDelete the first 3 characters from a tag.\\ndeleteTagText(bot, \\"myTag\\", 0, 3);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"deleteTagText"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13807,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13807"}],"parameters":[{"id":812,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot that should be edited."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},{"id":813,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The tag that should be edited."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":814,"name":"index","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the zero-based index that the text should start to be deleted at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":815,"name":"count","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the number of characters that should be deleted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Deletes the specified number of characters from the given tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nReturns the resulting raw tag value.","tags":[{"tagName":"example","text":"```ts\\nDelete the last two characters from a tag.\\ndeleteTagText(bot, \\"myTag\\", tags.myTag.length - 2, 2);\\n```"},{"tagName":"example","text":"```ts\\nDelete the first 3 characters from a tag.\\ndeleteTagText(bot, \\"myTag\\", 0, 3);\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"deleteTagText"}]},"group":"02-data-actions"},{"id":773,"order":9999,"name":"getTag","reflection":{"id":773,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the given tag value from the given bot."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the \\"color\\" tag from this bot.\\nlet color = getTag(thisBot, \\"color\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"getTag"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":4337,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L4337"}],"parameters":[{"id":774,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot that the tag should be retrieved from."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}},{"id":775,"name":"tags","variant":"param","kind":32768,"flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"intrinsic","name":"any"}},"comment":{"text":"Gets the given tag value from the given bot.","tags":[{"tagName":"example","text":"```ts\\nGet the \\"color\\" tag from this bot.\\nlet color = getTag(thisBot, \\"color\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"getTag"}]},"group":"02-data-actions"},{"id":803,"order":9999,"name":"insertTagMaskText","reflection":{"id":803,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Inserts the given text into the tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nIf a space is specified, then only the tag mask in that space will be changed."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nAdd some text to the end of a tag mask.\\ninsertTagMaskText(thisBot, \\"myTag\\", tags.myTag.length, \\"xyz\\");\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nAdd some text to the beginning of a tag mask that is in the local space.\\ninsertTagMaskText(thisBot, \\"myTag\\", 0, \\"abc\\", \\"local\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"insertTagMaskText"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13772,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13772"}],"parameters":[{"id":804,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The bot that should be edited."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},{"id":805,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The tag that should be edited."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":806,"name":"index","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the zero-based index that the text should be inserted at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":807,"name":"text","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the string of text that should be inserted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":808,"name":"space","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the space that the tag mask is in. If omitted, then the tempLocal space will be used."}],"blockTags":[]},"type":{"type":"reference","target":38339,"name":"Space","package":"@casual-simulation/aux-common","id":38339,"qualifiedName":"BotSpace"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Inserts the given text into the tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nIf a space is specified, then only the tag mask in that space will be changed.","tags":[{"tagName":"example","text":"```ts\\nAdd some text to the end of a tag mask.\\ninsertTagMaskText(thisBot, \\"myTag\\", tags.myTag.length, \\"xyz\\");\\n```"},{"tagName":"example","text":"```ts\\nAdd some text to the beginning of a tag mask that is in the local space.\\ninsertTagMaskText(thisBot, \\"myTag\\", 0, \\"abc\\", \\"local\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"insertTagMaskText"}]},"group":"02-data-actions"},{"id":796,"order":9999,"name":"insertTagText","reflection":{"id":796,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Inserts the given text into the tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nReturns the resulting raw tag value."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nAdd some text to the end of a tag.\\ninsertTagText(thisBot, \\"myTag\\", tags.myTag.length, \\"xyz\\");\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nAdd some text to the beginning of a tag.\\ninsertTagText(thisBot, \\"myTag\\", 0, \\"abc\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"insertTagText"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13737,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13737"}],"parameters":[{"id":797,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot that should be edited."}],"blockTags":[]},"type":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}},{"id":798,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The tag that should be edited."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":799,"name":"index","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the zero-based index that the text should be inserted at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":800,"name":"text","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the string of text that should be inserted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}},"comment":{"text":"Inserts the given text into the tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\\nReturns the resulting raw tag value.","tags":[{"tagName":"example","text":"```ts\\nAdd some text to the end of a tag.\\ninsertTagText(thisBot, \\"myTag\\", tags.myTag.length, \\"xyz\\");\\n```"},{"tagName":"example","text":"```ts\\nAdd some text to the beginning of a tag.\\ninsertTagText(thisBot, \\"myTag\\", 0, \\"abc\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"insertTagText"}]},"group":"02-data-actions"},{"id":778,"order":9999,"name":"setTag","reflection":{"id":778,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Sets the given tag to the given value on the given bot, list of bots, or mod."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nSet a bot\'s color to \\"green\\".\\nsetTag(this, \\"color\\", \\"green\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"setTag"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13634,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13634"}],"parameters":[{"id":779,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot, list of bots, or mod that the tag should be set on."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"Bot"}},{"type":"reference","target":38352,"name":"Tags","package":"@casual-simulation/aux-common","id":38352,"qualifiedName":"BotTags"}]}},{"id":780,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the tag that should be changed."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":781,"name":"value","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the value that should be placed into the tag(s)."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"any"}},"comment":{"text":"Sets the given tag to the given value on the given bot, list of bots, or mod.","tags":[{"tagName":"example","text":"```ts\\nSet a bot\'s color to \\"green\\".\\nsetTag(this, \\"color\\", \\"green\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"setTag"}]},"group":"02-data-actions"},{"id":784,"order":9999,"name":"setTagMask","reflection":{"id":784,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Sets the given tag mask to the given value on the given bot or list of bots. If a space is specified, then the tag mask will be set inside that space."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nSet a bot\'s color to \\"green\\".\\nsetTagMask(this, \\"color\\", \\"green\\")\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nSet a bot\'s #color to green in the local space.\\nsetTagMask(this, \\"#color\\", \\"green\\", \\"local\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/data"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"02-data-actions"}]},{"tag":"@docname","content":[{"kind":"text","text":"setTagMask"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":13675,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/f7409a93c/src/aux-runtime/runtime/AuxLibrary.ts#L13675"}],"parameters":[{"id":785,"name":"bot","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the bot or list of bots that the tag mask should be set on."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"},{"type":"array","elementType":{"type":"reference","target":38244,"name":"Bot","package":"@casual-simulation/aux-common","id":38244,"qualifiedName":"RuntimeBot"}}]}},{"id":786,"name":"tag","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the tag that should be changed."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":787,"name":"value","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the value that should be placed into the tag(s)."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}},{"id":788,"name":"space","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the space that the tag mask should exist in. If omitted, then the tag mask will be created in the "},{"kind":"code","text":"`tempLocal`"},{"kind":"text","text":" space."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}},"comment":{"text":"Sets the given tag mask to the given value on the given bot or list of bots. If a space is specified, then the tag mask will be set inside that space.","tags":[{"tagName":"example","text":"```ts\\nSet a bot\'s color to \\"green\\".\\nsetTagMask(this, \\"color\\", \\"green\\")\\n```"},{"tagName":"example","text":"```ts\\nSet a bot\'s #color to green in the local space.\\nsetTagMask(this, \\"#color\\", \\"green\\", \\"local\\");\\n```"},{"tagName":"dochash","text":"actions/data"},{"tagName":"docgroup","text":"02-data-actions"},{"tagName":"docname","text":"setTagMask"}]},"group":"02-data-actions"}],"references":{"CasualOSError":"types/error","id-38765":"CasualOSError","Quaternion":"types/math/rotations","id-135":"Quaternion","Rotation":"types/math/rotations","id-167":"Rotation","Vector2":"types/math/vectors","id-1":"Vector2","Vector3":"types/math/vectors","id-58":"Vector3","AIChatMessage":"types/ai","id-38802":"AIChatMessage","AIChatOptions":"types/ai","id-37763":"AIChatOptions","AIDataContent":"types/ai","id-38811":"AIDataContent","AIGenerateImageSuccess":"types/ai","id-35506":"AIGenerateImageSuccess","AIGenerateImageOptions":"types/ai","id-37803":"AIGenerateImageOptions","AIGenerateSkyboxAction":"types/ai","id-37770":"AIGenerateSkyboxAction","AIGenerateSkyboxBlockadeLabsOptions":"types/ai","id-37781":"AIGenerateSkyboxBlockadeLabsOptions","AIGenerateSkyboxOptions":"types/ai","id-37778":"AIGenerateSkyboxOptions","AIGenerateSkyboxRequest":"types/ai","id-35499":"AIGenerateSkyboxRequest","AIGenerateSkyboxResult":"types/ai","id-35503":"AIGenerateSkyboxResult","AIGeneratedImage":"types/ai","id-35509":"AIGeneratedImage","AITextContent":"types/ai","id-38809":"AITextContent","AIUrlContent":"types/ai","id-38814":"AIUrlContent","ARSupportedAction":"types/os/xr","id-37079":"ARSupportedAction","AddCountFailure":"types/records/events","id-40822":"AddCountFailure","AddCountSuccess":"types/records/events","id-40817":"AddCountSuccess","AddDropSnapAction":"types/os/portals","id-37212":"AddDropSnapAction","AddDropSnapPointsAction":"types/os/portals","id-37216":"AddDropSnapPointsAction","AnalyticsRecordEventAction":"types/os/portals","id-37566":"AnalyticsRecordEventAction","AnimateTagOptions":"types/animation","id-35514":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-35807":"AttachDebuggerOptions","AuthData":"types/os/records","id-37387":"AuthData","DebuggerOptions":"types/debuggers/common","id-35823":"DebuggerOptions","CasualOSDevice":"types/os/system","id-38733":"CasualOSDevice","CasualOSVersion":"types/os/system","id-38725":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-213":"AxisAndAngle","BeginRecordingAction":"types/os/audio","id-37291":"BeginRecordingAction","BotIntersection":"types/os/portals","id-36016":"BotIntersection","BotTagMasks":"types/core","id-38349":"BotTagMasks","BotTags":"types/core","id-38352":"BotTags","BotState":"types/core","id-38427":"BotState","BufferFormAddressGLTFAction":"types/os/portals","id-37479":"BufferFormAddressGLTFAction","BufferSoundAction":"types/os/audio","id-36927":"BufferSoundAction","CalculateRayFromCameraAction":"types/os/portals","id-37451":"CalculateRayFromCameraAction","CalculateScreenCoordinatesFromViewportCoordinatesAction":"types/os/portals","id-37465":"CalculateScreenCoordinatesFromViewportCoordinatesAction","CalculateViewportCoordinatesFromPositionAction":"types/os/portals","id-37458":"CalculateViewportCoordinatesFromPositionAction","CalculateViewportCoordinatesFromScreenCoordinatesAction":"types/os/portals","id-37472":"CalculateViewportCoordinatesFromScreenCoordinatesAction","CancelSoundAction":"types/os/audio","id-36933":"CancelSoundAction","CompiledBotListeners":"types/core","id-38302":"CompiledBotListeners","CompiledBotModules":"types/core","id-38308":"CompiledBotModules","ConfigureWakeLockAction":"types/os/portals","id-37553":"ConfigureWakeLockAction","ConvertGeolocationToWhat3WordsAction":"types/os/geolocation","id-37413":"ConvertGeolocationToWhat3WordsAction","ConvertGeolocationToWhat3WordsOptions":"types/os/geolocation","id-37409":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-39801":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-39797":"CreatePublicRecordKeySuccess","DataPermission":"types/permissions","id-305":"DataPermission","DebuggerCallFrame":"types/debuggers/common","id-35847":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-35855":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-35841":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-35801":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-35796":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-35861":"DebuggerVariable","DefineGlobalBotAction":"types/os/portals","id-37401":"DefineGlobalBotAction","DownloadAction":"types/os/files","id-36939":"DownloadAction","Easing":"types/animation","id-37029":"Easing","EnableARAction":"types/os/xr","id-37075":"EnableARAction","EnableCollaborationAction":"types/os/spaces","id-37006":"EnableCollaborationAction","EnableCustomDraggingAction":"types/os/portals","id-37267":"EnableCustomDraggingAction","EnablePOVAction":"types/os/portals","id-37093":"EnablePOVAction","EnableVRAction":"types/os/xr","id-37089":"EnableVRAction","EnableXROptions":"types/os/xr","id-37073":"EnableXROptions","EndRecordingAction":"types/os/audio","id-37303":"EndRecordingAction","EraseDataFailure":"types/records/data","id-40328":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-40324":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-40509":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-40505":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-216":"EulerAnglesRotation","EventPermission":"types/permissions","id-405":"EventPermission","ExitFullscreenAction":"types/os/portals","id-37108":"ExitFullscreenAction","FilePermission":"types/permissions","id-353":"FilePermission","FilePermissionOptions":"types/permissions","id-340":"FilePermissionOptions","FocusOnOptions":"types/os/camera","id-36643":"FocusOnOptions","FocusOnRotation":"types/os/camera","id-36655":"FocusOnRotation","FormAnimationData":"types/os/animations","id-37534":"FormAnimationData","FromToRotation":"types/math/rotations","id-210":"FromToRotation","GenericError":"types/error","id-38762":"GenericError","GetAverageFrameRateAction":"types/os/portals","id-37431":"GetAverageFrameRateAction","GetCountFailure":"types/records/events","id-40833":"GetCountFailure","GetCountSuccess":"types/records/events","id-40827":"GetCountSuccess","GetDataFailure":"types/records/data","id-40319":"GetDataFailure","GetDataSuccess":"types/records/data","id-40310":"GetDataSuccess","GetGeolocationAction":"types/os/geolocation","id-37344":"GetGeolocationAction","GetRoomOptionsFailure":"types/os/portals","id-35968":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os/portals","id-35964":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os/portals","id-36002":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os/portals","id-35997":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os/portals","id-35978":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os/portals","id-35973":"GetRoomTrackOptionsSuccess","GetVoicesAction":"types/os/audio","id-37335":"GetVoicesAction","GetWakeLockConfigurationAction":"types/os/portals","id-37559":"GetWakeLockConfigurationAction","GoToTagAction":"types/os/portals","id-37371":"GoToTagAction","GrantMarkerPermissionFailure":"types/records/policies","id-43950":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-43948":"GrantMarkerPermissionSuccess","GrantResourcePermissionFailure":"types/records/policies","id-43973":"GrantResourcePermissionFailure","GrantResourcePermissionSuccess":"types/records/policies","id-43971":"GrantResourcePermissionSuccess","GrantRoleFailure":"types/records/roles","id-44032":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-44030":"GrantRoleSuccess","HideHtmlAction":"types/os/portals","id-36639":"HideHtmlAction","HideTooltipAction":"types/os/portals","id-36628":"HideTooltipAction","HtmlAppEventAction":"types/os/portals","id-37164":"HtmlAppEventAction","HtmlAppMethodCallAction":"types/os/portals","id-37169":"HtmlAppMethodCallAction","ImageClassifierOptions":"types/os/image-classification","id-36765":"ImageClassifierOptions","InstPermission":"types/permissions","id-531":"InstPermission","InstUpdate":"types/os/spaces","id-38758":"InstUpdate","JoinRoomFailure":"types/os/portals","id-35940":"JoinRoomFailure","JoinRoomSuccess":"types/os/portals","id-35937":"JoinRoomSuccess","LeaveRoomFailure":"types/os/portals","id-35949":"LeaveRoomFailure","LeaveRoomSuccess":"types/os/portals","id-35946":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-40350":"ListDataFailure","ListDataSuccess":"types/records/data","id-40340":"ListDataSuccess","ListFormAnimationsAction":"types/os/animations","id-37528":"ListFormAnimationsAction","ListStudiosFailure":"types/records/studios","id-39844":"ListStudiosFailure","ListStudiosSuccess":"types/records/studios","id-39841":"ListStudiosSuccess","ListedData":"types/records/data","id-40346":"ListedData","MarkerPermission":"types/permissions","id-44162":"MarkerPermission","ResourcePermission":"types/permissions","id-44151":"ResourcePermission","ListedStudio":"types/records/studios","id-39848":"ListedStudio","LoadInstAction":"types/os/spaces","id-36805":"LoadInstAction","LoadSpaceAction":"types/os/spaces","id-36999":"LoadSpaceAction","LocalFormAnimationAction":"types/os/animations","id-37022":"LocalFormAnimationAction","LocalPositionTweenAction":"types/os/animations","id-37043":"LocalPositionTweenAction","LocalTweenAction":"types/os/animations","id-37058":"LocalTweenAction","LookRotation":"types/math/rotations","id-233":"LookRotation","MediaPermissionAction":"types/os/media","id-37424":"MediaPermissionAction","MediaPermissionOptions":"types/os/media","id-37421":"MediaPermissionOptions","MeetCommandAction":"types/os/meets","id-37308":"MeetCommandAction","MeetFunctionAction":"types/os/meets","id-37315":"MeetFunctionAction","NodeReference":"types/os/portals","id-37190":"NodeReference","Debugger":"types/debuggers/debugger","id-35621":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-35813":"NormalDebuggerOptions","OpenCircleWipeAction":"types/os/portals","id-37202":"OpenCircleWipeAction","OpenCircleWipeOptions":"types/os/portals","id-37209":"OpenCircleWipeOptions","OpenConsoleAction":"types/os/system","id-36739":"OpenConsoleAction","PhotoCameraOptions":"types/camera","id-36727":"PhotoCameraOptions","OpenURLAction":"types/os/portals","id-36916":"OpenURLAction","ParsedBotLink":"types/core","id-38293":"ParsedBotLink","PartialBotState":"types/core","id-38430":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-35677":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-35818":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-35833":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-35828":"PauseTriggerOptions","Photo":"types/camera","id-36723":"Photo","PlaySoundAction":"types/os/audio","id-36920":"PlaySoundAction","Point2D":"types/os/portals","id-37546":"Point2D","Point3D":"types/os/portals","id-37549":"Point3D","PossiblePauseTriggerLocation":"types/debuggers/common","id-35791":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-35867":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-226":"QuaternionRotation","RaycastFromCameraAction":"types/os/portals","id-37436":"RaycastFromCameraAction","RaycastInPortalAction":"types/os/portals","id-37443":"RaycastInPortalAction","RaycastRay":"types/os/portals","id-36025":"RaycastRay","RaycastResult":"types/os/portals","id-36013":"RaycastResult","RecordActionOptions":"types/records/extra","id-37816":"RecordActionOptions","RecordDataFailure":"types/records/data","id-40302":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-40298":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-35910":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-35906":"RecordFileSuccess","RecordFileRequest":"types/records/files","id-40477":"RecordFileRequest","RecordedFile":"types/experimental","id-37366":"RecordedFile","Recording":"types/experimental","id-37364":"Recording","RecordingOptions":"types/experimental","id-37283":"RecordingOptions","RegisterBuiltinPortalAction":"types/os/portals","id-37122":"RegisterBuiltinPortalAction","RegisterCustomAppAction":"types/os/portals","id-37128":"RegisterCustomAppAction","RegisterHtmlAppAction":"types/os/portals","id-37141":"RegisterHtmlAppAction","RegisterPrefixOptions":"types/core","id-37199":"RegisterPrefixOptions","RejectAction":"types/os/event","id-36966":"RejectAction","RemoteAction":"types/os/event","id-48354":"RemoteAction","ReportInstAction":"types/os/moderation","id-37376":"ReportInstAction","RequestAuthDataAction":"types/os/records","id-37381":"RequestAuthDataAction","RequestFullscreenAction":"types/os/portals","id-37106":"RequestFullscreenAction","RevokeMarkerPermissionFailure":"types/records/policies","id-43961":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-43959":"RevokeMarkerPermissionSuccess","RevokePermissionFailure":"types/records/policies","id-43995":"RevokePermissionFailure","RevokePermissionSuccess":"types/records/policies","id-43993":"RevokePermissionSuccess","RevokeResourcePermissionFailure":"types/records/policies","id-43984":"RevokeResourcePermissionFailure","RevokeResourcePermissionSuccess":"types/records/policies","id-43982":"RevokeResourcePermissionSuccess","RevokeRoleFailure":"types/records/roles","id-44043":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-44041":"RevokeRoleSuccess","RolePermission":"types/permissions","id-484":"RolePermission","RolePermissionOptions":"types/permissions","id-475":"RolePermissionOptions","RoomJoinOptions":"types/os/portals","id-38032":"RoomJoinOptions","RoomOptions":"types/os/portals","id-38028":"RoomOptions","RoomRemoteOptions":"types/os/portals","id-38087":"RoomRemoteOptions","RoomTrackOptions":"types/os/rooms","id-38065":"RoomTrackOptions","RunScriptAction":"types/os/system","id-36986":"RunScriptAction","RuntimeBot":"types/core","id-38244":"RuntimeBot","RuntimeBotLinks":"types/core","id-38296":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-38299":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-224":"SequenceRotation","SerializableMutationRecord":"types/os/portals","id-37178":"SerializableMutationRecord","SessionSelector":"types/os/event","id-35482":"SessionSelector","SetAppOutputAction":"types/os/portals","id-37153":"SetAppOutputAction","SetClipboardAction":"types/os/clipboard","id-36969":"SetClipboardAction","SetRoomOptionsFailure":"types/os/portals","id-35958":"SetRoomOptionsFailure","SetRoomOptionsSuccess":"types/os/portals","id-35955":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os/portals","id-38062":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os/portals","id-35990":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os/portals","id-35985":"SetRoomTrackOptionsSuccess","ShareAction":"types/os/input","id-37114":"ShareAction","ShareOptions":"types/os/input","id-37110":"ShareOptions","ShowChatBarAction":"types/os/input","id-36972":"ShowChatBarAction","ShowChatOptions":"types/os/input","id-36980":"ShowChatOptions","ShowConfirmAction":"types/os/input","id-36897":"ShowConfirmAction","ShowConfirmOptions":"types/os/input","id-36903":"ShowConfirmOptions","ShowHtmlAction":"types/os/portals","id-36634":"ShowHtmlAction","ShowInputItem":"types/os/input","id-36954":"ShowInputItem","ShowInputOptions":"types/os/input","id-36945":"ShowInputOptions","ShowJoinCodeAction":"types/os/barcodes","id-37102":"ShowJoinCodeAction","ShowToastAction":"types/os/portals","id-36614":"ShowToastAction","ShowTooltipAction":"types/os/portals","id-36619":"ShowTooltipAction","ShowUploadAuxFileAction":"types/os/input","id-36992":"ShowUploadAuxFileAction","ShowUploadFilesAction":"types/os/input","id-36994":"ShowUploadFilesAction","SnapAxis":"types/os/portals","id-37228":"SnapAxis","SnapGrid":"types/os/portals","id-37246":"SnapGrid","SnapGridTarget":"types/os/portals","id-35915":"SnapGridTarget","SnapPoint":"types/os/portals","id-37221":"SnapPoint","SpeakTextAction":"types/os/audio","id-37326":"SpeakTextAction","SpeakTextOptions":"types/experimental","id-35536":"SpeakTextOptions","StartFormAnimationAction":"types/os/animations","id-37498":"StartFormAnimationAction","StartFormAnimationOptions":"types/os/animations","id-37485":"StartFormAnimationOptions","StopFormAnimationAction":"types/os/animations","id-37520":"StopFormAnimationAction","StopFormAnimationOptions":"types/os/animations","id-37517":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os/geolocation","id-37350":"SuccessfulGeolocation","SyntheticVoice":"types/experimental","id-37340":"SyntheticVoice","TweenOptions":"types/experimental","id-35540":"TweenOptions","UnloadInstAction":"types/os/spaces","id-36809":"UnloadInstAction","UnregisterCustomAppAction":"types/os/portals","id-37135":"UnregisterCustomAppAction","UnregisterHtmlAppAction":"types/os/portals","id-37148":"UnregisterHtmlAppAction","UnsuccessfulGeolocation":"types/os/geolocation","id-37360":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-40847":"UpdateEventRecordFailure","UpdateEventRecordRequest":"types/records/events","id-40837":"UpdateEventRecordRequest","UpdateEventRecordSuccess":"types/records/events","id-40845":"UpdateEventRecordSuccess","UpdateHtmlAppAction":"types/os/portals","id-37158":"UpdateHtmlAppAction","UploadedFile":"types/os/files","id-36028":"UploadedFile","VRSupportedAction":"types/os/xr","id-37084":"VRSupportedAction","WakeLockConfiguration":"types/os/portals","id-37564":"WakeLockConfiguration","WebhookOptions":"types/web","id-35487":"WebhookOptions","WebhookResult":"types/web","id-35898":"WebhookResult","AIChatContent":"types/ai","id-38808":"AIChatContent","ActionKinds":"types/permissions","id-261":"ActionKinds","AddCountResult":"types/records/events","id-40816":"AddCountResult","AvailablePermissions":"types/permissions","id-268":"AvailablePermissions","BarcodeFormat":"types/os/barcodes","id-36748":"BarcodeFormat","BotAction":"types/os/event","id-36551":"BotAction","BotAnchorPoint":"types/core","id-38456":"BotAnchorPoint","BotFilter":"types/core","id-35524":"BotFilter","BotSpace":"types/core","id-38339":"BotSpace","CameraPortal":"types/os/portals","id-37545":"CameraPortal","CameraType":"types/os/camera","id-36702":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-39796":"CreatePublicRecordKeyResult","DataActionKinds":"types/permissions","id-262":"DataActionKinds","EaseMode":"types/animation","id-37028":"EaseMode","EaseType":"types/animation","id-37027":"EaseType","EraseDataResult":"types/records/data","id-40323":"EraseDataResult","EraseFileResult":"types/records/files","id-40504":"EraseFileResult","EventActionKinds":"types/permissions","id-264":"EventActionKinds","FileActionKinds":"types/permissions","id-263":"FileActionKinds","Geolocation":"types/os/geolocation","id-37349":"Geolocation","GetCountResult":"types/records/events","id-40826":"GetCountResult","GetDataResult":"types/records/data","id-40309":"GetDataResult","GetRoomOptionsResult":"types/os/portals","id-35963":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os/portals","id-35996":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os/portals","id-35972":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-43947":"GrantMarkerPermissionResult","GrantResourcePermissionResult":"types/records/policies","id-43970":"GrantResourcePermissionResult","GrantRoleResult":"types/records/roles","id-44029":"GrantRoleResult","InstActionKinds":"types/permissions","id-267":"InstActionKinds","JoinRoomResult":"types/os/portals","id-35936":"JoinRoomResult","LeaveRoomResult":"types/os/portals","id-35945":"LeaveRoomResult","ListDataResult":"types/records/data","id-40339":"ListDataResult","ListStudiosResult":"types/records/studios","id-39840":"ListStudiosResult","MarkerActionKinds":"types/permissions","id-265":"MarkerActionKinds","Mod":"types/core","id-35481":"Mod","PortalType":"types/core","id-38342":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-35795":"PossiblePauseTriggerStates","PublicRecordKeyPolicy":"types/records/key","id-40141":"PublicRecordKeyPolicy","RecordDataResult":"types/records/data","id-40297":"RecordDataResult","RecordFileResult":"types/records/files","id-35905":"RecordFileResult","RecordUserPolicyType":"types/records/extra","id-37824":"RecordUserPolicyType","ResourceKinds":"types/permissions","id-245":"ResourceKinds","RevokeMarkerPermissionResult":"types/records/policies","id-43958":"RevokeMarkerPermissionResult","RevokeResourcePermissionResult":"types/records/policies","id-43981":"RevokeResourcePermissionResult","RevokeRoleResult":"types/records/roles","id-44040":"RevokeRoleResult","RoleActionKinds":"types/permissions","id-266":"RoleActionKinds","SetRoomOptionsResult":"types/os/portals","id-35954":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os/portals","id-35984":"SetRoomTrackOptionsResult","ShowInputSuptype":"types/os/input","id-36958":"ShowInputSuptype","ShowInputType":"types/os/input","id-36957":"ShowInputType","SnapTarget":"types/os/portals","id-37240":"SnapTarget","StudioAssignmentRole":"types/records/studios","id-40104":"StudioAssignmentRole","SubjectType":"types/permissions","id-238":"SubjectType","TagFilter":"types/core","id-35477":"TagFilter","TrackKind":"types/records/rooms","id-38077":"TrackKind","TrackSource":"types/records/rooms","id-38078":"TrackSource","TrackVideoQuality":"types/os/rooms","id-38079":"TrackVideoQuality","UpdateEventRecordResult":"types/records/events","id-40844":"UpdateEventRecordResult","UserPolicy":"types/records/data","id-40424":"UserPolicy","animateTag-byOptions":"actions/os/animations","id-1053":"animateTag-byOptions","getbot-tag":"actions/data","id-718":"getbot-tag","getbots-tag":"actions/data","id-702":"getbots-tag","animateTag-byTag":"actions/os/animations","id-1047":"animateTag-byTag","changeState":"actions/data","id-863":"changeState","create":"actions/data","id-847":"create","destroy":"actions/data","id-851":"destroy","getbot-filters":"actions/data","id-711":"getbot-filters","getbots-filters":"actions/data","id-695":"getbots-filters","priorityShout":"actions/os/event","id-912":"priorityShout","shout":"actions/os/event","id-925":"shout","updateBotLinks":"actions/data","id-885":"updateBotLinks","whisper":"actions/os/event","id-951":"whisper","action.perform":"actions/os/event","id-34978":"action.perform","action.reject":"actions/os/event","id-34982":"action.reject","ai.chat-string":"actions/ai","id-1112":"ai.chat-string","ai.chat-message":"actions/ai","id-1115":"ai.chat-message","ai.chat-messages":"actions/ai","id-1118":"ai.chat-messages","ai.generateImage-string":"actions/ai","id-1131":"ai.generateImage-string","ai.generateImage-request":"actions/ai","id-1135":"ai.generateImage-request","ai.generateSkybox-string":"actions/ai","id-1123":"ai.generateSkybox-string","ai.generateSkybox-request":"actions/ai","id-1127":"ai.generateSkybox-request","applyDiffToSnapshot":"actions/data","id-768":"applyDiffToSnapshot","applyMod":"actions/mods","id-837":"applyMod","assert":"actions/debuggers","id-1096":"assert","assertEqual":"actions/debuggers","id-1101":"assertEqual","atPosition":"actions/bot-filters","id-982":"atPosition","byCreator":"actions/bot-filters","id-1003":"byCreator","byID":"actions/bot-filters","id-970":"byID","byMod":"actions/bot-filters","id-974":"byMod","bySpace":"actions/bot-filters","id-999":"bySpace","byTag":"actions/bot-filters","id-965":"byTag","bytes.fromBase64String":"actions/bytes","id-35191":"bytes.fromBase64String","bytes.fromBase64Url":"actions/bytes","id-35208":"bytes.fromBase64Url","bytes.fromHexString":"actions/bytes","id-35199":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-35187":"bytes.toBase64String","bytes.toBase64Url":"actions/bytes","id-35203":"bytes.toBase64Url","bytes.toHexString":"actions/bytes","id-35195":"bytes.toHexString","clearAnimations":"actions/os/animations","id-1067":"clearAnimations","clearTagMasks":"actions/data","id-791":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-35214":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-35220":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-35251":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-35244":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-35309":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-35304":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-35315":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-35300":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-35296":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-35280":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-35270":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-35275":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-35290":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-35319":"crypto.keypair","crypto.sha256":"actions/crypto","id-35236":"crypto.sha256","crypto.sha512":"actions/crypto","id-35240":"crypto.sha512","crypto.sign":"actions/crypto","id-35323":"crypto.sign","deleteTagMaskText":"actions/data","id-818":"deleteTagMaskText","deleteTagText":"actions/data","id-811":"deleteTagText","diffSnapshots":"actions/data","id-763":"diffSnapshots","either":"actions/bot-filters","id-1007":"either","os.beginAudioRecording":"actions/os/audio","id-35025":"os.beginAudioRecording","experiment.beginRecording":"actions/experimental","id-35032":"experiment.beginRecording","os.endAudioRecording":"actions/os/audio","id-35029":"os.endAudioRecording","experiment.endRecording":"actions/experimental","id-35036":"experiment.endRecording","experiment.getAnchorPointPosition":"actions/experimental","id-35015":"experiment.getAnchorPointPosition","experiment.getVoices":"actions/experimental","id-35044":"experiment.getVoices","experiment.localFormAnimation":"actions/experimental","id-34988":"experiment.localFormAnimation","experiment.localPositionTween":"actions/experimental","id-34993":"experiment.localPositionTween","experiment.localRotationTween":"actions/experimental","id-35004":"experiment.localRotationTween","experiment.speakText":"actions/experimental","id-35039":"experiment.speakText","getBotLinks":"actions/data","id-881":"getBotLinks","getBotPosition":"actions/data","id-737":"getBotPosition","getBotRotation":"actions/data","id-742":"getBotRotation","getBotTagValues":"actions/data","id-727":"getBotTagValues","getFormattedJSON":"actions/data","id-755":"getFormattedJSON","getID":"actions/data","id-747":"getID","getJSON":"actions/data","id-751":"getJSON","getLink":"actions/data","id-877":"getLink","getMod":"actions/mods","id-732":"getMod","getSnapshot":"actions/data","id-759":"getSnapshot","getTag":"actions/data","id-773":"getTag","inDimension":"actions/bot-filters","id-978":"inDimension","inStack":"actions/bot-filters","id-988":"inStack","insertTagMaskText":"actions/data","id-803":"insertTagMaskText","insertTagText":"actions/data","id-796":"insertTagText","math.abs":"actions/math","id-35061":"math.abs","math.addVectors":"actions/math","id-35131":"math.addVectors","math.areClose":"actions/math","id-35162":"math.areClose","math.avg":"actions/math","id-35053":"math.avg","math.degreesToRadians":"actions/math","id-35087":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-35127":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-35095":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-35069":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-35104":"math.intersectPlane","math.negateVector":"actions/math","id-35141":"math.negateVector","math.normalizeVector":"actions/math","id-35146":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-35091":"math.radiansToDegrees","math.random":"actions/math","id-35082":"math.random","math.randomInt":"actions/math","id-35077":"math.randomInt","math.scaleVector":"actions/math","id-35156":"math.scaleVector","math.setRandomSeed":"actions/math","id-35073":"math.setRandomSeed","math.sqrt":"actions/math","id-35057":"math.sqrt","math.stdDev":"actions/math","id-35065":"math.stdDev","math.subtractVectors":"actions/math","id-35136":"math.subtractVectors","math.sum":"actions/math","id-35049":"math.sum","math.vectorLength":"actions/math","id-35151":"math.vectorLength","neighboring":"actions/bot-filters","id-993":"neighboring","not":"actions/bot-filters","id-1014":"not","os.attachDebugger":"actions/debuggers","id-34934":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-34923":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-34927":"os.createDebugger-pausable","os.focusOn-bot":"actions/os/portals","id-1199":"os.focusOn-bot","os.focusOn-position":"actions/os/portals","id-1204":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-34931":"os.getExecutingDebugger","showChat-options":"actions/os/input","id-1226":"showChat-options","showChat-placeholder":"actions/os/input","id-1222":"showChat-placeholder","os.showInput":"actions/os/portals","id-1452":"os.showInput","os.addBotDropGrid":"actions/os/portals","id-1522":"os.addBotDropGrid","os.addBotDropSnap":"actions/os/portals","id-1513":"os.addBotDropSnap","os.addDropGrid":"actions/os/portals","id-1518":"os.addDropGrid","os.addDropSnap":"actions/os/portals","id-1509":"os.addDropSnap","os.applyUpdatesToInst":"actions/os/spaces","id-34886":"os.applyUpdatesToInst","os.arSupported":"actions/os/xr","id-1273":"os.arSupported","os.bufferFormAddressGLTF":"actions/os/animations","id-34836":"os.bufferFormAddressGLTF","os.bufferSound":"actions/os/audio","id-1485":"os.bufferSound","os.calculateRayFromCamera":"actions/os/portals","id-34816":"os.calculateRayFromCamera","os.calculateScreenCoordinatesFromViewportCoordinates":"actions/os/portals","id-34826":"os.calculateScreenCoordinatesFromViewportCoordinates","os.calculateViewportCoordinatesFromPosition":"actions/os/portals","id-34821":"os.calculateViewportCoordinatesFromPosition","os.calculateViewportCoordinatesFromScreenCoordinates":"actions/os/portals","id-34831":"os.calculateViewportCoordinatesFromScreenCoordinates","os.cancelSound":"actions/os/audio","id-1489":"os.cancelSound","os.capturePhoto":"actions/os/camera","id-1372":"os.capturePhoto","os.classifyImages":"actions/os/image-classification","id-1364":"os.classifyImages","os.closeBarcodeScanner":"actions/os/barcodes","id-1346":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/os/portals","id-1501":"os.closeCircleWipe","os.closeImageClassifier":"actions/os/image-classification","id-1361":"os.closeImageClassifier","os.closePhotoCamera":"actions/os/camera","id-1376":"os.closePhotoCamera","os.closeQRCodeScanner":"actions/os/barcodes","id-1332":"os.closeQRCodeScanner","os.compileApp":"actions/os/app","id-1636":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os/geolocation","id-34801":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/os/records","id-34788":"os.countEvents","os.createInitializationUpdate":"actions/os/spaces","id-34882":"os.createInitializationUpdate","os.device":"actions/os/system","id-1244":"os.device","os.disableAR":"actions/os/xr","id-1263":"os.disableAR","os.disablePointOfView":"actions/os/portals","id-1288":"os.disablePointOfView","os.disableVR":"actions/os/xr","id-1270":"os.disableVR","os.disableWakeLock":"actions/os/portals","id-1294":"os.disableWakeLock","os.download":"actions/os/files","id-1300":"os.download","os.downloadBots":"actions/os/files","id-1306":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/os/files","id-1311":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/os/files","id-1319":"os.downloadInst","os.enableAR":"actions/os/xr","id-1259":"os.enableAR","os.enableCollaboration":"actions/os/spaces","id-1250":"os.enableCollaboration","os.enableCustomDragging":"actions/os/portals","id-1527":"os.enableCustomDragging","os.enablePointOfView":"actions/os/portals","id-1279":"os.enablePointOfView","os.enableVR":"actions/os/xr","id-1266":"os.enableVR","os.eraseData":"actions/os/records","id-34731":"os.eraseData","os.eraseFile-result":"actions/os/records","id-34772":"os.eraseFile-result","os.eraseFile-url":"actions/os/records","id-34776":"os.eraseFile-url","os.eraseManualApprovalData":"actions/os/records","id-34737":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/os/portals","id-1170":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os/portals","id-1584":"os.getAverageFrameRate","os.getCameraPosition":"actions/os/portals","id-1540":"os.getCameraPosition","os.getCameraRotation":"actions/os/portals","id-1544":"os.getCameraRotation","os.getCurrentDimension":"actions/os/portals","id-1423":"os.getCurrentDimension","os.getCurrentInst":"actions/os/portals","id-1429":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os/spaces","id-34890":"os.getCurrentInstUpdate","os.getData":"actions/os/records","id-34706":"os.getData","os.getDimensionalDepth":"actions/os/portals","id-1442":"os.getDimensionalDepth","os.getFile-result":"actions/os/records","id-34750":"os.getFile-result","os.getFile-url":"actions/os/records","id-34753":"os.getFile-url","os.getFocusPoint":"actions/os/portals","id-1552":"os.getFocusPoint","os.getGeolocation":"actions/os/geolocation","id-1534":"os.getGeolocation","os.getInputList":"actions/os/portals","id-1577":"os.getInputList","os.getInputState":"actions/os/portals","id-1572":"os.getInputState","os.getInstStateFromUpdates":"actions/os/spaces","id-34878":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/os/records","id-34712":"os.getManualApprovalData","os.getMediaPermission":"actions/os/media","id-1580":"os.getMediaPermission","os.getMenuDimension":"actions/os/portals","id-1432":"os.getMenuDimension","os.getMiniPortalDimension":"actions/os/portals","id-1435":"os.getMiniPortalDimension","os.getPointerDirection":"actions/os/portals","id-1568":"os.getPointerDirection","os.getPointerPosition":"actions/os/portals","id-1556":"os.getPointerPosition","os.getPointerRotation":"actions/os/portals","id-1560":"os.getPointerRotation","os.getPortalDimension":"actions/os/portals","id-1438":"os.getPortalDimension","os.getPrivateFile-result":"actions/os/records","id-34764":"os.getPrivateFile-result","os.getPrivateFile-url":"actions/os/records","id-34767":"os.getPrivateFile-url","os.getPublicFile-result":"actions/os/records","id-34758":"os.getPublicFile-result","os.getPublicFile-url":"actions/os/records","id-34760":"os.getPublicFile-url","os.getPublicRecordKey":"actions/os/records","id-34633":"os.getPublicRecordKey","os.getRecordsEndpoint":"actions/os/records","id-34798":"os.getRecordsEndpoint","os.getRoomOptions":"actions/os/rooms","id-1602":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/os/rooms","id-1617":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/os/rooms","id-1606":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/os/records","id-34637":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os/portals","id-1297":"os.getWakeLockConfiguration","os.goToDimension":"actions/os/portals","id-1466":"os.goToDimension","os.goToURL":"actions/os/portals","id-1470":"os.goToURL","os.grantInstAdminPermission":"actions/os/records","id-34653":"os.grantInstAdminPermission","os.grantInstRole":"actions/os/records","id-34673":"os.grantInstRole","os.grantPermission":"actions/os/records","id-34641":"os.grantPermission","os.grantUserRole":"actions/os/records","id-34658":"os.grantUserRole","os.hasBotInMiniPortal":"actions/os/portals","id-1493":"os.hasBotInMiniPortal","os.hideBarcode":"actions/os/barcodes","id-1354":"os.hideBarcode","os.hideChat":"actions/os/input","id-1234":"os.hideChat","os.hideHtml":"actions/os/portals","id-1177":"os.hideHtml","os.hideQRCode":"actions/os/barcodes","id-1339":"os.hideQRCode","os.hideTips":"actions/os/portals","id-1158":"os.hideTips","os.importAUX":"actions/os/files","id-1407":"os.importAUX","os.inSheet":"actions/os/portals","id-1537":"os.inSheet","os.isCollaborative":"actions/os/spaces","id-1247":"os.isCollaborative","os.isInDimension":"actions/os/portals","id-1419":"os.isInDimension","os.isRecordKey":"actions/os/records","id-34688":"os.isRecordKey","os.joinRoom":"actions/os/rooms","id-1587":"os.joinRoom","os.ldrawCountTextBuildSteps":"actions/os/ldraw","id-34855":"os.ldrawCountTextBuildSteps","os.leaveRoom":"actions/os/rooms","id-1592":"os.leaveRoom","os.listBuiltinTags":"actions/os/app","id-34621":"os.listBuiltinTags","os.listData":"actions/os/records","id-34718":"os.listData","os.listDataByMarker":"actions/os/records","id-34724":"os.listDataByMarker","os.listFormAnimations":"actions/os/animations","id-34851":"os.listFormAnimations","os.listInstUpdates":"actions/os/spaces","id-34875":"os.listInstUpdates","os.listUserStudios":"actions/os/records","id-34794":"os.listUserStudios","os.loadInst":"actions/os/spaces","id-1399":"os.loadInst","os.log":"actions/os/system","id-1530":"os.log","os.meetCommand":"actions/os/meets","id-34911":"os.meetCommand","os.meetFunction":"actions/os/meets","id-34916":"os.meetFunction","os.mergeInstUpdates":"actions/os/spaces","id-34893":"os.mergeInstUpdates","os.openBarcodeScanner":"actions/os/barcodes","id-1342":"os.openBarcodeScanner","os.openCircleWipe":"actions/os/portals","id-1505":"os.openCircleWipe","os.openDevConsole":"actions/os/system","id-1478":"os.openDevConsole","os.openImageClassifier":"actions/os/image-classification","id-1357":"os.openImageClassifier","os.openPhotoCamera":"actions/os/camera","id-1368":"os.openPhotoCamera","os.openQRCodeScanner":"actions/os/barcodes","id-1328":"os.openQRCodeScanner","os.openURL":"actions/os/portals","id-1474":"os.openURL","os.parseBotsFromData":"actions/os/files","id-1411":"os.parseBotsFromData","os.playSound":"actions/os/audio","id-1481":"os.playSound","os.raycast":"actions/os/portals","id-34810":"os.raycast","os.raycastFromCamera":"actions/os/portals","id-34805":"os.raycastFromCamera","os.recordData":"actions/os/records","id-34692":"os.recordData","os.recordEvent":"actions/os/records","id-34782":"os.recordEvent","os.recordFile":"actions/os/records","id-34743":"os.recordFile","os.recordManualApprovalData":"actions/os/records","id-34699":"os.recordManualApprovalData","os.registerApp":"actions/os/app","id-1627":"os.registerApp","os.registerTagPrefix":"actions/os/app","id-1622":"os.registerTagPrefix","os.remoteCount":"actions/os/remotes","id-34897":"os.remoteCount","os.remotes":"actions/os/remotes","id-34872":"os.remotes","os.replaceDragBot":"actions/os/portals","id-1415":"os.replaceDragBot","os.reportInst":"actions/os/moderation","id-34624":"os.reportInst","os.requestAuthBot":"actions/os/records","id-34627":"os.requestAuthBot","os.requestAuthBotInBackground":"actions/os/records","id-34630":"os.requestAuthBotInBackground","os.requestFullscreenMode":"actions/os/portals","id-1167":"os.requestFullscreenMode","os.requestWakeLock":"actions/os/portals","id-1291":"os.requestWakeLock","os.revokeInstRole":"actions/os/records","id-34681":"os.revokeInstRole","os.revokePermission":"actions/os/records","id-34647":"os.revokePermission","os.revokeUserRole":"actions/os/records","id-34666":"os.revokeUserRole","os.run":"actions/os/system","id-1237":"os.run","os.setClipboard":"actions/os/clipboard","id-1180":"os.setClipboard","os.setRoomOptions":"actions/os/rooms","id-1597":"os.setRoomOptions","os.setRoomTrackOptions":"actions/os/rooms","id-1611":"os.setRoomTrackOptions","os.share":"actions/os/input","id-1497":"os.share","os.showAccountInfo":"actions/os/system","id-1253":"os.showAccountInfo","os.showBarcode":"actions/os/barcodes","id-1349":"os.showBarcode","os.showConfirm":"actions/os/portals","id-1462":"os.showConfirm","os.showHtml":"actions/os/portals","id-1173":"os.showHtml","os.showInputForTag":"actions/os/portals","id-1446":"os.showInputForTag","os.showJoinCode":"actions/os/barcodes","id-1162":"os.showJoinCode","os.showQRCode":"actions/os/barcodes","id-1335":"os.showQRCode","os.showUploadAuxFile":"actions/os/files","id-1322":"os.showUploadAuxFile","os.showUploadFiles":"actions/os/files","id-1325":"os.showUploadFiles","os.sleep":"actions/os/system","id-1142":"os.sleep","os.startFormAnimation":"actions/os/animations","id-34840":"os.startFormAnimation","os.stopFormAnimation":"actions/os/animations","id-34846":"os.stopFormAnimation","os.tip":"actions/os/portals","id-1151":"os.tip","os.toast":"actions/os/portals","id-1146":"os.toast","os.totalRemoteCount":"actions/os/remotes","id-34901":"os.totalRemoteCount","os.unloadInst":"actions/os/spaces","id-1403":"os.unloadInst","os.unregisterApp":"actions/os/app","id-1632":"os.unregisterApp","os.version":"actions/os/system","id-1241":"os.version","os.vrSupported":"actions/os/xr","id-1276":"os.vrSupported","os.agreedUponTime":"actions/os/time","id-1380":"os.agreedUponTime","os.deadReckoningTime":"actions/os/time","id-1388":"os.deadReckoningTime","os.instLatency":"actions/os/time","id-1382":"os.instLatency","os.instTimeOffset":"actions/os/time","id-1384":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/os/time","id-1386":"os.instTimeOffsetSpread","os.localTime":"actions/os/time","id-1378":"os.localTime","remote":"actions/os/event","id-1021":"remote","sendRemoteData":"actions/os/event","id-1033":"sendRemoteData","removeTags":"actions/data","id-826":"removeTags","renameTag":"actions/data","id-831":"renameTag","setTag":"actions/data","id-778":"setTag","setTagMask":"actions/data","id-784":"setTagMask","subtractMods":"actions/mods","id-842":"subtractMods","superShout":"actions/os/event","id-907":"superShout","uuid":"actions/data","id-1044":"uuid","web.get":"actions/web","id-35342":"web.get","web.hook":"actions/web","id-35353":"web.hook","web.post":"actions/web","id-35347":"web.post","configBot":"actions/os/system","id-1107":"configBot"}}');var i=a(1601);a(5058),a(6967);const r={id:"data",title:"Data Actions",sidebar_label:"Data",description:"The Data Actions are used to get and set data on bots."},c=void 0,d={id:"actions/data",title:"Data Actions",description:"The Data Actions are used to get and set data on bots.",source:"@site/docs/actions/data.mdx",sourceDirName:"actions",slug:"/actions/data",permalink:"/actions/data",draft:!1,unlisted:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/actions/data.mdx",tags:[],version:"current",frontMatter:{id:"data",title:"Data Actions",sidebar_label:"Data",description:"The Data Actions are used to get and set data on bots."},sidebar:"docs",previous:{title:"Crypto",permalink:"/actions/crypto"},next:{title:"Debuggers",permalink:"/actions/debuggers"}},l={},m=[...(0,i.KO)(s)];function p(t){return(0,o.jsx)(i.hl,{doc:s})}function u(t={}){const{wrapper:e}={...(0,n.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(p,{...t})}):p()}},1601:(t,e,a)=>{a.d(e,{hl:()=>C,KO:()=>w});var o=a(79),n=a(5058),s=a(6144),i=a(8405),r=a(1888),c=a(5250);class d extends o.Component{constructor(t){super(t),this.state={hasError:!1}}static getDerivedStateFromError(t){return{hasError:!0,error:t}}componentDidCatch(t,e){const a="["+this.props.reflection.name+"] "+t;if(!this.props.root)throw a;console.error(a)}render(){return this.state.hasError?(0,c.jsxs)("h1",{children:["[",this.props.reflection.name,"] ",this.state.error]}):this.props.children}}var l=a(1537),m=a(6967),p=a(7544),u=a(3324),g=a(5834),h=a(1623);function y(t){void 0===t&&(t={});const e=t.references;return t=>{(0,g.Vn)(t,"link",(t=>{if(t.url.startsWith("tags:")){const e=t.url.slice(5);e.startsWith("@")?t.url=(0,l.Z)("tags/listen")+x(e.slice(1)):t.url=(0,l.Z)(h.L0[e])+x(e)}else if(t.url.startsWith("ref:")){const a=t.url.slice(4),o=e[a];t.url=(0,l.Z)(o)+"#"+a}else if(t.url.startsWith("glossary:")){const e=t.url.slice(9);t.url=(0,l.Z)("glossary")+"#"+f(e)}else if(t.url.startsWith("page:")){const[e,a]=t.url.slice(5).split("#");t.url=(0,l.Z)(e)+"#"+a}}))}}function x(t){return"#"+f(t)}function f(t){return t.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function b(t){return void 0===t&&(t={}),t=>{t&&t.children&&t.children.length>0&&"paragraph"===t.children[0].type&&(t.children=t.children[0].children.concat(t.children.slice(1)))}}const k={Project:1,Module:2,Namespace:4,Enum:8,EnumMember:16,Variable:32,Function:64,Class:128,Interface:256,Constructor:512,Property:1024,Method:2048,CallSignature:4096,IndexSignature:8192,ConstructorSignature:16384,Parameter:32768,TypeLiteral:65536,TypeParameter:131072,Accessor:262144,GetSignature:524288,SetSignature:1048576,TypeAlias:2097152,Reference:4194304};console.log("ReflectionKind",k);const v=new Map([[k.Property,["type"]],["reflection",["declaration"]],[k.TypeLiteral,["children","signatures"]],[k.CallSignature,["parameters","comment","type"]]]);function T(t,e,a){void 0===a&&(a=null),function(t,e,a){var o;void 0===a&&(a=null);let n=v.get(null!=(o=t.kind)?o:t.type)||[];for(let s of n){let o=t[s];if(Array.isArray(o))for(let t of o)t&&e(t,a,s);else o&&e(o,a,s)}}(t,((t,a,o)=>{e(t,a,o),T(t,e,t)}))}function A(t,e){let a=[];return e(t)&&a.push(t),T(t,((t,o,n)=>{e(t,o,n)&&a.push(t)})),a}const R=["first","second","third","fourth","fifth"];function S(t,e){return t.name+"-"+e.name}function B(t,e){const a=S(t,e);let o;var n;return o=e.kind===k.Constructor?Y(e.signatures[0],bt(e)):e.kind===k.Method?Y(e.signatures[0]):e.kind===k.Accessor?(n=e).name+": "+dt(n.getSignature.type):nt(e),o="<span>"+o+"</span>",{value:o,id:a,level:3}}function N(t){let e=[],{properties:a,constructors:o,methods:n}=function(t){let e=[],a=[],o=[];if(!t)return{properties:e,constructors:a,methods:o};for(let n of t)n.flags.isPrivate||(n.kind===k.Property||n.kind===k.Accessor?e.push(n):n.kind===k.Constructor?a.push(n):n.kind===k.Method&&o.push(n));return{properties:e,constructors:a,methods:o}}(t.children);return a.length>0&&e.push(...a.map((e=>B(t,e)))),o.length>0&&e.push(...o.map((e=>B(t,e)))),n.length>0&&e.push(...n.map((e=>B(t,e)))),e}function w(t){let e=[{value:t.pageTitle,id:"",level:2}];for(let a of t.contents)if(a.reflection.kind===k.Interface||a.reflection.kind===k.Class){const t=bt(a.reflection),o=kt(a.reflection);e.push({value:t,id:o,level:2}),a.reflection.kind===k.Class&&e.push(...N(a.reflection))}else if(a.reflection.kind===k.CallSignature){const t=bt(a.reflection),o=kt(a.reflection);e.push({value:"<span>"+Y(a.reflection,t)+"</span>",id:o,level:2})}else if(a.reflection.kind===k.TypeAlias){const t=bt(a.reflection),o=kt(a.reflection);e.push({value:t,id:o,level:2})}else if(a.reflection.kind===k.GetSignature||a.reflection.kind===k.SetSignature){const t=bt(a.reflection),o=kt(a.reflection);e.push({value:"<code>"+Y(a.reflection,t)+"</code>",id:o,level:2})}else{const t=bt(a.reflection),o=kt(a.reflection);e.push({value:t,id:o,level:2})}return e}function C(t){let{doc:e}=t;const a=e.contents,o=e.references;return(0,c.jsx)("ul",{className:"api api-list",children:a.map((t=>(0,c.jsx)("li",{className:"api-member-item",children:(0,c.jsx)(D,{reflection:t.reflection,references:o})},t.id)))})}function D(t){let{reflection:e,references:a}=t;return e.kind===k.Interface||e.kind===k.Class?(0,c.jsx)(L,{reflection:e,references:a}):e.kind===k.CallSignature||e.kind===k.GetSignature||e.kind===k.SetSignature?(0,c.jsx)(G,{reflection:e,references:a}):e.kind===k.TypeAlias?(0,c.jsx)(F,{reflection:e,references:a}):(0,c.jsx)(j,{reflection:e,references:a})}function F(t){let{reflection:e,references:a}=t;const o=bt(e),s=kt(e);return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h2",id:s,children:o}),(0,c.jsx)(E,{reflection:e,references:a}),(0,c.jsx)(P,{reflection:e,name:o,references:a}),(0,c.jsx)(et,{member:e})]})}function P(t){let{reflection:e,name:a,references:o}=t,n="";return"union"===e.type.type&&(n=(0,c.jsx)(O,{type:e.type,name:a,references:o})),n}function O(t){let{type:e,name:a,references:o}=t;return(0,c.jsxs)("div",{children:[(0,c.jsxs)("p",{children:["A ",a," can be one of the following values:"]}),(0,c.jsx)("ul",{children:e.types.map(((t,e)=>(0,c.jsx)(I,{type:t,references:o},e)))})]})}function I(t){let{type:e,references:a}=t;return(0,c.jsx)("li",{children:(0,c.jsx)("code",{children:(0,c.jsx)(ct,{type:e,references:a})})})}function L(t){let{reflection:e,references:a}=t;const o=bt(e),s=kt(e);return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h2",id:s,children:o}),(0,c.jsx)(M,{reflection:e,references:a}),(0,c.jsx)(et,{member:e})]})}function j(t){let{reflection:e,references:a}=t;const o=bt(e),s=kt(e);return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h2",id:s,children:o}),(0,c.jsx)(J,{reflection:e,references:a}),(0,c.jsx)(et,{member:e})]})}function G(t){let{reflection:e,references:a}=t;const o=bt(e),n=kt(e);return(0,c.jsx)("div",{children:(0,c.jsx)(z,{func:e,sig:e,name:o,link:n,references:a})})}function M(t){var e;const a=t.reflection;if(!a)throw new Error("Unable to find "+t.name+"!");const o=function(t){return(0,r.sortBy)(t,(t=>t.kind===k.Property||t.kind===k.Accessor?0:t.kind===k.Constructor?1:2)).filter((t=>!t.flags.isPrivate))}(null!=(e=a.children)?e:[]);return(0,c.jsx)(d,{reflection:a,root:!0,children:(0,c.jsxs)("div",{className:"api",children:[(0,c.jsx)(E,{reflection:a,references:t.references}),(0,c.jsx)(n.Z,{as:"h3",id:a.name+"-properties",children:"Members"}),(0,c.jsx)("div",{children:(0,c.jsxs)("ul",{className:"class-members-list",children:[a.indexSignature?(0,c.jsx)(U,{reflection:a,index:a.indexSignature,references:t.references}):"",a.references?(0,c.jsx)(_,{prop:a,references:t.references}):"",o.map((e=>(0,c.jsx)(q,{member:e,link:S(a,e),references:t.references},e.name)))]})})]})})}function U(t){let{reflection:e,index:a,references:o}=t;const s=a.parameters[0];return(0,c.jsxs)("li",{className:"class-member-item",children:[(0,c.jsx)(n.Z,{as:"h4",id:e.name+"-_index",children:"Index Signature"}),(0,c.jsx)(E,{reflection:a,references:o}),(0,c.jsx)("pre",{children:(0,c.jsxs)("code",{children:["[",s.name,": ",(0,c.jsx)(ct,{type:s.type,references:o}),"]: ",(0,c.jsx)(ct,{type:a.type,references:o})]})}),(0,c.jsx)(et,{member:a})]})}function E(t){let{reflection:e,references:a}=t;return(0,c.jsx)("div",{children:(0,c.jsx)(Z,{comment:e.comment,references:a})})}function q(t){let e;return e=t.member.kind===k.Property?function(t){let e,a=t.member,o="";a.references?(o=(0,c.jsx)(V,{prop:a,references:t.references}),e=(0,c.jsx)(c.Fragment,{children:a.typeReference})):"reflection"===a.type.type&&a.typeText&&a.typeReference?(e=(0,c.jsx)(c.Fragment,{children:a.typeReference}),o=(0,c.jsx)(s.Z,{language:"typescript",children:a.typeText})):e=(0,c.jsx)(ct,{type:t.member.type,references:t.references});!o&&a.typeText&&a.typeReference&&(o=(0,c.jsx)(s.Z,{language:"typescript",children:a.typeText}));const i=bt(a);kt(a);return(0,c.jsxs)("div",{className:"class-member-property",children:[(0,c.jsxs)(n.Z,{as:"h4",id:t.link,children:[(0,c.jsxs)("span",{className:"class-member-name",children:[i,t.member.flags.isOptional?(0,c.jsx)("span",{className:"class-member-optional",children:"?"}):""]})," ",(0,c.jsx)("span",{className:"class-member-type",children:e})]}),(0,c.jsx)(E,{reflection:t.member,references:t.references}),o]})}(t):t.member.kind===k.Constructor?function(t){const e=bt(t.member);return(0,c.jsx)("div",{children:(0,c.jsx)(z,{func:t.member,name:e,sig:t.member.signatures[0],link:t.link,references:t.references})})}(t):t.member.kind===k.Method?function(t){const e=bt(t.member);return(0,c.jsx)("div",{children:(0,c.jsx)(z,{func:t.member,name:e,sig:t.member.signatures[0],link:t.link,references:t.references})})}(t):t.member.kind===k.Accessor?function(t){var e;return(0,c.jsxs)("div",{className:"class-member-property",children:[(0,c.jsxs)(n.Z,{as:"h4",id:t.link,children:[(0,c.jsx)("span",{className:"class-member-name",children:t.member.name})," ",(0,c.jsx)("span",{className:"class-member-type",children:(0,c.jsx)(ct,{type:t.member.getSignature.type,references:t.references})})]}),(0,c.jsx)("p",{children:null==(e=t.member.getSignature.comment)?void 0:e.text})]})}(t):"Kind not found "+t.member.kind,(0,c.jsxs)(d,{reflection:t.member,children:[(0,c.jsx)("span",{role:"separator",className:"class-member-separator"}),(0,c.jsx)("li",{className:"class-member-item",children:e})]})}function _(t){let{prop:e,references:a}=t;const o=kt(e);return(0,c.jsxs)("li",{className:"class-member-item",children:[(0,c.jsx)(n.Z,{as:"h4",id:o+"-extra-functions",children:"Extra Functions"}),(0,c.jsx)("p",{children:"The extra functions that are available on this type."}),(0,c.jsxs)(i.Z,{children:[(0,c.jsx)("p",{children:"See the following functions for more information:"}),(0,c.jsx)(Q,{children:e.references,references:a})]})]})}function V(t){let{prop:e,references:a}=t;return(0,c.jsxs)(i.Z,{children:[(0,c.jsx)("p",{children:"See the following functions for more information:"}),(0,c.jsx)(Q,{children:e.references,references:a})]})}function J(t){const e=t.reflection,a=(e.type.declaration,Nt(e));return(0,c.jsx)(d,{reflection:e,root:!0,children:(0,c.jsxs)("div",{className:"api",children:[(0,c.jsx)(E,{reflection:e,references:t.references}),a.map((e=>(0,c.jsx)(W,{group:e,references:t.references},e.group)))]})})}function W(t){let{group:e,references:a}=t;const o=e.children,s=St(e);return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h3",id:e.group,children:s}),o.map((t=>(0,c.jsx)(K,{namespace:t.namespace,name:t.name,property:t.child,link:S(t.reflection,t.child),references:a},t.child.id)))]})}function K(t){let e;if(mt(t.property)){var a;const o=t.namespace?t.namespace+"."+t.name:t.name,n=t.property.type.declaration;e=z({name:o,func:t.property,sig:null!=(a=Tt(n.signatures))?a:n.signatures[0],link:t.link,references:t.references})}else if(ut(t.property)){const a=t.namespace?t.namespace+"."+t.name:t.name,o=At(t.property);e=z({name:a,func:t.property,sig:o,link:t.link,references:t.references})}else e=ht(t.property)?(0,c.jsxs)(c.Fragment,{children:["This is really fun! ",t.property.name]}):t.property.kind===k.Property?function(t){return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h3",id:t.link,children:(0,c.jsxs)("code",{children:[t.property.name,": ",(0,c.jsx)(ct,{type:t.property.type,references:t.references})]})}),(0,c.jsx)(E,{reflection:t.property,references:t.references})]})}(t):"Kind Not found "+t.property.kind;return(0,c.jsx)(d,{reflection:t.property,children:(0,c.jsx)("div",{children:e})})}function z(t){let{func:e,sig:a,link:o,name:s,references:i}=t;const r=a.parameters||[];return(0,c.jsxs)("div",{children:[(0,c.jsx)(n.Z,{as:"h4",id:o,children:(0,c.jsx)($,{func:e,sig:a,name:s,references:i})}),(0,c.jsx)(H,{sig:a,references:i}),r.length>0?(0,c.jsx)("div",{children:r.map(((t,e)=>(0,c.jsx)(tt,{param:t,index:e,references:i},t.name)))}):"",(0,c.jsx)(et,{member:a})]})}function H(t){let{sig:e,references:a}=t;return(0,c.jsx)(Z,{comment:e.comment,references:a})}function Z(t){let{comment:e,references:a}=t;return(0,c.jsx)(Q,{references:a,children:X(e)})}function Q(t){let{children:e,remarkPlugins:a,rehypePlugins:o,references:n}=t;return(0,c.jsx)(p.U,{remarkPlugins:[[y,{references:n}],...a||[]],rehypePlugins:[u.Z,...o||[]],children:e})}function X(t){let e="";if(t&&t.summary)for(let a of t.summary)e+=a.text;return e}function $(t){let{func:e,sig:a,name:o,references:n}=t;const s=a.parameters||[];let i="";return e.kind!==k.GetSignature&&(i=(0,c.jsxs)(c.Fragment,{children:["(",s.map(((t,e)=>(0,c.jsxs)("span",{children:[e>0?", ":"",t.flags.isRest?"...":"",t.name,t.flags.isOptional?"?":"",": ",(0,c.jsx)(ct,{type:t.type,references:n})]},t.name))),")"]})),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("span",{className:"function-member-name",children:[(e.flags.isStatic?"static ":"")+(o||a.name),i]}),": ",(0,c.jsx)("span",{className:"function-member-type",children:(0,c.jsx)(ct,{type:a.type,references:n})})]})}function Y(t,e){void 0===e&&(e=t.name);const a=t.parameters||[];let o="";return t.kind!==k.GetSignature&&(o="("+a.map(((t,e)=>(t.flags.isRest?"...":"")+t.name)).join(", ")+")"),""+e+o+": "+dt(t.type)}function tt(t){let e,{param:a,index:o,references:n}=t;return e=a.flags.isRest&&a.type.elementType?0===o?(0,c.jsxs)("p",{children:[(0,c.jsx)("em",{children:"Each parameter"})," is a ",(0,c.jsx)(ct,{type:a.type.elementType,references:n})," and are ",(0,c.jsx)(st,{param:a,isRest:!0,references:n})]}):(0,c.jsxs)("p",{children:[(0,c.jsx)("em",{children:"Each other parameter"})," is a ",(0,c.jsx)(ct,{type:a.type.elementType,references:n})," and are ",(0,c.jsx)(st,{param:a,isRest:!0,references:n})]}):(0,c.jsxs)("p",{children:["The ",(0,c.jsxs)("em",{children:[ot(o)," parameter"]})," is",a.flags.isOptional?" optional and is":""," a ",(0,c.jsx)(ct,{type:a.type,references:n})," and ",(0,c.jsx)(st,{param:a,references:n})]}),e}function et(t){var e;let{member:a}=t;if(null==(e=a.comment)||!e.blockTags)return"";const o=a.comment.blockTags.filter((t=>"@example"===t.tag));return o.length>0?(0,c.jsxs)("div",{children:[(0,c.jsx)("h5",{className:"examples-heading",children:"Examples"}),o.map(((t,e)=>(0,c.jsx)(at,{example:t},e)))]}):""}function at(t){let{example:e}=t;const a=e.content.map((t=>t.text)).join(""),o=a.indexOf("\n"),n=a.indexOf("\n",o+1);let i="typescript";o>3&&(i=a.substring(3,o).trim());const r=a.lastIndexOf("```"),d=a.substring(o,n),l=a.substring(n,r);return(0,c.jsx)(s.Z,{language:i,title:d.trim(),children:l.trim()})}function ot(t){return R[t]}function nt(t,e){let a;return void 0===e&&(e=t.name),a=t.typeReference?t.typeReference:dt(t.type),e+(t.flags.isOptional?"?":"")+": "+a}function st(t){let{param:e,isRest:a,references:o}=t;return(0,c.jsx)(Q,{remarkPlugins:[b],references:o,children:it(e,a)})}function it(t,e){let a=X(t.comment);return a?(a=a.slice(0,1).toLowerCase()+a.slice(1),a.startsWith("the")&&!e&&(a="is "+a),a):""}const rt=new Map([["ArrayBuffer","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"],["Blob","https://developer.mozilla.org/en-US/docs/Web/API/Blob"],["Uint8Array","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"],["RegExp","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"],["Function","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"],["Error","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"]]);function ct(t){let{type:e,references:a,isInUnionOrArray:n}=t;if("intrinsic"===e.type)return(0,c.jsx)("span",{children:e.name});if(e.name){var s,i,r,d,p,u;if(e.name===(null==(s=e.target)?void 0:s.qualifiedName)&&rt.has(e.name)){const t=rt.get(e.name);return(0,c.jsx)(c.Fragment,{children:(0,c.jsx)("a",{className:"type-link",href:t,children:e.name})})}if("Promise"===e.name&&"Promise"===(null==(i=e.target)?void 0:i.qualifiedName)&&e.typeArguments&&1===e.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"Promise"}),"<",(0,c.jsx)(ct,{type:e.typeArguments[0],references:a}),">"]});if("Partial"===e.name&&"Partial"===(null==(r=e.target)?void 0:r.qualifiedName)&&e.typeArguments&&1===e.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype",children:"Partial"}),"<",(0,c.jsx)(ct,{type:e.typeArguments[0],references:a}),">"]});if("Omit"===e.name&&"Omit"===(null==(d=e.target)?void 0:d.qualifiedName)&&e.typeArguments&&2===e.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys",children:"Omit"}),"<",(0,c.jsx)(ct,{type:e.typeArguments[0],references:a}),", ",(0,c.jsx)(ct,{type:e.typeArguments[1],references:a}),">"]});if("Map"===e.name&&"Map"===(null==(p=e.target)?void 0:p.qualifiedName)&&e.typeArguments&&2===e.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:"Map"}),"<",(0,c.jsx)(ct,{type:e.typeArguments[0],references:a}),", ",(0,c.jsx)(ct,{type:e.typeArguments[1],references:a}),">"]});if("Set"===e.name&&"Set"===(null==(u=e.target)?void 0:u.qualifiedName)&&e.typeArguments&&1===e.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",children:"Set"}),"<",(0,c.jsx)(ct,{type:e.typeArguments[0],references:a}),">"]});let t="#"+e.name;const o=e.id?null==a?void 0:a["id-"+e.id]:null;if(o){const e=null==a?void 0:a[o];e&&(t=(0,l.Z)(e)+"#"+o)}else e.id?console.log("Missing reference for",e.id,e.name,e,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",e,"it is likely that the type is not exported from the entry. ");return(0,c.jsx)(m.Z,{className:"type-link",href:t,children:e.name})}if("union"===e.type)return(0,c.jsxs)("span",{children:["(",e.types.map(((t,e)=>(0,c.jsxs)(o.Fragment,{children:[e>0?" | ":"",(0,c.jsx)(ct,{type:t,references:a,isInUnionOrArray:!0})]},e))),")"]});if("array"===e.type)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(ct,{type:e.elementType,references:a,isInUnionOrArray:!0}),"[]"]});if("literal"===e.type)return"string"==typeof e.value?(0,c.jsxs)("span",{children:['"',e.value,'"']}):"number"==typeof e.value?(0,c.jsx)("span",{children:e.value}):"boolean"==typeof e.value?(0,c.jsx)("span",{children:e.value?"true":"false"}):void 0===e.value?(0,c.jsx)("span",{children:"undefined"}):null===e.value?(0,c.jsx)("span",{children:"null"}):""+JSON.stringify(e);if("reflection"===e.type){const t=e.declaration;if(t.kind===k.TypeLiteral&&t.signatures&&!t.children){var g;const e=null!=(g=Tt(t.signatures))?g:t.signatures[0],o=e.parameters||[];return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("span",{children:[n?"(":"","(",o.map(((t,e)=>(0,c.jsxs)("span",{children:[e>0?",":"",t.name,": ",(0,c.jsx)(ct,{type:t.type,references:a})]},e))),") => ",(0,c.jsx)(ct,{type:e.type,references:a}),n?")":""]})})}return"object"}if("intersection"===e.type){return e.types.map(((t,e)=>(0,c.jsxs)(c.Fragment,{children:[e>0?" & ":"",(0,c.jsx)(ct,{type:t,references:a,isInUnionOrArray:!0})]})))}if("tuple"===e.type){const t=e.elements.map(((t,e)=>(0,c.jsxs)(c.Fragment,{children:[e>0?", ":"",(0,c.jsx)(ct,{type:t,references:a,isInUnionOrArray:!0})]})));return(0,c.jsxs)("span",{children:["[",t,"]"]})}return"typeOperator"===e.type?(0,c.jsxs)("span",{children:[e.operator," ",(0,c.jsx)(ct,{type:e.target,references:a,isInUnionOrArray:!0})]}):""+JSON.stringify(e)}function dt(t){return"intrinsic"===t.type?t.name:t.name?"Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length?"Promise&lt;"+dt(t.typeArguments[0])+"&gt;":t.name:"union"===t.type?"("+t.types.map((t=>dt(t))).join(" | ")+")":"array"===t.type?dt(t.elementType)+"[]":"literal"===t.type?"string"==typeof t.value?'"'+t.value+'"':"number"==typeof t.value?String(t.value):"boolean"==typeof t.value?t.value?"true":"false":""+JSON.stringify(t):"reflection"===t.type?"object":"missing!: "+JSON.stringify(t)}function lt(t){return mt(t)||ut(t)}function mt(t){return t&&pt(t.type)}function pt(t){return t&&"reflection"===t.type&&t.declaration&&t.declaration.signatures&&t.declaration.signatures.some((t=>t.kind===k.CallSignature))}function ut(t){return t&&t.type&&"intersection"===t.type.type&&t.type.types.some((t=>pt(t)))}function gt(t){return t&&t.kind===k.CallSignature}function ht(t){return t&&t.type&&"reflection"===t.type.type&&t.type.declaration&&t.type.declaration.kind===k.TypeLiteral&&t.type.declaration.children}function yt(t,e){var a;const o=null==(a=t.comment)||null==(a=a.blockTags)?void 0:a.find((t=>t.tag===e));return o?o.content.map((t=>t.text)).join(""):null}function xt(t){if(t)for(let e of t){const t=yt(e,"@docname");if(t)return t.trim()}return null}function ft(t){if(mt(t)){var e;const a=null==t||null==(e=t.type)?void 0:e.declaration;let o=vt(null==a?void 0:a.signatures);if(o)return o}else if(ut(t)){const e=t.type.types;for(let t of e)if(pt(t)){let e=vt(t.declaration.signatures);if(e)return e}}else if(gt(t)){let e=vt([t]);if(e)return e}return"99-default"}function bt(t){if(t.kind===k.Method){let e=xt(t.signatures);if(e)return e}else if(mt(t)){var e;const a=null==t||null==(e=t.type)?void 0:e.declaration;let o=xt(null==a?void 0:a.signatures);if(o)return o}else if(ut(t)){const e=t.type.types;for(let t of e)if(pt(t)){let e=xt(t.declaration.signatures);if(e)return e}}else if(gt(t)){let e=xt([t]);if(e)return e}return yt(a=t,"@docname")||a.name;var a}function kt(t){const e=yt(t,"@docid");if(e)return e;const a=function(t,e){let a=[];return T(t,((t,o,n)=>{"comment"===n&&(console.log(t),a.push(...t.blockTags.filter((t=>t.tag===e))))})),a}(t,"@docid");return a.length>0?a[0].text.trim():bt(t)}function vt(t){if(t)for(let e of t){const t=yt(e,"@docgroup");if(t)return t.trim()}return null}function Tt(t){for(let e of t){if(yt(e,"@docgroup"))return e}return null}function At(t){const e=t.type.types;let a=null;for(let o of e)if(pt(o)){const t=o.declaration.signatures;a||(a=t[0]);let e=Tt(t);if(e)return e}return a}function Rt(t){const e=(a=t,o=k.CallSignature,A(a,(t=>t.kind===o)));var a,o;for(let n of e){const t=yt(n,"@docgrouptitle");if(t)return t.trim()}return null}function St(t){for(let e of t.children){let t=Rt(e.child);if(t)return t}return t.group}function Bt(t){if(t.kind===k.CallSignature)return gt(t)||lt(t)||ht(t)?[{group:ft(t),name:bt(t),reflection:t,child:t}]:[];if(t.kind===k.TypeAlias||t.kind===k.GetSignature||t.kind===k.SetSignature)return[];const e=t.type.declaration.children.filter((t=>gt(t)||lt(t)||ht(t))),a=null!==yt(t,"@hiddennamespace")?null:t.name;return(0,r.flatMap)(e,(e=>lt(e)?{group:ft(e),name:bt(e),namespace:a,reflection:t,child:e}:Bt(e)))}function Nt(t){const e=Bt(t),a=(0,r.groupBy)(e,(t=>t.group));let o=[];for(let n in a)o.push({group:n,children:a[n]});return o=(0,r.sortBy)(o,(t=>t.group)),o}}}]);