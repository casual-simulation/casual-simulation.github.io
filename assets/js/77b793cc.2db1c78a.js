"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[5876],{4629:function(e,t,a){a.d(t,{hl:function(){return D},zl:function(){return Z},KO:function(){return O},HE:function(){return N},Op:function(){return S}});var o=a(7639),n=a(7294),i=a(2503),s=a(814),r=a(4673),c=a(6486),l=a(1073),d=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={hasError:!1},a}(0,l.Z)(t,e),t.getDerivedStateFromError=function(e){return{hasError:!0,error:e}};var a=t.prototype;return a.componentDidCatch=function(e,t){var a="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw a;console.error(a)},a.render=function(){return this.state.hasError?n.createElement("h1",null,"[",this.props.reflection.name,"] ",this.state.error):this.props.children},t}(n.Component),m=a(4996),p=a(9960),u=a(7120),g=a(6388),h=a(1169);function f(e){void 0===e&&(e={});var t=e.references;return function(e){(0,h.Vn)(e,"link",(function(e){if(e.url.startsWith("tags:")){var a=e.url.slice("tags:".length);a.startsWith("@")?e.url=(0,m.Z)("listen-tags")+y(a.slice(1)):e.url=(0,m.Z)("tags")+y(a)}else if(e.url.startsWith("ref:")){var o=e.url.slice("ref:".length),n=t[o];e.url=(0,m.Z)(n)+"#"+o}else if(e.url.startsWith("glossary:")){var i=e.url.slice("glossary:".length);e.url=(0,m.Z)("glossary")+"#"+b(i)}else if(e.url.startsWith("page:")){var s=e.url.slice("page:".length).split("#"),r=s[0],c=s[1];e.url=(0,m.Z)(r)+"#"+c}}))}}function y(e){return"#"+b(e)}function b(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function v(e){return void 0===e&&(e={}),function(e){e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}var k={Property:["type"],reflection:["declaration"],"Type literal":["children","signatures"],"Call signature":["parameters","comment","type"]};function x(e,t,a){void 0===a&&(a=null),function(e,t,a){var n;void 0===a&&(a=null);for(var i,s=k[null!=(n=e.kindString)?n:e.type]||[],r=(0,o.Z)(s);!(i=r()).done;){var c=i.value,l=e[c];if(Array.isArray(l))for(var d,m=(0,o.Z)(l);!(d=m()).done;){var p=d.value;p&&t(p,a,c)}else l&&t(l,a,c)}}(e,(function(e,a,o){t(e,a,o),x(e,t,e)}))}function R(e,t){var a=[];return t(e)&&a.push(e),x(e,(function(e,o,n){t(e,o,n)&&a.push(e)})),a}function S(e){e}var T=["first","second","third","fourth","fifth"];function E(e,t){return e.name+"-"+t.name}function F(e,t){var a,o=E(e,t);return{value:"<code>"+("Constructor"===t.kindString||"Method"===t.kindString?te(t.signatures[0]):"Accessor"===t.kindString?(a=t).name+": "+ce(a.getSignature[0].type):ie(t))+"</code>",id:o,level:3}}function N(e){var t=[],a=function(e){var t=[],a=[],n=[];if(!e)return{properties:t,constructors:a,methods:n};for(var i,s=(0,o.Z)(e);!(i=s()).done;){var r=i.value;r.flags.isPrivate||("Property"===r.kindString||"Accessor"===r.kindString?t.push(r):"Constructor"===r.kindString?a.push(r):"Method"===r.kindString&&n.push(r))}return{properties:t,constructors:a,methods:n}}(e.children),n=a.properties,i=a.constructors,s=a.methods;return n.length>0&&t.push.apply(t,n.map((function(t){return F(e,t)}))),i.length>0&&t.push.apply(t,i.map((function(t){return F(e,t)}))),s.length>0&&t.push.apply(t,s.map((function(t){return F(e,t)}))),t}function C(e){for(var t,a=[],n=Fe(e),i=(0,o.Z)(n);!(t=i()).done;){var s=t.value,r=Te(s);a.push({value:r,id:s.group,level:2}),a.push.apply(a,s.children.map((function(e){return P(e)})))}return a}function P(e){var t,a=e.reflection,o=e.child,n=(e.group,e.name),i=e.namespace,s=i?i+"."+n:n;if(de(o)){var r,c=o.type.declaration.signatures;t=te(null!=(r=xe(c))?r:c[0],s)}else if(pe(o)){t=te(Re(o),s)}else t=ie(o,s);return{value:t="<code>"+t+"</code>",id:a.name+"-"+o.name,level:3}}function O(e){for(var t,a=[{value:e.pageTitle,id:"",level:2}],n=(0,o.Z)(e.contents);!(t=n()).done;){var i=t.value;if("Interface"===i.reflection.kindString||"Class"===i.reflection.kindString){var s=be(i.reflection),r=ve(i.reflection);a.push({value:s,id:r,level:2}),a.push.apply(a,N(i.reflection))}else if("Call signature"===i.reflection.kindString){var c=be(i.reflection),l=ve(i.reflection);a.push({value:"<code>"+te(i.reflection,c)+"</code>",id:l,level:3})}else if("Type alias"===i.reflection.kindString){var d=be(i.reflection),m=ve(i.reflection);a.push({value:d,id:m,level:2})}else if("Get signature"===i.reflection.kindString||"Set signature"===i.reflection.kindString){var p=be(i.reflection),u=ve(i.reflection);a.push({value:"<code>"+te(i.reflection,p)+"</code>",id:u,level:3})}else{var g=be(i.reflection),h=ve(i.reflection);a.push({value:g,id:h,level:2}),a.push.apply(a,C(i.reflection))}}return a}function D(e){var t=e.doc,a=t.contents,o=t.references;return n.createElement("div",{className:"api"},a.map((function(e){return n.createElement(B,{key:e.id,reflection:e.reflection,references:o})})))}function B(e){var t=e.reflection,a=e.references;return"Interface"===t.kindString||"Class"===t.kindString?n.createElement(M,{reflection:t,references:a}):"Call signature"===t.kindString||"Get signature"===t.kindString||"Set signature"===t.kindString?n.createElement(U,{reflection:t,references:a}):"Type alias"===t.kindString?n.createElement(w,{reflection:t,references:a}):n.createElement(L,{reflection:t,references:a})}function w(e){var t=e.reflection,a=e.references,o=be(t),s=ve(t);return n.createElement("div",null,n.createElement(i.Z,{as:"h2",id:s},o),n.createElement(V,{reflection:t,references:a}),n.createElement(A,{reflection:t,name:o,references:a}),n.createElement(oe,{member:t}))}function A(e){var t=e.reflection,a=e.name,o=e.references,i="";return"union"===t.type.type&&(i=n.createElement(I,{type:t.type,name:a,references:o})),i}function I(e){var t=e.type,a=e.name,o=e.references;return n.createElement("div",null,n.createElement("p",null,"A ",a," can be one of the following values:"),n.createElement("ul",null,t.types.map((function(e,t){return n.createElement(G,{key:t,type:e,references:o})}))))}function G(e){var t=e.type,a=e.references;return n.createElement("li",null,n.createElement("code",null,n.createElement(re,{type:t,references:a})))}function M(e){var t=e.reflection,a=e.references,o=be(t),s=ve(t);return n.createElement("div",null,n.createElement(i.Z,{as:"h2",id:s},o),n.createElement(Z,{reflection:t,references:a}),n.createElement(oe,{member:t}))}function L(e){var t=e.reflection,a=e.references,o=be(t),s=ve(t);return n.createElement("div",null,n.createElement(i.Z,{as:"h2",id:s},o),n.createElement(K,{reflection:t,references:a}),n.createElement(oe,{member:t}))}function U(e){var t=e.reflection,a=e.references,o=be(t),i=ve(t);return n.createElement("div",null,n.createElement(H,{func:t,sig:t,name:o,link:i,references:a}))}function Z(e){var t,a=e.reflection;if(!a)throw new Error("Unable to find "+e.name+"!");var o=function(e){return(0,c.sortBy)(e,(function(e){return"Property"===e.kindString||"Accessor"===e.kindString?0:"Constructor"===e.kindString?1:2})).filter((function(e){return!e.flags.isPrivate}))}(null!=(t=a.children)?t:[]);return n.createElement(d,{reflection:a,root:!0},n.createElement("div",{className:"api"},n.createElement(V,{reflection:a,references:e.references}),a.indexSignature?n.createElement(_,{reflection:a,index:a.indexSignature,references:e.references}):"",a.references?n.createElement(q,{prop:a,references:e.references}):"",o.map((function(t){return n.createElement(W,{key:t.name,member:t,link:E(a,t),references:e.references})}))))}function _(e){var t=e.reflection,a=e.index,o=e.references,s=a.parameters[0];return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:t.name+"-_index"},"Index Signature"),n.createElement(V,{reflection:a,references:o}),n.createElement("pre",null,n.createElement("code",null,"[",s.name,": ",n.createElement(re,{type:s.type,references:o}),"]: ",n.createElement(re,{type:a.type,references:o}))),n.createElement(oe,{member:a}))}function V(e){var t=e.reflection,a=e.references;return n.createElement("div",null,n.createElement(z,{comment:t.comment,references:a}))}function W(e){var t;return t="Property"===e.member.kindString?function(e){var t,a=e.member,o="";a.references?(o=n.createElement(J,{prop:a,references:e.references}),t=n.createElement(n.Fragment,null,a.typeReference)):"reflection"===a.type.type&&a.typeText&&a.typeReference?(t=n.createElement(n.Fragment,null,a.typeReference),o=n.createElement(s.Z,{language:"typescript"},a.typeText)):t=n.createElement(re,{type:e.member.type,references:e.references});!o&&a.typeText&&a.typeReference&&(o=n.createElement(s.Z,{language:"typescript"},a.typeText));var r=be(a);ve(a);return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:e.link},n.createElement("code",null,r,e.member.flags.isOptional?"?":"",": ",t)),n.createElement(V,{reflection:e.member,references:e.references}),o)}(e):"Constructor"===e.member.kindString?function(e){var t=be(e.member);return n.createElement("div",null,n.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Method"===e.member.kindString?function(e){var t=be(e.member);return n.createElement("div",null,n.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Accessor"===e.member.kindString?function(e){var t;return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:e.link},n.createElement("code",null,e.member.name,": ",n.createElement(re,{type:e.member.getSignature[0].type,references:e.references}))),n.createElement("p",null,null==(t=e.member.getSignature[0].comment)?void 0:t.shortText))}(e):"Not found "+e.member.kindString,n.createElement(d,{reflection:e.member},n.createElement("div",null,t))}function q(e){var t=e.prop,a=e.references,o=ve(t);return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:o+"-extra-functions"},"Extra Functions"),n.createElement("p",null,"The extra functions that are available on this type."),n.createElement(r.Z,null,n.createElement("p",null,"See the following functions for more information:"),n.createElement(Y,{children:t.references,references:a})))}function J(e){var t=e.prop,a=e.references;return n.createElement(r.Z,null,n.createElement("p",null,"See the following functions for more information:"),n.createElement(Y,{children:t.references,references:a}))}function K(e){var t=e.reflection,a=(t.type.declaration,Fe(t));return console.log(a),n.createElement(d,{reflection:t,root:!0},n.createElement("div",{className:"api"},n.createElement(V,{reflection:t,references:e.references}),a.map((function(t){return n.createElement(Q,{key:t.group,group:t,references:e.references})}))))}function Q(e){var t=e.group,a=e.references,o=t.children,s=Te(t);return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:t.group},s),o.map((function(e){return n.createElement(j,{key:e.child.id,namespace:e.namespace,name:e.name,property:e.child,link:E(e.reflection,e.child),references:a})})))}function j(e){var t;if(de(e.property)){var a,o=e.namespace?e.namespace+"."+e.name:e.name,s=e.property.type.declaration;t=H({name:o,func:e.property,sig:null!=(a=xe(s.signatures))?a:s.signatures[0],link:e.link,references:e.references})}else if(pe(e.property)){var r=e.namespace?e.namespace+"."+e.name:e.name,c=Re(e.property);console.log(r,c,e.property),t=H({name:r,func:e.property,sig:c,link:e.link,references:e.references})}else t=ge(e.property)?n.createElement(n.Fragment,null,"This is really fun! ",e.property.name):"Property"===e.property.kindString?function(e){return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:e.link},n.createElement("code",null,e.property.name,": ",n.createElement(re,{type:e.property.type,references:e.references}))),n.createElement(V,{reflection:e.property,references:e.references}))}(e):"Not found "+e.property.kindString;return n.createElement(d,{reflection:e.property},n.createElement("div",null,t))}function H(e){var t=e.func,a=e.sig,o=e.link,s=e.name,r=e.references;a||console.log(s,t);var c=a.parameters||[];return n.createElement("div",null,n.createElement(i.Z,{as:"h3",id:o},n.createElement(ee,{func:t,sig:a,name:s,references:r})),n.createElement(X,{sig:a,references:r}),c.length>0?n.createElement("div",null,c.map((function(e,t){return n.createElement(ae,{key:e.name,param:e,index:t,references:r})}))):"",n.createElement(oe,{member:a}))}function X(e){var t=e.sig,a=e.references;return n.createElement(z,{comment:t.comment,references:a})}function z(e){var t=e.comment,a=e.references;return n.createElement(Y,{references:a},$(t))}function Y(e){var t=e.children,a=e.remarkPlugins,o=e.rehypePlugins,i=e.references;return n.createElement(u.D,{remarkPlugins:[[f,{references:i}]].concat(a||[]),rehypePlugins:[g.Z].concat(o||[])},t)}function $(e){var t="";return e&&(t+=e.shortText,e.text&&(t+="\n\n"+e.text)),t}function ee(e){var t=e.func,a=e.sig,o=e.name,i=e.references,s=a.parameters||[],r="";return"Get signature"!==t.kindString&&(r=n.createElement(n.Fragment,null,"(",s.map((function(e,t){return n.createElement("span",{key:e.name},t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",n.createElement(re,{type:e.type,references:i}))})),")")),n.createElement("code",null,(t.flags.isStatic?"static ":"")+(o||a.name),r,": ",n.createElement(re,{type:a.type,references:i}))}function te(e,t){void 0===t&&(t=e.name);var a=e.parameters||[],o="";return"Get signature"!==e.kindString&&(o="("+a.map((function(e,t){return(e.flags.isRest?"...":"")+e.name})).join(", ")+")"),""+t+o+": "+ce(e.type)}function ae(e){var t,a=e.param,o=e.index,i=e.references;return t=a.flags.isRest&&a.type.elementType?0===o?n.createElement("p",null,n.createElement("strong",null,"Each parameter")," is a ",n.createElement(re,{type:a.type.elementType,references:i})," and are ",n.createElement(se,{param:a,isRest:!0,references:i})):n.createElement("p",null,n.createElement("strong",null,"Each other parameter")," is a ",n.createElement(re,{type:a.type.elementType,references:i})," and are ",n.createElement(se,{param:a,isRest:!0,references:i})):n.createElement("p",null,"The ",n.createElement("strong",null,function(e){return T[e]}(o)," parameter")," is",a.flags.isOptional?" optional and is":""," a ",n.createElement(re,{type:a.type,references:i})," and ",n.createElement(se,{param:a,references:i})),t}function oe(e){var t,a=e.member;if(null==(t=a.comment)||!t.tags)return"";var o=a.comment.tags.filter((function(e){return"example"===e.tag}));return o.length>0?n.createElement("div",null,n.createElement("h4",null,"Examples"),o.map((function(e,t){return n.createElement(ne,{key:t,example:e})}))):""}function ne(e){var t=e.example.text,a=t.indexOf("\n"),o=t.substring(0,a),i=t.substring(a+1);return n.createElement(s.Z,{language:"typescript",title:o.trim()},i.trim())}function ie(e,t){var a;return void 0===t&&(t=e.name),a=e.typeReference?e.typeReference:ce(e.type),t+(e.flags.isOptional?"?":"")+": "+a}function se(e){var t=e.param,a=e.isRest,o=e.references;return n.createElement(Y,{remarkPlugins:[v],references:o},function(e,t){var a=$(e.comment);if(!a)return"";(a=a.slice(0,1).toLowerCase()+a.slice(1)).startsWith("the")&&!t&&(a="is "+a);return a}(t,a))}function re(e){var t=e.type,a=e.references,o=e.isInUnionOrArray;if("intrinsic"===t.type)return n.createElement("span",null,t.name);if(t.name){if("Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return n.createElement(n.Fragment,null,"Promise<",n.createElement(re,{type:t.typeArguments[0],references:a}),">");if("Partial"===t.name&&"Partial"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return n.createElement(n.Fragment,null,n.createElement("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"Partial"),"<",n.createElement(re,{type:t.typeArguments[0],references:a}),">");var i="#"+t.name,s=t.id?null==a?void 0:a["id-"+t.id]:null;if(s){var r=null==a?void 0:a[s];r&&(i=(0,m.Z)(r)+"#"+s)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry");return n.createElement(p.Z,{href:i},t.name)}if("union"===t.type)return n.createElement("span",null,"(",t.types.map((function(e,t){return n.createElement(n.Fragment,{key:t},t>0?" | ":"",n.createElement(re,{type:e,references:a,isInUnionOrArray:!0}))})),")");if("array"===t.type)return n.createElement(n.Fragment,null,n.createElement(re,{type:t.elementType,references:a,isInUnionOrArray:!0}),"[]");if("literal"===t.type)return"string"==typeof t.value?n.createElement("span",null,'"',t.value,'"'):"number"==typeof t.value?n.createElement("span",null,t.value):"boolean"==typeof t.value?n.createElement("span",null,t.value?"true":"false"):void 0===t.value?n.createElement("span",null,"undefined"):null===t.value?n.createElement("span",null,"null"):""+JSON.stringify(t);if("reflection"===t.type){var c=t.declaration;if("Type literal"===c.kindString&&c.signatures&&!c.children){var l,d=null!=(l=xe(c.signatures))?l:c.signatures[0],u=d.parameters||[];return n.createElement(n.Fragment,null,n.createElement("span",null,o?"(":"","(",u.map((function(e,t){return n.createElement("span",{key:t},t>0?",":"",e.name,": ",n.createElement(re,{type:e.type,references:a}))})),") => ",n.createElement(re,{type:d.type,references:a}),o?")":""))}return"object"}return""+JSON.stringify(t)}function ce(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+ce(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((function(e){return ce(e)})).join(" | ")+")":"array"===e.type?ce(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function le(e){return de(e)||pe(e)}function de(e){return e&&me(e.type)}function me(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((function(e){return"Call signature"===e.kindString}))}function pe(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((function(e){return me(e)}))}function ue(e){return e&&"Call signature"===e.kindString}function ge(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&"Type literal"===e.type.declaration.kindString&&e.type.declaration.children}function he(e,t){var a,o,n=null==(a=e.comment)||null==(o=a.tags)?void 0:o.find((function(e){return e.tag===t}));return n?n.text.trim():null}function fe(e){if(e)for(var t,a=(0,o.Z)(e);!(t=a()).done;){var n=he(t.value,"docname");if(n)return n.trim()}return null}function ye(e){if(de(e)){var t,a=null==e||null==(t=e.type)?void 0:t.declaration,n=ke(null==a?void 0:a.signatures);if(n)return n}else if(pe(e))for(var i,s=e.type.types,r=(0,o.Z)(s);!(i=r()).done;){var c=i.value;if(me(c)){var l=ke(c.declaration.signatures);if(l)return l}}else if(ue(e)){var d=ke([e]);if(d)return d}return"99-default"}function be(e){if("Method"===e.kindString){var t=fe(e.signatures);if(t)return t}else if(de(e)){var a,n=null==e||null==(a=e.type)?void 0:a.declaration,i=fe(null==n?void 0:n.signatures);if(i)return i}else if(pe(e))for(var s,r=e.type.types,c=(0,o.Z)(r);!(s=c()).done;){var l=s.value;if(me(l)){var d=fe(l.declaration.signatures);if(d)return d}}else if(ue(e)){var m=fe([e]);if(m)return m}return he(p=e,"docname")||p.name;var p}function ve(e){var t=he(e,"docid");if(t)return t;var a,o,n=(a="docid",o=[],x(e,(function(e,t,n){"comment"===n&&o.push.apply(o,e.tags.filter((function(e){return e.tag===a})))})),o);return n.length>0?n[0].text.trim():be(e)}function ke(e){if(e)for(var t,a=(0,o.Z)(e);!(t=a()).done;){var n=he(t.value,"docgroup");if(n)return n.trim()}return null}function xe(e){for(var t,a=(0,o.Z)(e);!(t=a()).done;){var n=t.value;if(he(n,"docgroup"))return n}return null}function Re(e){for(var t,a=e.type.types,n=null,i=(0,o.Z)(a);!(t=i()).done;){var s=t.value;if(me(s)){var r=s.declaration.signatures;n||(n=r[0]);var c=xe(r);if(c)return c}}return n}function Se(e){for(var t,a,n=(t="Call signature",R(e,(function(e){return e.kindString===t}))),i=(0,o.Z)(n);!(a=i()).done;){var s=he(a.value,"docgrouptitle");if(s)return s.trim()}return null}function Te(e){for(var t,a=(0,o.Z)(e.children);!(t=a()).done;){var n=Se(t.value.child);if(n)return n}return e.group}function Ee(e){if("Call signature"===e.kindString)return ue(e)||le(e)||ge(e)?[{group:ye(e),name:be(e),reflection:e,child:e}]:[];if("Type alias"===e.kindString||"Get signature"===e.kindString||"Set signature"===e.kindString)return[];var t=e.type.declaration.children.filter((function(e){return ue(e)||le(e)||ge(e)})),a=null!==he(e,"hiddennamespace")?null:e.name;return(0,c.flatMap)(t,(function(t){return le(t)?{group:ye(t),name:be(t),namespace:a,reflection:e,child:t}:Ee(t)}))}function Fe(e){var t=Ee(e),a=(0,c.groupBy)(t,(function(e){return e.group})),o=[];for(var n in a)o.push({group:n,children:a[n]});return o=(0,c.sortBy)(o,(function(e){return e.group}))}},9009:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var o=a(3117),n=a(102),i=(a(7294),a(3905)),s=JSON.parse('{"hash":"actions/bot-filters","pageTitle":"Bot Filters","pageDescription":"Bot Filters are functions that are useful for filtering bots.","pageSidebarLabel":"Bot Filters","contents":[{"id":293,"order":9999,"name":"atPosition","reflection":{"id":293,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position.","text":"When this filter is used with [`getBots(...filters)`](ref:getbots-filters), the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they\'re stackable).\\n","tags":[{"tag":"example","paramName":"","text":"Find all the bots at (1, 2) in the \\"test\\" dimension.\\nlet bots = getBots(atPosition(\\"test\\", 1, 2));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"atPosition\\n"}]},"parameters":[{"id":294,"name":"dimension","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the name of the dimension.","tags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":295,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the X position. That is, the left-right position of the bots in the dimension.","tags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":296,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the Y position. That is, the forward-backward position of the bots in the dimension.\\n","tags":[]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position.","text":"When this filter is used with {@link getbots-filters}, the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they\'re stackable).\\n","tags":[{"tagName":"example","paramName":"","text":"Find all the bots at (1, 2) in the \\"test\\" dimension.\\nlet bots = getBots(atPosition(\\"test\\", 1, 2));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"atPosition\\n"}]},"group":"01-filters"},{"id":314,"order":9999,"name":"byCreator","reflection":{"id":314,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots created by the given bot.\\nThat is, they have [`#creator`](tags:creator) set to the [`#id`](tags:id) of the given bot.","text":"> This function behaves exactly like `byTag(\\"creator\\", getID(bot))`.\\n","tags":[{"tag":"example","paramName":"","text":"Find all the bots created by this bot.\\nlet bots = getBots(byCreator(thisBot));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"byCreator\\n"}]},"parameters":[{"id":315,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the bot that created the other bots.\\n","tags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":2773,"name":"Bot"}]}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots created by the given bot.\\nThat is, they have {@tag creator} set to the {@tag id} of the given bot.","text":"> This function behaves exactly like `byTag(\\"creator\\", getID(bot))`.\\n","tags":[{"tagName":"example","paramName":"","text":"Find all the bots created by this bot.\\nlet bots = getBots(byCreator(thisBot));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"byCreator\\n"}]},"group":"01-filters"},{"id":281,"order":9999,"name":"byID","reflection":{"id":281,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes the bot with the given ID.","tags":[{"tag":"example","paramName":"","text":"Find the bot with the ID \'123\'\\nlet bot = getBot(byID(\\"123\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"byID\\n"}]},"parameters":[{"id":282,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the ID of the bot.\\n","tags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes the bot with the given ID.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find the bot with the ID \'123\'\\nlet bot = getBot(byID(\\"123\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"byID\\n"}]},"group":"01-filters"},{"id":285,"order":9999,"name":"byMod","reflection":{"id":285,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots that match the given mod.","tags":[{"tag":"example","paramName":"","text":"Find all the bots with #height set to 1 and #color set to red.\\nconst bots = getBots(byMod({\\n    height: 1,\\n    color: \\"red\\"\\n}));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"byMod\\n"}]},"parameters":[{"id":286,"name":"mod","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the bot or mod that the other bots should match.\\n","tags":[]},"type":{"type":"reference","id":2159,"name":"Mod"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots that match the given mod.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find all the bots with #height set to 1 and #color set to red.\\nconst bots = getBots(byMod({\\n    height: 1,\\n    color: \\"red\\"\\n}));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"byMod\\n"}]},"group":"01-filters"},{"id":310,"order":9999,"name":"bySpace","reflection":{"id":310,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots in the given space. That is, they have [`#space`](tags:space) set to the given value.","text":"> This function behaves exactly like `byTag(\\"space\\", getID(bot))`.\\n","tags":[{"tag":"example","paramName":"","text":"Find all bots in the tempLocal space.\\nlet bots = getBots(bySpace(\\"tempLocal\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"bySpace\\n"}]},"parameters":[{"id":311,"name":"space","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the space that the bots are in.\\n","tags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots in the given space. That is, they have {@tag space} set to the given value.","text":"> This function behaves exactly like `byTag(\\"space\\", getID(bot))`.\\n","tags":[{"tagName":"example","paramName":"","text":"Find all bots in the tempLocal space.\\nlet bots = getBots(bySpace(\\"tempLocal\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"bySpace\\n"}]},"group":"01-filters"},{"id":276,"order":9999,"name":"byTag","reflection":{"id":276,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots that have the given tag that matches the given value.","tags":[{"tag":"example","paramName":"","text":"Find all the bots with #name set to \\"bob\\".\\nlet bots = getBots(byTag(\\"#name\\", \\"bob\\"));\\n"},{"tag":"example","paramName":"","text":"Find all bots with a height larger than 2.\\nlet bots = getBots(byTag(\\"#height\\", height => height > 2));\\n"},{"tag":"example","paramName":"","text":"Find all bots with the \\"test\\" tag.\\nlet bots = getBots(byTag(\\"#test\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"doctitle","paramName":"","text":"Bot Filters"},{"tag":"docsidebar","paramName":"","text":"Bot Filters"},{"tag":"docdescription","paramName":"","text":"Bot Filters are functions that are useful for filtering bots."},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"byTag\\n"}]},"parameters":[{"id":277,"name":"tag","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the name of the tag. Bots that have this tag will be included as long as they also match the second parameter.","tags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":278,"name":"filter","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the value that the tag should match. If not specified, then all bots with the tag will be included. If specified, then only bots that have the same tag value will be included. If you specify a function as the value, then it will be used to match tag values.\\n","tags":[]},"type":{"type":"reference","id":2160,"name":"TagFilter"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots that have the given tag that matches the given value.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find all the bots with #name set to \\"bob\\".\\nlet bots = getBots(byTag(\\"#name\\", \\"bob\\"));\\n"},{"tagName":"example","paramName":"","text":"Find all bots with a height larger than 2.\\nlet bots = getBots(byTag(\\"#height\\", height => height > 2));\\n"},{"tagName":"example","paramName":"","text":"Find all bots with the \\"test\\" tag.\\nlet bots = getBots(byTag(\\"#test\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"doctitle","paramName":"","text":"Bot Filters"},{"tagName":"docsidebar","paramName":"","text":"Bot Filters"},{"tagName":"docdescription","paramName":"","text":"Bot Filters are functions that are useful for filtering bots."},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"byTag\\n"}]},"group":"01-filters"},{"id":318,"order":9999,"name":"either","reflection":{"id":318,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots which match any (i.e. one or more) of the given filters.","tags":[{"tag":"example","paramName":"","text":"Find all bots with the #name bob or a #height of 2\\nconst bots = getBots(\\n    either(\\n        byTag(\\"#name\\", \\"bob\\"),\\n        byTag(\\"height\\", 2)\\n    )\\n);\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"either\\n"}]},"parameters":[{"id":319,"name":"filters","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"shortText":"the filters that should be used.\\n","tags":[]},"type":{"type":"array","elementType":{"type":"reflection","declaration":{"id":320,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":321,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":322,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2773,"name":"Bot"}}],"type":{"type":"intrinsic","name":"boolean"}}]}}}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots which match any (i.e. one or more) of the given filters.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find all bots with the #name bob or a #height of 2\\nconst bots = getBots(\\n    either(\\n        byTag(\\"#name\\", \\"bob\\"),\\n        byTag(\\"height\\", 2)\\n    )\\n);\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"either\\n"}]},"group":"01-filters"},{"id":289,"order":9999,"name":"inDimension","reflection":{"id":289,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to true.","text":"> This function behaves exactly like [`byTag(tag, filter)`](ref:byTag) with the `value` parameter set to `true`.\\n","returns":"A function that returns true if the given bot is in the dimension and false if it is not.\\n","tags":[{"tag":"example","paramName":"","text":"Find all the bots in the \\"test\\" dimension.\\nlet bots = getBots(inDimension(\\"test\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"inDimension\\n"}]},"parameters":[{"id":290,"name":"dimension","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the name of the dimension.","tags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to true.","text":"> This function behaves exactly like {@link byTag} with the `value` parameter set to `true`.\\n","returns":"A function that returns true if the given bot is in the dimension and false if it is not.\\n","tags":[{"tagName":"example","paramName":"","text":"Find all the bots in the \\"test\\" dimension.\\nlet bots = getBots(inDimension(\\"test\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"inDimension\\n"}]},"group":"01-filters"},{"id":299,"order":9999,"name":"inStack","reflection":{"id":299,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension.","text":"When this filter is used with [`getBots(...filters)`](ref:getbots-filters), the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they\'re stackable).\\n","tags":[{"tag":"example","paramName":"","text":"Find all bots in the same stack as thisBot in the \\"test\\" dimension.\\nlet bots = getBots(inStack(this, \\"test\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"inStack\\n"}]},"parameters":[{"id":300,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the bot that other bots should be in the same stack with.","tags":[]},"type":{"type":"reference","id":2773,"name":"Bot"}},{"id":301,"name":"dimension","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the name of the dimension.\\n","tags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension.","text":"When this filter is used with {@link getbots-filters}, the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they\'re stackable).\\n","tags":[{"tagName":"example","paramName":"","text":"Find all bots in the same stack as thisBot in the \\"test\\" dimension.\\nlet bots = getBots(inStack(this, \\"test\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"inStack\\n"}]},"group":"01-filters"},{"id":304,"order":9999,"name":"neighboring","reflection":{"id":304,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a bot filter that includes bots which are neighboring the given bot. Optionally takes a direction that the neighboring bots must be in.","tags":[{"tag":"example","paramName":"","text":"Find all bots in front of this bot in the test dimension.\\nconst bots = getBots(neighboring(this, \\"test\\", \\"front\\"));\\n"},{"tag":"example","paramName":"","text":"Find all bots around this bot in the test dimension.\\nconst bots = getBots(neighboring(this, \\"test\\"));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"neighboring\\n"}]},"parameters":[{"id":305,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the bot that the other bots need to be neighboring.","tags":[]},"type":{"type":"reference","id":2773,"name":"Bot"}},{"id":306,"name":"dimension","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the dimension that the other bots need to be in.","tags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":307,"name":"direction","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the neighboring direction to check. If not specified, then all of the supported directions will be checked. Currently, the supported directions are front, right, back, and left. If an unsupported direction is specified, then no bots will be included.\\n","tags":[]},"type":{"type":"union","types":[{"type":"literal","value":"front"},{"type":"literal","value":"left"},{"type":"literal","value":"right"},{"type":"literal","value":"back"}]}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a bot filter that includes bots which are neighboring the given bot. Optionally takes a direction that the neighboring bots must be in.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find all bots in front of this bot in the test dimension.\\nconst bots = getBots(neighboring(this, \\"test\\", \\"front\\"));\\n"},{"tagName":"example","paramName":"","text":"Find all bots around this bot in the test dimension.\\nconst bots = getBots(neighboring(this, \\"test\\"));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"neighboring\\n"}]},"group":"01-filters"},{"id":325,"order":9999,"name":"not","reflection":{"id":325,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a function that includes bots which _do not_ match the given filter.","tags":[{"tag":"example","paramName":"","text":"Find all bots that are not in the test dimension\\nconst bots = getBots(not(inDimension(\\"test\\")));\\n"},{"tag":"dochash","paramName":"","text":"actions/bot-filters"},{"tag":"docgroup","paramName":"","text":"01-filters"},{"tag":"docname","paramName":"","text":"not\\n"}]},"parameters":[{"id":326,"name":"filter","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the bot filter whose results should be negated.\\n","tags":[]},"type":{"type":"reflection","declaration":{"id":327,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":328,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":329,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2773,"name":"Bot"}}],"type":{"type":"intrinsic","name":"boolean"}}]}}}],"type":{"type":"reference","id":2164,"name":"BotFilter"}},"comment":{"shortText":"Creates a function that includes bots which _do not_ match the given filter.","text":"","tags":[{"tagName":"example","paramName":"","text":"Find all bots that are not in the test dimension\\nconst bots = getBots(not(inDimension(\\"test\\")));\\n"},{"tagName":"dochash","paramName":"","text":"actions/bot-filters"},{"tagName":"docgroup","paramName":"","text":"01-filters"},{"tagName":"docname","paramName":"","text":"not\\n"}]},"group":"01-filters"}],"references":{"CasualOSError":"types/error","id-2949":"CasualOSError","Quaternion":"types/math/rotations","id-3339":"Quaternion","Rotation":"types/math/rotations","id-3371":"Rotation","Vector2":"types/math/vectors","id-3205":"Vector2","Vector3":"types/math/vectors","id-3262":"Vector3","AIChatMessage":"types/ai","id-2968":"AIChatMessage","AIChatOptions":"types/ai","id-2746":"AIChatOptions","AIGenerateImageSuccess":"types/ai","id-2551":"AIGenerateImageSuccess","AIGenerateImageOptions":"types/ai","id-2760":"AIGenerateImageOptions","AIGenerateSkyboxOptions":"types/ai","id-2756":"AIGenerateSkyboxOptions","AIGenerateSkyboxRequest":"types/ai","id-2544":"AIGenerateSkyboxRequest","AIGenerateSkyboxResult":"types/ai","id-2548":"AIGenerateSkyboxResult","AIGeneratedImage":"types/ai","id-2554":"AIGeneratedImage","AddCountFailure":"types/records/events","id-3152":"AddCountFailure","AddCountSuccess":"types/records/events","id-3147":"AddCountSuccess","AnimateTagOptions":"types/animation","id-2149":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-2524":"AttachDebuggerOptions","CasualOSDevice":"types/os","id-2937":"CasualOSDevice","CasualOSVersion":"types/os","id-2929":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-3417":"AxisAndAngle","BotTagMasks":"types/core","id-2906":"BotTagMasks","BotTags":"types/core","id-2821":"BotTags","BotState":"types/core","id-2919":"BotState","CompiledBotListeners":"types/core","id-2900":"CompiledBotListeners","ConvertGeolocationToWhat3WordsOptions":"types/os","id-2581":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-2979":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-2975":"CreatePublicRecordKeySuccess","DebuggerCallFrame":"types/debuggers/common","id-2477":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-2512":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-2506":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-2485":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-2491":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-2518":"DebuggerVariable","Easing":"types/animation","id-2561":"Easing","EnableXROptions":"types/os","id-2655":"EnableXROptions","EraseDataFailure":"types/records/data","id-3123":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-3119":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-3142":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-3138":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-3420":"EulerAnglesRotation","FocusOnOptions":"types/os","id-2615":"FocusOnOptions","FocusOnRotation":"types/os","id-2627":"FocusOnRotation","FormAnimationData":"types/os","id-2673":"FormAnimationData","FromToRotation":"types/math/rotations","id-3414":"FromToRotation","GenericError":"types/error","id-2946":"GenericError","GetCountFailure":"types/records/events","id-3163":"GetCountFailure","GetCountSuccess":"types/records/events","id-3157":"GetCountSuccess","GetDataFailure":"types/records/data","id-3114":"GetDataFailure","GetDataSuccess":"types/records/data","id-3105":"GetDataSuccess","GetRoomOptionsFailure":"types/os","id-2239":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os","id-2235":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os","id-2282":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os","id-2277":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os","id-2258":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os","id-2253":"GetRoomTrackOptionsSuccess","GrantMarkerPermissionFailure":"types/records/policies","id-3191":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-3189":"GrantMarkerPermissionSuccess","GrantRoleFailure":"types/records/roles","id-3177":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-3175":"GrantRoleSuccess","ImageClassifierOptions":"types/os","id-2633":"ImageClassifierOptions","InstUpdate":"types/os","id-2942":"InstUpdate","JoinRoomFailure":"types/os","id-2220":"JoinRoomFailure","JoinRoomSuccess":"types/os","id-2217":"JoinRoomSuccess","LeaveRoomFailure":"types/os","id-2229":"LeaveRoomFailure","LeaveRoomSuccess":"types/os","id-2226":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-3133":"ListDataFailure","ListDataSuccess":"types/records/data","id-3128":"ListDataSuccess","LookRotation":"types/math/rotations","id-3437":"LookRotation","MediaPermissionOptions":"types/os","id-2652":"MediaPermissionOptions","Debugger":"types/debuggers/debugger","id-2289":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-2496":"NormalDebuggerOptions","PhotoCameraOptions":"types/camera","id-2730":"PhotoCameraOptions","ParsedBotLink":"types/core","id-2925":"ParsedBotLink","PartialBotState":"types/core","id-2922":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-2345":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-2501":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-2464":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-2472":"PauseTriggerOptions","Photo":"types/camera","id-2742":"Photo","PossiblePauseTriggerLocation":"types/debuggers/common","id-2459":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-2533":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-3430":"QuaternionRotation","RaycastRay":"types/os","id-2213":"RaycastRay","RaycastResult":"types/os","id-2210":"RaycastResult","RecordActionOptions":"types/records/extra","id-2564":"RecordActionOptions","RecordDataFailure":"types/records/data","id-3100":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-3096":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-2180":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-2176":"RecordFileSuccess","RecordedFile":"types/experimental","id-2717":"RecordedFile","Recording":"types/experimental","id-2715":"Recording","RecordingOptions":"types/experimental","id-2722":"RecordingOptions","RegisterPrefixOptions":"types/core","id-2712":"RegisterPrefixOptions","RevokeMarkerPermissionFailure":"types/records/policies","id-3198":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-3196":"RevokeMarkerPermissionSuccess","RevokeRoleFailure":"types/records/roles","id-3184":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-3182":"RevokeRoleSuccess","RoomJoinOptions":"types/os","id-2678":"RoomJoinOptions","RoomOptions":"types/os","id-2687":"RoomOptions","RoomRemoteOptions":"types/os","id-2703":"RoomRemoteOptions","RoomTrackOptions":"types/os","id-2691":"RoomTrackOptions","RuntimeBot":"types/core","id-2773":"RuntimeBot","RuntimeBotLinks":"types/core","id-2912":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-2909":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-3428":"SequenceRotation","SetRoomOptionsSuccess":"types/os","id-2244":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os","id-2709":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os","id-2270":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os","id-2265":"SetRoomTrackOptionsSuccess","ShareOptions":"types/os","id-2611":"ShareOptions","ShowChatOptions":"types/os","id-2605":"ShowChatOptions","ShowConfirmOptions":"types/os","id-2647":"ShowConfirmOptions","ShowInputOptions":"types/os","id-2638":"ShowInputOptions","SnapAxis":"types/os","id-2585":"SnapAxis","SnapGridTarget":"types/os","id-2185":"SnapGridTarget","SnapPoint":"types/os","id-2597":"SnapPoint","SpeakTextOptions":"types/experimental","id-2529":"SpeakTextOptions","StartFormAnimationOptions":"types/os","id-2657":"StartFormAnimationOptions","StopFormAnimationOptions":"types/os","id-2670":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os","id-2567":"SuccessfulGeolocation","SyntheticVoice":"types/experimental","id-2726":"SyntheticVoice","TweenOptions":"types/experimental","id-2526":"TweenOptions","UnsuccessfulGeolocation":"types/os","id-2577":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-3170":"UpdateEventRecordFailure","UpdateEventRecordSuccess":"types/records/events","id-3168":"UpdateEventRecordSuccess","UploadedFile":"types/os","id-2206":"UploadedFile","WebhookOptions":"types/web","id-2130":"WebhookOptions","WebhookResult":"types/web","id-2142":"WebhookResult","AddCountResult":"types/records/events","id-3146":"AddCountResult","AvailablePermissions":"types/permissions","id-2984":"AvailablePermissions","BarcodeFormat":"types/os","id-2632":"BarcodeFormat","BotFilter":"types/core","id-2164":"BotFilter","BotSpace":"types/core","id-2896":"BotSpace","CameraType":"types/os","id-2631":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-2974":"CreatePublicRecordKeyResult","EaseMode":"types/animation","id-2560":"EaseMode","EaseType":"types/animation","id-2559":"EaseType","EraseDataResult":"types/records/data","id-3118":"EraseDataResult","EraseFileResult":"types/records/files","id-3137":"EraseFileResult","Geolocation":"types/os","id-2566":"Geolocation","GetCountResult":"types/records/events","id-3156":"GetCountResult","GetDataResult":"types/records/data","id-3104":"GetDataResult","GetRoomOptionsResult":"types/os","id-2234":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os","id-2276":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os","id-2252":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-3188":"GrantMarkerPermissionResult","GrantRoleResult":"types/records/roles","id-3174":"GrantRoleResult","JoinRoomResult":"types/os","id-2216":"JoinRoomResult","LeaveRoomResult":"types/os","id-2225":"LeaveRoomResult","ListDataResult":"types/records/data","id-3127":"ListDataResult","Mod":"types/core","id-2159":"Mod","PortalType":"types/core","id-2928":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-2463":"PossiblePauseTriggerStates","RecordDataResult":"types/records/data","id-3095":"RecordDataResult","RecordFileResult":"types/records/files","id-2175":"RecordFileResult","RevokeMarkerPermissionResult":"types/records/policies","id-3195":"RevokeMarkerPermissionResult","RevokeRoleResult":"types/records/roles","id-3181":"RevokeRoleResult","SetRoomOptionsResult":"types/os","id-2243":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os","id-2264":"SetRoomTrackOptionsResult","SnapTarget":"types/os","id-2604":"SnapTarget","TagFilter":"types/core","id-2160":"TagFilter","UpdateEventRecordResult":"types/records/events","id-3167":"UpdateEventRecordResult","animateTag-byOptions":"actions/utility","id-364":"animateTag-byOptions","getbot-tag":"actions/data","id-33":"getbot-tag","getbots-tag":"actions/data","id-17":"getbots-tag","animateTag-byTag":"actions/utility","id-358":"animateTag-byTag","changeState":"actions/data","id-177":"changeState","create":"actions/data","id-162":"create","destroy":"actions/data","id-166":"destroy","getbot-filters":"actions/data","id-26":"getbot-filters","getbots-filters":"actions/data","id-10":"getbots-filters","priorityShout":"actions/event","id-225":"priorityShout","shout":"actions/event","id-237":"shout","updateBotLinks":"actions/data","id-198":"updateBotLinks","whisper":"actions/event","id-263":"whisper","action.perform":"actions/event","id-1630":"action.perform","action.reject":"actions/event","id-1634":"action.reject","ai.chat-string":"actions/ai","id-423":"ai.chat-string","ai.chat-message":"actions/ai","id-426":"ai.chat-message","ai.chat-messages":"actions/ai","id-429":"ai.chat-messages","ai.generateImage-string":"actions/ai","id-442":"ai.generateImage-string","ai.generateImage-request":"actions/ai","id-446":"ai.generateImage-request","ai.generateSkybox-string":"actions/ai","id-434":"ai.generateSkybox-string","ai.generateSkybox-request":"actions/ai","id-438":"ai.generateSkybox-request","applyDiffToSnapshot":"actions/data","id-83":"applyDiffToSnapshot","applyMod":"actions/mods","id-152":"applyMod","assert":"actions/debuggers","id-407":"assert","assertEqual":"actions/debuggers","id-412":"assertEqual","atPosition":"actions/bot-filters","id-293":"atPosition","byCreator":"actions/bot-filters","id-314":"byCreator","byID":"actions/bot-filters","id-281":"byID","byMod":"actions/bot-filters","id-285":"byMod","bySpace":"actions/bot-filters","id-310":"bySpace","byTag":"actions/bot-filters","id-276":"byTag","bytes.fromBase64String":"actions/bytes","id-1854":"bytes.fromBase64String","bytes.fromBase64Url":"actions/bytes","id-1871":"bytes.fromBase64Url","bytes.fromHexString":"actions/bytes","id-1862":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-1850":"bytes.toBase64String","bytes.toBase64Url":"actions/bytes","id-1866":"bytes.toBase64Url","bytes.toHexString":"actions/bytes","id-1858":"bytes.toHexString","clearAnimations":"actions/utility","id-378":"clearAnimations","clearTagMasks":"actions/data","id-106":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-1877":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-1883":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-1914":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-1907":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-1972":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-1967":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-1978":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-1963":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-1959":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-1943":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-1933":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-1938":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-1953":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-1982":"crypto.keypair","crypto.sha256":"actions/crypto","id-1899":"crypto.sha256","crypto.sha512":"actions/crypto","id-1903":"crypto.sha512","crypto.sign":"actions/crypto","id-1986":"crypto.sign","deleteTagMaskText":"actions/data","id-133":"deleteTagMaskText","deleteTagText":"actions/data","id-126":"deleteTagText","diffSnapshots":"actions/data","id-78":"diffSnapshots","either":"actions/bot-filters","id-318":"either","os.beginAudioRecording":"actions/audio","id-1688":"os.beginAudioRecording","experiment.beginRecording":"actions/experimental","id-1695":"experiment.beginRecording","os.endAudioRecording":"actions/audio","id-1692":"os.endAudioRecording","experiment.endRecording":"actions/experimental","id-1699":"experiment.endRecording","experiment.getAnchorPointPosition":"actions/experimental","id-1678":"experiment.getAnchorPointPosition","experiment.getVoices":"actions/experimental","id-1707":"experiment.getVoices","experiment.localFormAnimation":"actions/experimental","id-1651":"experiment.localFormAnimation","experiment.localPositionTween":"actions/experimental","id-1656":"experiment.localPositionTween","experiment.localRotationTween":"actions/experimental","id-1667":"experiment.localRotationTween","experiment.speakText":"actions/experimental","id-1702":"experiment.speakText","getBotLinks":"actions/data","id-194":"getBotLinks","getBotPosition":"actions/data","id-52":"getBotPosition","getBotRotation":"actions/data","id-57":"getBotRotation","getBotTagValues":"actions/data","id-42":"getBotTagValues","getFormattedJSON":"actions/data","id-70":"getFormattedJSON","getID":"actions/data","id-62":"getID","getJSON":"actions/data","id-66":"getJSON","getLink":"actions/data","id-190":"getLink","getMod":"actions/mods","id-47":"getMod","getSnapshot":"actions/data","id-74":"getSnapshot","getTag":"actions/data","id-88":"getTag","inDimension":"actions/bot-filters","id-289":"inDimension","inStack":"actions/bot-filters","id-299":"inStack","insertTagMaskText":"actions/data","id-118":"insertTagMaskText","insertTagText":"actions/data","id-111":"insertTagText","math.abs":"actions/math","id-1724":"math.abs","math.addVectors":"actions/math","id-1794":"math.addVectors","math.areClose":"actions/math","id-1825":"math.areClose","math.avg":"actions/math","id-1716":"math.avg","math.degreesToRadians":"actions/math","id-1750":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-1790":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-1758":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-1732":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-1767":"math.intersectPlane","math.negateVector":"actions/math","id-1804":"math.negateVector","math.normalizeVector":"actions/math","id-1809":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-1754":"math.radiansToDegrees","math.random":"actions/math","id-1745":"math.random","math.randomInt":"actions/math","id-1740":"math.randomInt","math.scaleVector":"actions/math","id-1819":"math.scaleVector","math.setRandomSeed":"actions/math","id-1736":"math.setRandomSeed","math.sqrt":"actions/math","id-1720":"math.sqrt","math.stdDev":"actions/math","id-1728":"math.stdDev","math.subtractVectors":"actions/math","id-1799":"math.subtractVectors","math.sum":"actions/math","id-1712":"math.sum","math.vectorLength":"actions/math","id-1814":"math.vectorLength","neighboring":"actions/bot-filters","id-304":"neighboring","not":"actions/bot-filters","id-325":"not","os.attachDebugger":"actions/debuggers","id-1328":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-1317":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-1321":"os.createDebugger-pausable","os.focusOn-bot":"actions/portals","id-510":"os.focusOn-bot","os.focusOn-position":"actions/portals","id-515":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-1325":"os.getExecutingDebugger","showChat-options":"actions/os","id-537":"showChat-options","showChat-placeholder":"actions/os","id-533":"showChat-placeholder","os.showInput":"actions/portals","id-753":"os.showInput","os.addBotDropGrid":"actions/portals","id-827":"os.addBotDropGrid","os.addBotDropSnap":"actions/portals","id-818":"os.addBotDropSnap","os.addDropGrid":"actions/portals","id-823":"os.addDropGrid","os.addDropSnap":"actions/portals","id-814":"os.addDropSnap","os.applyUpdatesToInst":"actions/os","id-1271":"os.applyUpdatesToInst","os.arSupported":"actions/xr","id-578":"os.arSupported","os.bufferFormAddressGLTF":"actions/animations","id-1224":"os.bufferFormAddressGLTF","os.bufferSound":"actions/audio","id-790":"os.bufferSound","os.calculateRayFromCamera":"actions/portals","id-1219":"os.calculateRayFromCamera","os.cancelSound":"actions/audio","id-794":"os.cancelSound","os.capturePhoto":"actions/camera","id-673":"os.capturePhoto","os.closeBarcodeScanner":"actions/barcodes","id-651":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/portals","id-806":"os.closeCircleWipe","os.closeImageClassifier":"actions/image-classification","id-666":"os.closeImageClassifier","os.closePhotoCamera":"actions/camera","id-677":"os.closePhotoCamera","os.closeQRCodeScanner":"actions/barcodes","id-637":"os.closeQRCodeScanner","os.compileApp":"actions/app","id-941":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os","id-1204":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/records","id-1198":"os.countEvents","os.createInitializationUpdate":"actions/os","id-1267":"os.createInitializationUpdate","os.device":"actions/os","id-555":"os.device","os.disableAR":"actions/xr","id-568":"os.disableAR","os.disablePointOfView":"actions/portals","id-593":"os.disablePointOfView","os.disableVR":"actions/xr","id-575":"os.disableVR","os.disableWakeLock":"actions/os","id-599":"os.disableWakeLock","os.download":"actions/files","id-605":"os.download","os.downloadBots":"actions/files","id-611":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/files","id-616":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/files","id-624":"os.downloadInst","os.enableAR":"actions/xr","id-564":"os.enableAR","os.enableCustomDragging":"actions/portals","id-832":"os.enableCustomDragging","os.enablePointOfView":"actions/portals","id-584":"os.enablePointOfView","os.enableVR":"actions/xr","id-571":"os.enableVR","os.eraseData":"actions/records","id-1141":"os.eraseData","os.eraseManualApprovalData":"actions/records","id-1147":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/portals","id-481":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os","id-889":"os.getAverageFrameRate","os.getCameraPosition":"actions/portals","id-845":"os.getCameraPosition","os.getCameraRotation":"actions/portals","id-849":"os.getCameraRotation","os.getCurrentDimension":"actions/portals","id-724":"os.getCurrentDimension","os.getCurrentInst":"actions/portals","id-730":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os","id-1275":"os.getCurrentInstUpdate","os.getData":"actions/records","id-1123":"os.getData","os.getDimensionalDepth":"actions/portals","id-743":"os.getDimensionalDepth","os.getFocusPoint":"actions/portals","id-857":"os.getFocusPoint","os.getGeolocation":"actions/os","id-839":"os.getGeolocation","os.getInputList":"actions/portals","id-882":"os.getInputList","os.getInputState":"actions/portals","id-877":"os.getInputState","os.getInstStateFromUpdates":"actions/os","id-1263":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/records","id-1129":"os.getManualApprovalData","os.getMediaPermission":"actions/os","id-885":"os.getMediaPermission","os.getMenuDimension":"actions/portals","id-733":"os.getMenuDimension","os.getMiniPortalDimension":"actions/portals","id-736":"os.getMiniPortalDimension","os.getPointerDirection":"actions/portals","id-873":"os.getPointerDirection","os.getPointerPosition":"actions/portals","id-861":"os.getPointerPosition","os.getPointerRotation":"actions/portals","id-865":"os.getPointerRotation","os.getPortalDimension":"actions/portals","id-739":"os.getPortalDimension","os.getPublicRecordKey":"actions/records","id-1048":"os.getPublicRecordKey","os.getRoomOptions":"actions/rooms","id-907":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/rooms","id-922":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/rooms","id-911":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/records","id-1052":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os","id-602":"os.getWakeLockConfiguration","os.goToDimension":"actions/portals","id-767":"os.goToDimension","os.goToURL":"actions/portals","id-771":"os.goToURL","os.grantInstAdminPermission":"actions/records","id-1070":"os.grantInstAdminPermission","os.grantInstRole":"actions/records","id-1090":"os.grantInstRole","os.grantRecordMarkerPermission":"actions/records","id-1056":"os.grantRecordMarkerPermission","os.grantUserRole":"actions/records","id-1075":"os.grantUserRole","os.hasBotInMiniPortal":"actions/portals","id-798":"os.hasBotInMiniPortal","os.hideBarcode":"actions/barcodes","id-659":"os.hideBarcode","os.hideChat":"actions/os","id-545":"os.hideChat","os.hideHtml":"actions/os","id-488":"os.hideHtml","os.hideQRCode":"actions/barcodes","id-644":"os.hideQRCode","os.hideTips":"actions/portals","id-469":"os.hideTips","os.importAUX":"actions/files","id-708":"os.importAUX","os.inSheet":"actions/portals","id-842":"os.inSheet","os.instStatuses":"actions/os","id-1292":"os.instStatuses","os.instances":"actions/os","id-1282":"os.instances","os.isCollaborative":"actions/os","id-558":"os.isCollaborative","os.isInDimension":"actions/portals","id-720":"os.isInDimension","os.isRecordKey":"actions/records","id-1105":"os.isRecordKey","os.joinRoom":"actions/rooms","id-892":"os.joinRoom","os.leaveRoom":"actions/rooms","id-897":"os.leaveRoom","os.listBuiltinTags":"actions/app","id-1042":"os.listBuiltinTags","os.listData":"actions/records","id-1135":"os.listData","os.listFormAnimations":"actions/animations","id-1239":"os.listFormAnimations","os.listInstUpdates":"actions/os","id-1260":"os.listInstUpdates","os.loadInst":"actions/os","id-700":"os.loadInst","os.log":"actions/os","id-835":"os.log","os.meetCommand":"actions/os","id-1305":"os.meetCommand","os.meetFunction":"actions/os","id-1310":"os.meetFunction","os.openBarcodeScanner":"actions/barcodes","id-647":"os.openBarcodeScanner","os.openCircleWipe":"actions/portals","id-810":"os.openCircleWipe","os.openDevConsole":"actions/os","id-779":"os.openDevConsole","os.openImageClassifier":"actions/image-classification","id-662":"os.openImageClassifier","os.openPhotoCamera":"actions/camera","id-669":"os.openPhotoCamera","os.openQRCodeScanner":"actions/barcodes","id-633":"os.openQRCodeScanner","os.openURL":"actions/portals","id-775":"os.openURL","os.parseBotsFromData":"actions/files","id-712":"os.parseBotsFromData","os.playSound":"actions/audio","id-786":"os.playSound","os.raycast":"actions/portals","id-1213":"os.raycast","os.raycastFromCamera":"actions/portals","id-1208":"os.raycastFromCamera","os.recordData":"actions/records","id-1109":"os.recordData","os.recordEvent":"actions/records","id-1192":"os.recordEvent","os.recordFile":"actions/records","id-1153":"os.recordFile","os.recordManualApprovalData":"actions/records","id-1116":"os.recordManualApprovalData","os.registerApp":"actions/app","id-932":"os.registerApp","os.registerTagPrefix":"actions/app","id-927":"os.registerTagPrefix","os.remoteCount":"actions/os","id-1285":"os.remoteCount","os.remotes":"actions/os","id-1257":"os.remotes","os.replaceDragBot":"actions/portals","id-716":"os.replaceDragBot","os.requestAuthBot":"actions/records","id-1045":"os.requestAuthBot","os.requestFullscreenMode":"actions/portals","id-478":"os.requestFullscreenMode","os.requestWakeLock":"actions/os","id-596":"os.requestWakeLock","os.revokeInstRole":"actions/records","id-1098":"os.revokeInstRole","os.revokeRecordMarkerPermission":"actions/records","id-1063":"os.revokeRecordMarkerPermission","os.revokeUserRole":"actions/records","id-1083":"os.revokeUserRole","os.run":"actions/os","id-548":"os.run","os.setClipboard":"actions/os","id-491":"os.setClipboard","os.setRoomOptions":"actions/rooms","id-902":"os.setRoomOptions","os.setRoomTrackOptions":"actions/rooms","id-916":"os.setRoomTrackOptions","os.share":"actions/os","id-802":"os.share","os.showBarcode":"actions/barcodes","id-654":"os.showBarcode","os.showConfirm":"actions/portals","id-763":"os.showConfirm","os.showHtml":"actions/os","id-484":"os.showHtml","os.showInputForTag":"actions/portals","id-747":"os.showInputForTag","os.showJoinCode":"actions/barcodes","id-473":"os.showJoinCode","os.showQRCode":"actions/barcodes","id-640":"os.showQRCode","os.showUploadAuxFile":"actions/files","id-627":"os.showUploadAuxFile","os.showUploadFiles":"actions/files","id-630":"os.showUploadFiles","os.sleep":"actions/os","id-453":"os.sleep","os.startFormAnimation":"actions/animations","id-1228":"os.startFormAnimation","os.stopFormAnimation":"actions/animations","id-1234":"os.stopFormAnimation","os.tip":"actions/portals","id-462":"os.tip","os.toast":"actions/os","id-457":"os.toast","os.totalRemoteCount":"actions/os","id-1289":"os.totalRemoteCount","os.unloadInst":"actions/os","id-704":"os.unloadInst","os.unregisterApp":"actions/app","id-937":"os.unregisterApp","os.version":"actions/os","id-552":"os.version","os.vrSupported":"actions/xr","id-581":"os.vrSupported","os.agreedUponTime":"actions/time","id-681":"os.agreedUponTime","os.deadReckoningTime":"actions/time","id-689":"os.deadReckoningTime","os.instLatency":"actions/time","id-683":"os.instLatency","os.instTimeOffset":"actions/time","id-685":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/time","id-687":"os.instTimeOffsetSpread","os.localTime":"actions/time","id-679":"os.localTime","removeTags":"actions/data","id-141":"removeTags","renameTag":"actions/data","id-146":"renameTag","setTag":"actions/data","id-93":"setTag","setTagMask":"actions/data","id-99":"setTagMask","subtractMods":"actions/mods","id-157":"subtractMods","superShout":"actions/event","id-220":"superShout","uuid":"actions/data","id-355":"uuid","web.get":"actions/web","id-2029":"web.get","web.hook":"actions/web","id-2040":"web.hook","web.post":"actions/web","id-2034":"web.post","configBot":"actions/os","id-418":"configBot"}}'),r=a(4629),c=(a(2503),a(9960),["components"]),l={id:"bot-filters",title:"Bot Filters",sidebar_label:"Bot Filters",description:"Bot Filters are functions that are useful for filtering bots."},d=void 0,m={unversionedId:"actions/bot-filters",id:"actions/bot-filters",title:"Bot Filters",description:"Bot Filters are functions that are useful for filtering bots.",source:"@site/docs/actions/bot-filters.mdx",sourceDirName:"actions",slug:"/actions/bot-filters",permalink:"/actions/bot-filters",draft:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/actions/bot-filters.mdx",tags:[],version:"current",frontMatter:{id:"bot-filters",title:"Bot Filters",sidebar_label:"Bot Filters",description:"Bot Filters are functions that are useful for filtering bots."},sidebar:"docs",previous:{title:"Barcodes",permalink:"/actions/barcodes"},next:{title:"Bytes",permalink:"/actions/bytes"}},p={},u=[].concat((0,r.KO)(s)),g={toc:u};function h(e){var t=e.components,a=(0,n.Z)(e,c);return(0,i.kt)("wrapper",(0,o.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.hl,{doc:s,mdxType:"ApiContents"}))}h.isMDXComponent=!0}}]);