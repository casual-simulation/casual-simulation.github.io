"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[585],{4629:function(e,t,n){n.d(t,{hl:function(){return Z},zl:function(){return O},KO:function(){return M},HE:function(){return C},Op:function(){return w}});var r=n(7639),a=n(7294),i=n(2503),o=n(814),s=n(4673),c=n(6486),l=n(1073),m=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={hasError:!1},n}(0,l.Z)(t,e),t.getDerivedStateFromError=function(e){return{hasError:!0,error:e}};var n=t.prototype;return n.componentDidCatch=function(e,t){var n="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw n;console.error(n)},n.render=function(){return this.state.hasError?a.createElement("h1",null,"[",this.props.reflection.name,"] ",this.state.error):this.props.children},t}(a.Component),d=n(4996),u=n(9960),h=n(7120),f=n(6388),p=n(1169);function g(e){void 0===e&&(e={});var t=e.references;return function(e){(0,p.Vn)(e,"link",(function(e){if(e.url.startsWith("tags:")){var n=e.url.slice("tags:".length);n.startsWith("@")?e.url=(0,d.Z)("listen-tags")+y(n.slice(1)):e.url=(0,d.Z)("tags")+y(n)}else if(e.url.startsWith("ref:")){var r=e.url.slice("ref:".length),a=t[r];e.url=(0,d.Z)(a)+"#"+r}else if(e.url.startsWith("glossary:")){var i=e.url.slice("glossary:".length);e.url=(0,d.Z)("glossary")+"#"+v(i)}else if(e.url.startsWith("page:")){var o=e.url.slice("page:".length).split("#"),s=o[0],c=o[1];e.url=(0,d.Z)(s)+"#"+c}}))}}function y(e){return"#"+v(e)}function v(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function k(e){return void 0===e&&(e={}),function(e){e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}var x={Property:["type"],reflection:["declaration"],"Type literal":["children","signatures"],"Call signature":["parameters","comment","type"]};function V(e,t,n){void 0===n&&(n=null),function(e,t,n){var a;void 0===n&&(n=null);for(var i,o=x[null!=(a=e.kindString)?a:e.type]||[],s=(0,r.Z)(o);!(i=s()).done;){var c=i.value,l=e[c];if(Array.isArray(l))for(var m,d=(0,r.Z)(l);!(m=d()).done;){var u=m.value;u&&t(u,n,c)}else l&&t(l,n,c)}}(e,(function(e,n,r){t(e,n,r),V(e,t,e)}))}function S(e,t){var n=[];return t(e)&&n.push(e),V(e,(function(e,r,a){t(e,r,a)&&n.push(e)})),n}function w(e){e}var T=["first","second","third","fourth","fifth"];function b(e,t){return e.name+"-"+t.name}function E(e,t){var n,r=b(e,t);return{value:"<code>"+("Constructor"===t.kindString||"Method"===t.kindString?te(t.signatures[0]):"Accessor"===t.kindString?(n=t).name+": "+ce(n.getSignature[0].type):ie(t))+"</code>",id:r,level:3}}function C(e){var t=[],n=function(e){var t=[],n=[],a=[];if(!e)return{properties:t,constructors:n,methods:a};for(var i,o=(0,r.Z)(e);!(i=o()).done;){var s=i.value;s.flags.isPrivate||("Property"===s.kindString||"Accessor"===s.kindString?t.push(s):"Constructor"===s.kindString?n.push(s):"Method"===s.kindString&&a.push(s))}return{properties:t,constructors:n,methods:a}}(e.children),a=n.properties,i=n.constructors,o=n.methods;return a.length>0&&t.push.apply(t,a.map((function(t){return E(e,t)}))),i.length>0&&t.push.apply(t,i.map((function(t){return E(e,t)}))),o.length>0&&t.push.apply(t,o.map((function(t){return E(e,t)}))),t}function P(e){for(var t,n=[],a=Ee(e),i=(0,r.Z)(a);!(t=i()).done;){var o=t.value,s=Te(o);n.push({value:s,id:o.group,level:2}),n.push.apply(n,o.children.map((function(e){return N(e)})))}return n}function N(e){var t,n=e.reflection,r=e.child,a=(e.group,e.name),i=e.namespace,o=i?i+"."+a:a;if(me(r)){var s,c=r.type.declaration.signatures;t=te(null!=(s=Ve(c))?s:c[0],o)}else if(ue(r)){t=te(Se(r),o)}else t=ie(r,o);return{value:t="<code>"+t+"</code>",id:n.name+"-"+r.name,level:3}}function M(e){for(var t,n=[{value:e.pageTitle,id:"",level:2}],a=(0,r.Z)(e.contents);!(t=a()).done;){var i=t.value;if("Interface"===i.reflection.kindString||"Class"===i.reflection.kindString){var o=ve(i.reflection),s=ke(i.reflection);n.push({value:o,id:s,level:2}),n.push.apply(n,C(i.reflection))}else if("Call signature"===i.reflection.kindString){var c=ve(i.reflection),l=ke(i.reflection);n.push({value:"<code>"+te(i.reflection,c)+"</code>",id:l,level:3})}else if("Type alias"===i.reflection.kindString){var m=ve(i.reflection),d=ke(i.reflection);n.push({value:m,id:d,level:2})}else if("Get signature"===i.reflection.kindString||"Set signature"===i.reflection.kindString){var u=ve(i.reflection),h=ke(i.reflection);n.push({value:"<code>"+te(i.reflection,u)+"</code>",id:h,level:3})}else{var f=ve(i.reflection),p=ke(i.reflection);n.push({value:f,id:p,level:2}),n.push.apply(n,P(i.reflection))}}return n}function Z(e){var t=e.doc,n=t.contents,r=t.references;return a.createElement("div",{className:"api"},n.map((function(e){return a.createElement(z,{key:e.id,reflection:e.reflection,references:r})})))}function z(e){var t=e.reflection,n=e.references;return"Interface"===t.kindString||"Class"===t.kindString?a.createElement($,{reflection:t,references:n}):"Call signature"===t.kindString||"Get signature"===t.kindString||"Set signature"===t.kindString?a.createElement(I,{reflection:t,references:n}):"Type alias"===t.kindString?a.createElement(F,{reflection:t,references:n}):a.createElement(R,{reflection:t,references:n})}function F(e){var t=e.reflection,n=e.references,r=ve(t),o=ke(t);return a.createElement("div",null,a.createElement(i.Z,{as:"h2",id:o},r),a.createElement(X,{reflection:t,references:n}),a.createElement(A,{reflection:t,name:r,references:n}),a.createElement(re,{member:t}))}function A(e){var t=e.reflection,n=e.name,r=e.references,i="";return"union"===t.type.type&&(i=a.createElement(q,{type:t.type,name:n,references:r})),i}function q(e){var t=e.type,n=e.name,r=e.references;return a.createElement("div",null,a.createElement("p",null,"A ",n," can be one of the following values:"),a.createElement("ul",null,t.types.map((function(e,t){return a.createElement(D,{key:t,type:e,references:r})}))))}function D(e){var t=e.type,n=e.references;return a.createElement("li",null,a.createElement("code",null,a.createElement(se,{type:t,references:n})))}function $(e){var t=e.reflection,n=e.references,r=ve(t),o=ke(t);return a.createElement("div",null,a.createElement(i.Z,{as:"h2",id:o},r),a.createElement(O,{reflection:t,references:n}),a.createElement(re,{member:t}))}function R(e){var t=e.reflection,n=e.references,r=ve(t),o=ke(t);return a.createElement("div",null,a.createElement(i.Z,{as:"h2",id:o},r),a.createElement(j,{reflection:t,references:n}),a.createElement(re,{member:t}))}function I(e){var t=e.reflection,n=e.references,r=ve(t),i=ke(t);return a.createElement("div",null,a.createElement(H,{func:t,sig:t,name:r,link:i,references:n}))}function O(e){var t,n=e.reflection;if(!n)throw new Error("Unable to find "+e.name+"!");var r=function(e){return(0,c.sortBy)(e,(function(e){return"Property"===e.kindString||"Accessor"===e.kindString?0:"Constructor"===e.kindString?1:2})).filter((function(e){return!e.flags.isPrivate}))}(null!=(t=n.children)?t:[]);return a.createElement(m,{reflection:n,root:!0},a.createElement("div",{className:"api"},a.createElement(X,{reflection:n,references:e.references}),n.indexSignature?a.createElement(G,{reflection:n,index:n.indexSignature,references:e.references}):"",n.references?a.createElement(Y,{prop:n,references:e.references}):"",r.map((function(t){return a.createElement(B,{key:t.name,member:t,link:b(n,t),references:e.references})}))))}function G(e){var t=e.reflection,n=e.index,r=e.references,o=n.parameters[0];return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:t.name+"-_index"},"Index Signature"),a.createElement(X,{reflection:n,references:r}),a.createElement("pre",null,a.createElement("code",null,"[",o.name,": ",a.createElement(se,{type:o.type,references:r}),"]: ",a.createElement(se,{type:n.type,references:r}))),a.createElement(re,{member:n}))}function X(e){var t=e.reflection,n=e.references;return a.createElement("div",null,a.createElement(U,{comment:t.comment,references:n}))}function B(e){var t;return t="Property"===e.member.kindString?function(e){var t,n=e.member,r="";n.references?(r=a.createElement(L,{prop:n,references:e.references}),t=a.createElement(a.Fragment,null,n.typeReference)):"reflection"===n.type.type&&n.typeText&&n.typeReference?(t=a.createElement(a.Fragment,null,n.typeReference),r=a.createElement(o.Z,{language:"typescript"},n.typeText)):t=a.createElement(se,{type:e.member.type,references:e.references});!r&&n.typeText&&n.typeReference&&(r=a.createElement(o.Z,{language:"typescript"},n.typeText));var s=ve(n);ke(n);return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:e.link},a.createElement("code",null,s,e.member.flags.isOptional?"?":"",": ",t)),a.createElement(X,{reflection:e.member,references:e.references}),r)}(e):"Constructor"===e.member.kindString?function(e){var t=ve(e.member);return a.createElement("div",null,a.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Method"===e.member.kindString?function(e){var t=ve(e.member);return a.createElement("div",null,a.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Accessor"===e.member.kindString?function(e){var t;return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:e.link},a.createElement("code",null,e.member.name,": ",a.createElement(se,{type:e.member.getSignature[0].type,references:e.references}))),a.createElement("p",null,null==(t=e.member.getSignature[0].comment)?void 0:t.shortText))}(e):"Not found "+e.member.kindString,a.createElement(m,{reflection:e.member},a.createElement("div",null,t))}function Y(e){var t=e.prop,n=e.references,r=ke(t);return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:r+"-extra-functions"},"Extra Functions"),a.createElement("p",null,"The extra functions that are available on this type."),a.createElement(s.Z,null,a.createElement("p",null,"See the following functions for more information:"),a.createElement(K,{children:t.references,references:n})))}function L(e){var t=e.prop,n=e.references;return a.createElement(s.Z,null,a.createElement("p",null,"See the following functions for more information:"),a.createElement(K,{children:t.references,references:n}))}function j(e){var t=e.reflection,n=(t.type.declaration,Ee(t));return console.log(n),a.createElement(m,{reflection:t,root:!0},a.createElement("div",{className:"api"},a.createElement(X,{reflection:t,references:e.references}),n.map((function(t){return a.createElement(W,{key:t.group,group:t,references:e.references})}))))}function W(e){var t=e.group,n=e.references,r=t.children,o=Te(t);return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:t.group},o),r.map((function(e){return a.createElement(_,{key:e.child.id,namespace:e.namespace,name:e.name,property:e.child,link:b(e.reflection,e.child),references:n})})))}function _(e){var t;if(me(e.property)){var n,r=e.namespace?e.namespace+"."+e.name:e.name,o=e.property.type.declaration;t=H({name:r,func:e.property,sig:null!=(n=Ve(o.signatures))?n:o.signatures[0],link:e.link,references:e.references})}else if(ue(e.property)){var s=e.namespace?e.namespace+"."+e.name:e.name,c=Se(e.property);console.log(s,c,e.property),t=H({name:s,func:e.property,sig:c,link:e.link,references:e.references})}else t=fe(e.property)?a.createElement(a.Fragment,null,"This is really fun! ",e.property.name):"Property"===e.property.kindString?function(e){return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:e.link},a.createElement("code",null,e.property.name,": ",a.createElement(se,{type:e.property.type,references:e.references}))),a.createElement(X,{reflection:e.property,references:e.references}))}(e):"Not found "+e.property.kindString;return a.createElement(m,{reflection:e.property},a.createElement("div",null,t))}function H(e){var t=e.func,n=e.sig,r=e.link,o=e.name,s=e.references;n||console.log(o,t);var c=n.parameters||[];return a.createElement("div",null,a.createElement(i.Z,{as:"h3",id:r},a.createElement(ee,{func:t,sig:n,name:o,references:s})),a.createElement(J,{sig:n,references:s}),c.length>0?a.createElement("div",null,c.map((function(e,t){return a.createElement(ne,{key:e.name,param:e,index:t,references:s})}))):"",a.createElement(re,{member:n}))}function J(e){var t=e.sig,n=e.references;return a.createElement(U,{comment:t.comment,references:n})}function U(e){var t=e.comment,n=e.references;return a.createElement(K,{references:n},Q(t))}function K(e){var t=e.children,n=e.remarkPlugins,r=e.rehypePlugins,i=e.references;return a.createElement(h.D,{remarkPlugins:[[g,{references:i}]].concat(n||[]),rehypePlugins:[f.Z].concat(r||[])},t)}function Q(e){var t="";return e&&(t+=e.shortText,e.text&&(t+="\n\n"+e.text)),t}function ee(e){var t=e.func,n=e.sig,r=e.name,i=e.references,o=n.parameters||[],s="";return"Get signature"!==t.kindString&&(s=a.createElement(a.Fragment,null,"(",o.map((function(e,t){return a.createElement("span",{key:e.name},t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",a.createElement(se,{type:e.type,references:i}))})),")")),a.createElement("code",null,(t.flags.isStatic?"static ":"")+(r||n.name),s,": ",a.createElement(se,{type:n.type,references:i}))}function te(e,t){void 0===t&&(t=e.name);var n=e.parameters||[],r="";return"Get signature"!==e.kindString&&(r="("+n.map((function(e,t){return(e.flags.isRest?"...":"")+e.name})).join(", ")+")"),""+t+r+": "+ce(e.type)}function ne(e){var t,n=e.param,r=e.index,i=e.references;return t=n.flags.isRest&&n.type.elementType?0===r?a.createElement("p",null,a.createElement("strong",null,"Each parameter")," is a ",a.createElement(se,{type:n.type.elementType,references:i})," and are ",a.createElement(oe,{param:n,isRest:!0,references:i})):a.createElement("p",null,a.createElement("strong",null,"Each other parameter")," is a ",a.createElement(se,{type:n.type.elementType,references:i})," and are ",a.createElement(oe,{param:n,isRest:!0,references:i})):a.createElement("p",null,"The ",a.createElement("strong",null,function(e){return T[e]}(r)," parameter")," is",n.flags.isOptional?" optional and is":""," a ",a.createElement(se,{type:n.type,references:i})," and ",a.createElement(oe,{param:n,references:i})),t}function re(e){var t,n=e.member;if(null==(t=n.comment)||!t.tags)return"";var r=n.comment.tags.filter((function(e){return"example"===e.tag}));return r.length>0?a.createElement("div",null,a.createElement("h4",null,"Examples"),r.map((function(e,t){return a.createElement(ae,{key:t,example:e})}))):""}function ae(e){var t=e.example.text,n=t.indexOf("\n"),r=t.substring(0,n),i=t.substring(n+1);return a.createElement(o.Z,{language:"typescript",title:r.trim()},i.trim())}function ie(e,t){var n;return void 0===t&&(t=e.name),n=e.typeReference?e.typeReference:ce(e.type),t+(e.flags.isOptional?"?":"")+": "+n}function oe(e){var t=e.param,n=e.isRest,r=e.references;return a.createElement(K,{remarkPlugins:[k],references:r},function(e,t){var n=Q(e.comment);if(!n)return"";(n=n.slice(0,1).toLowerCase()+n.slice(1)).startsWith("the")&&!t&&(n="is "+n);return n}(t,n))}function se(e){var t=e.type,n=e.references,r=e.isInUnionOrArray;if("intrinsic"===t.type)return a.createElement("span",null,t.name);if(t.name){if("Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return a.createElement(a.Fragment,null,"Promise<",a.createElement(se,{type:t.typeArguments[0],references:n}),">");if("Partial"===t.name&&"Partial"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return a.createElement(a.Fragment,null,a.createElement("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"Partial"),"<",a.createElement(se,{type:t.typeArguments[0],references:n}),">");var i="#"+t.name,o=t.id?null==n?void 0:n["id-"+t.id]:null;if(o){var s=null==n?void 0:n[o];s&&(i=(0,d.Z)(s)+"#"+o)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry");return a.createElement(u.Z,{href:i},t.name)}if("union"===t.type)return a.createElement("span",null,"(",t.types.map((function(e,t){return a.createElement(a.Fragment,{key:t},t>0?" | ":"",a.createElement(se,{type:e,references:n,isInUnionOrArray:!0}))})),")");if("array"===t.type)return a.createElement(a.Fragment,null,a.createElement(se,{type:t.elementType,references:n,isInUnionOrArray:!0}),"[]");if("literal"===t.type)return"string"==typeof t.value?a.createElement("span",null,'"',t.value,'"'):"number"==typeof t.value?a.createElement("span",null,t.value):"boolean"==typeof t.value?a.createElement("span",null,t.value?"true":"false"):void 0===t.value?a.createElement("span",null,"undefined"):null===t.value?a.createElement("span",null,"null"):""+JSON.stringify(t);if("reflection"===t.type){var c=t.declaration;if("Type literal"===c.kindString&&c.signatures&&!c.children){var l,m=null!=(l=Ve(c.signatures))?l:c.signatures[0],h=m.parameters||[];return a.createElement(a.Fragment,null,a.createElement("span",null,r?"(":"","(",h.map((function(e,t){return a.createElement("span",{key:t},t>0?",":"",e.name,": ",a.createElement(se,{type:e.type,references:n}))})),") => ",a.createElement(se,{type:m.type,references:n}),r?")":""))}return"object"}return""+JSON.stringify(t)}function ce(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+ce(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((function(e){return ce(e)})).join(" | ")+")":"array"===e.type?ce(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function le(e){return me(e)||ue(e)}function me(e){return e&&de(e.type)}function de(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((function(e){return"Call signature"===e.kindString}))}function ue(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((function(e){return de(e)}))}function he(e){return e&&"Call signature"===e.kindString}function fe(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&"Type literal"===e.type.declaration.kindString&&e.type.declaration.children}function pe(e,t){var n,r,a=null==(n=e.comment)||null==(r=n.tags)?void 0:r.find((function(e){return e.tag===t}));return a?a.text.trim():null}function ge(e){if(e)for(var t,n=(0,r.Z)(e);!(t=n()).done;){var a=pe(t.value,"docname");if(a)return a.trim()}return null}function ye(e){if(me(e)){var t,n=null==e||null==(t=e.type)?void 0:t.declaration,a=xe(null==n?void 0:n.signatures);if(a)return a}else if(ue(e))for(var i,o=e.type.types,s=(0,r.Z)(o);!(i=s()).done;){var c=i.value;if(de(c)){var l=xe(c.declaration.signatures);if(l)return l}}else if(he(e)){var m=xe([e]);if(m)return m}return"99-default"}function ve(e){if("Method"===e.kindString){var t=ge(e.signatures);if(t)return t}else if(me(e)){var n,a=null==e||null==(n=e.type)?void 0:n.declaration,i=ge(null==a?void 0:a.signatures);if(i)return i}else if(ue(e))for(var o,s=e.type.types,c=(0,r.Z)(s);!(o=c()).done;){var l=o.value;if(de(l)){var m=ge(l.declaration.signatures);if(m)return m}}else if(he(e)){var d=ge([e]);if(d)return d}return pe(u=e,"docname")||u.name;var u}function ke(e){var t=pe(e,"docid");if(t)return t;var n,r,a=(n="docid",r=[],V(e,(function(e,t,a){"comment"===a&&r.push.apply(r,e.tags.filter((function(e){return e.tag===n})))})),r);return a.length>0?a[0].text.trim():ve(e)}function xe(e){if(e)for(var t,n=(0,r.Z)(e);!(t=n()).done;){var a=pe(t.value,"docgroup");if(a)return a.trim()}return null}function Ve(e){for(var t,n=(0,r.Z)(e);!(t=n()).done;){var a=t.value;if(pe(a,"docgroup"))return a}return null}function Se(e){for(var t,n=e.type.types,a=null,i=(0,r.Z)(n);!(t=i()).done;){var o=t.value;if(de(o)){var s=o.declaration.signatures;a||(a=s[0]);var c=Ve(s);if(c)return c}}return a}function we(e){for(var t,n,a=(t="Call signature",S(e,(function(e){return e.kindString===t}))),i=(0,r.Z)(a);!(n=i()).done;){var o=pe(n.value,"docgrouptitle");if(o)return o.trim()}return null}function Te(e){for(var t,n=(0,r.Z)(e.children);!(t=n()).done;){var a=we(t.value.child);if(a)return a}return e.group}function be(e){if("Call signature"===e.kindString)return he(e)||le(e)||fe(e)?[{group:ye(e),name:ve(e),reflection:e,child:e}]:[];if("Type alias"===e.kindString||"Get signature"===e.kindString||"Set signature"===e.kindString)return[];var t=e.type.declaration.children.filter((function(e){return he(e)||le(e)||fe(e)})),n=null!==pe(e,"hiddennamespace")?null:e.name;return(0,c.flatMap)(t,(function(t){return le(t)?{group:ye(t),name:ve(t),namespace:n,reflection:e,child:t}:be(t)}))}function Ee(e){var t=be(e),n=(0,c.groupBy)(t,(function(e){return e.group})),r=[];for(var a in n)r.push({group:a,children:n[a]});return r=(0,c.sortBy)(r,(function(e){return e.group}))}},9930:function(e,t,n){for(var r=n(4629),a={Vector2:"math/vectors",Vector3:"math/vectors"},i=0,o=["Rotation","AxisAndAngle","FromToRotation","SequenceRotation","EulerAnglesRotation","Quaternion"];i<o.length;i++){a[o[i]]="math/rotations"}(0,r.Op)(a)},4819:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return d},metadata:function(){return h},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=n(4629),s=(n(9930),JSON.parse('{"id":1,"name":"Vector2","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"Defines a class that represents a 2D point in space."},"children":[{"id":24,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":30,"character":4}],"signatures":[{"id":25,"name":"new Vector2","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"shortText":"Constructs a new 2D vector with the given X and Y values.","tags":[{"tag":"example","text":"Create a new Vector2 object with the position (2, 3).\\nlet myVector = new Vector2(2, 3);\\n\\nos.toast(`X: ${myVector.x}, Y: ${myVector.y}`);\\n"},{"tag":"example","text":"Move this bot to (10, 15) in the home dimension.\\ntags.homePosition = new Vector2(10, 15);\\n"}]},"parameters":[{"id":26,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The X value of the vector."},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":27,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Y value of the vector.\\n"},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":28,"name":"x","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The X value of this vector."},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":10,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":29,"name":"y","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The Y value of this vector."},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":15,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":30,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":163,"character":4}],"signatures":[{"id":31,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Adds this vector with the other vector and returns the result.","tags":[{"tag":"example","text":"Add two vectors together.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\nconst added = first.add(second);\\n\\nos.toast(added); // Prints (4, 6)\\n"}]},"parameters":[{"id":32,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to add with this vector.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":42,"name":"dot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":238,"character":4}],"signatures":[{"id":43,"name":"dot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the dot product of this vector compared to the given other vector.\\nReturns a number that is positive if the vectors point in the same direction,\\nnegative if they point in opposite directions, and zero if they are perpendicular.\\nFor normalized vectors, this value is clamped to 1 and -1.","tags":[{"tag":"example","text":"Determine how two vectors are pointing towards/away from the same direction.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\n\\nconst dot = first.dot(second);\\nif (dot < 0) {\\n    os.toast(\\"Vectors are pointing away from each other!\\");\\n} else if (dot === 0) {\\n    os.toast(\\"Vectors 90 degrees away from each other!\\");\\n} else {\\n    os.toast(\\"Vectors are pointing towards from each other!\\");\\n}\\n"}]},"parameters":[{"id":44,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to calculate the dot product with.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":55,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":324,"character":4}],"signatures":[{"id":56,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Determines if this vector equals the other vector.","tags":[{"tag":"example","text":"Determine if two vectors represent the same value.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\nconst third = new Vector2(1, 2);\\n\\nos.toast(`first == second: ${first.equals(second)}; first == third: ${first.equals(third)}`)\\n"}]},"parameters":[{"id":57,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":45,"name":"length","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":251,"character":4}],"signatures":[{"id":46,"name":"length","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the length of this vector and returns the result.","tags":[{"tag":"example","text":"Get the length of the vector.\\nconst myVector = new Vector2(1, 2);\\nconst length = myVector.length();\\n\\nos.toast(`Vector is ${length} units long`);\\n"}]},"type":{"type":"intrinsic","name":"number"}}]},{"id":39,"name":"multiply","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":214,"character":4}],"signatures":[{"id":40,"name":"multiply","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Multiplies this vector by the given other vector and returns the result.","tags":[{"tag":"example","text":"Multiply two vectors together.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\nconst multiplied = first.multiply(second);\\n\\nos.toast(multiplied); // Prints (3, 8)\\n"}]},"parameters":[{"id":41,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to multiply with this vector.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":36,"name":"multiplyScalar","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":199,"character":4}],"signatures":[{"id":37,"name":"multiplyScalar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Multiplies each component of this vector by the given value and returns the result.","tags":[{"tag":"example","text":"Scale a vector by 10.\\nconst myVector = new Vector2(1, 1);\\nconst scaled = myVector.multiplyScalar(10);\\nos.toast(scaled); // Prints (10, 10)\\n"}]},"parameters":[{"id":38,"name":"scale","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The scale that should be applied to this vector.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":51,"name":"negate","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":296,"character":4}],"signatures":[{"id":52,"name":"negate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Negates each component of this vector and returns a new vector that contains the result.","tags":[{"tag":"example","text":"Negate a vector.\\nconst myVector = new Vector2(1, 2);\\nconst negated = myVector.negate();\\n\\nos.toast(`Vector: ${myVector}, Negated: ${negated}`);\\n"}]},"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":49,"name":"normalize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":282,"character":4}],"signatures":[{"id":50,"name":"normalize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the normalized version of this vector and returns it.\\nA normalized vector is a vector whose length equals 1.","text":"Normalizing a vector preserves its directionality while making the length (i.e. scale) of it 1.\\n","tags":[{"tag":"example","text":"Normalize a vector.\\nconst myVector = new Vector2(1, 2);\\nconst normalized = myVector.normalize();\\n\\nos.toast(`Vector: ${myVector}, Normalized: ${normalized}`);\\n"}]},"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":47,"name":"squareLength","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":266,"character":4}],"signatures":[{"id":48,"name":"squareLength","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the square length of this vector and returns the result.\\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn\'t require\\ncalculating a square root.","tags":[{"tag":"example","text":"Get the square length of the vector.\\nconst myVector = new Vector2(1, 2);\\nconst length = myVector.squareLength();\\n\\nos.toast(`Vector is ${length}^2 units long`);\\n"}]},"type":{"type":"intrinsic","name":"number"}}]},{"id":33,"name":"subtract","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":186,"character":4}],"signatures":[{"id":34,"name":"subtract","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Subtracts the other vector from this vector and returns the result.","tags":[{"tag":"example","text":"Subtract two vectors.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\nconst subtracted = first.subtract(second);\\nos.toast(subtracted);\\n"},{"tag":"example","text":"Find the direction from one vector to another.\\nconst first = new Vector2(1, 2);\\nconst second = new Vector2(3, 4);\\n\\nconst directionFromFirstToSecond = second.subtract(first);\\nconst directionFromSecondToFirst = first.subtract(second);\\n\\nos.toast(`first -> second = ${directionFromFirstToSecond}; second -> first = ${directionFromSecondToFirst}`);\\n"}]},"parameters":[{"id":35,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector that should be subtracted from this vector.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":53,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":309,"character":4}],"signatures":[{"id":54,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts this vector to a human-readable string representation.","tags":[{"tag":"example","text":"Get a string of a vector.\\nconst myVector = new Vector2(1, 2);\\nconst vectorString = myVector.toString();\\n\\nos.toast(\'My Vector: \' + vectorString);\\n"}]},"type":{"type":"intrinsic","name":"string"}}]},{"id":6,"name":"angleBetween","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":72,"character":11}],"signatures":[{"id":7,"name":"angleBetween","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the angle between the two given vectors and returns the result in radians.","tags":[{"tag":"example","text":"Find the angle between two vectors.\\nconst first = new Vector2(\\n    Math.cos(Math.PI / 3),\\n    Math.sin(Math.PI / 3)\\n); // 60 degrees\\nconst second = new Vector2(\\n    Math.cos(Math.PI / 2),\\n    Math.sin(Math.PI / 2)\\n); // 90 degrees\\n\\nconst angle = Vector2.angleBetween(first, second);\\nos.toast(angle);\\n"}]},"parameters":[{"id":8,"name":"first","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The first vector that should be used for comparision."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":9,"name":"second","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The second vector that should be used for comparision.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":2,"name":"createNormalized","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":49,"character":11}],"signatures":[{"id":3,"name":"createNormalized","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a 2D vector with the given X and Y values that is normalized immediately upon creation.","tags":[{"tag":"example","text":"Create a normalized vector\\nconst vector = Vector2.createNormalized(1, 2);\\n"}]},"parameters":[{"id":4,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The X value of the vector."},"type":{"type":"intrinsic","name":"number"}},{"id":5,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Y value of the vector.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":10,"name":"distanceBetween","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":91,"character":11}],"signatures":[{"id":11,"name":"distanceBetween","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the distance between the two given vectors and returns the result.","tags":[{"tag":"example","text":"Find the distance between two vectors.\\nconst first = new Vector2(5, 10);\\nconst second = new Vector2(9, 2);\\nconst distance = Vector2.distanceBetween(first, second);\\n\\nos.toast(`Distance: ${distance}`);\\n"}]},"parameters":[{"id":12,"name":"first","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The first vector that should be used for comparision."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":13,"name":"second","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The second vector that should be used for comparision.\\n"},"type":{"type":"reference","id":1,"name":"Vector2"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":19,"name":"interpolateDirection","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":144,"character":11}],"signatures":[{"id":20,"name":"interpolateDirection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Constructs a new vector that is the directional linear interpolation between the given start and end positions.\\nThe degree that the result is interpolated is determined by the given amount parameter.","text":"This function works similarly to interpolatePosition(), except the result is always a normalized vector.\\n","tags":[{"tag":"example","text":"Find the direction that points halfway between the two vectors.\\nconst start = new Vector2(5, 10);\\nconst finish = new Vector2(9, 2);\\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\\n\\nos.toast(halfway);\\n"}]},"parameters":[{"id":21,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The start position."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":22,"name":"finish","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The end position."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":23,"name":"amount","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":14,"name":"interpolatePosition","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":117,"character":11}],"signatures":[{"id":15,"name":"interpolatePosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Constructs a new vector that is the linear interpolation between the given start and end positions.\\nThe degree that the result is interpolated is determined by the given amount parameter.","tags":[{"tag":"example","text":"Find the position that is halfway between two vectors.\\nconst start = new Vector2(5, 10);\\nconst finish = new Vector2(9, 2);\\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\\n\\nos.toast(halfway);\\n"},{"tag":"example","text":"Find the position that is 1/4 between two vectors.\\nconst start = new Vector2(5, 10);\\nconst finish = new Vector2(9, 2);\\nconst halfway = Vector2.interpolatePosition(start, finish, 0.25);\\n\\nos.toast(halfway);\\n"}]},"parameters":[{"id":16,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The start position."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":17,"name":"finish","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The end position."},"type":{"type":"reference","id":1,"name":"Vector2"}},{"id":18,"name":"amount","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":1,"name":"Vector2"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[24]},{"title":"Properties","kind":1024,"children":[28,29]},{"title":"Methods","kind":2048,"children":[30,42,55,45,39,36,51,49,47,33,53,6,2,10,19,14]}],"sources":[{"fileName":"src/aux-common/math/Vector2.ts","line":6,"character":13}]}')),c=JSON.parse('{"id":58,"name":"Vector3","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"Defines a class that represents a 3D point in space."},"children":[{"id":82,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":59,"character":4}],"signatures":[{"id":83,"name":"new Vector3","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"shortText":"Constructs a new 3D vector with the given X and Y values.","tags":[{"tag":"example","text":"Create a new Vector3 object with the position (2, 3, 4).\\nlet myVector = new Vector3(2, 3, 4);\\n\\nos.toast(`X: ${myVector.x}, Y: ${myVector.y}, Z: ${myVector.z}`);\\n"},{"tag":"example","text":"Move this bot to (1, 2, 3) in the home dimension.\\ntags.homePosition = new Vector3(1, 2, 3);\\n"}]},"parameters":[{"id":84,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The X value of the vector."},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":85,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Y value of the vector."},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"},{"id":86,"name":"z","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Z value of the vector.\\n"},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":87,"name":"x","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The X value of this vector."},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":12,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":88,"name":"y","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The Y value of this vector."},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":17,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":89,"name":"z","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The Z value of this vector."},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":22,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":90,"name":"xy","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":27,"character":8}],"getSignature":[{"id":91,"name":"xy","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Gets a new Vector2 that contains this vector\'s X and Y components."},"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":92,"name":"xz","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":34,"character":8}],"getSignature":[{"id":93,"name":"xz","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Gets a new Vector2 that contains this vector\'s X and Z components."},"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":94,"name":"yz","kind":262144,"kindString":"Accessor","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":41,"character":8}],"getSignature":[{"id":95,"name":"yz","kind":524288,"kindString":"Get signature","flags":{},"comment":{"shortText":"Gets a new Vector2 that contains this vector\'s Y and Z components."},"type":{"type":"reference","id":1,"name":"Vector2"}}]},{"id":96,"name":"add","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":202,"character":4}],"signatures":[{"id":97,"name":"add","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Adds this vector with the other vector and returns the result.","tags":[{"tag":"example","text":"Add two vectors together.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\nconst added = first.add(second);\\n\\nos.toast(added); // Prints (4, 6, 8)\\n"}]},"parameters":[{"id":98,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to add with this vector.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":111,"name":"cross","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":306,"character":4}],"signatures":[{"id":112,"name":"cross","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the cross product of this vector with the given other vector.\\nReturns a new vector that is perpendicular to both vectors.\\nNote that the order of the vectors greatly matters. For example, (1, 0, 0).cross(0, 1, 0) === (0, 0, 1) but (0, 1, 0).cross(1, 0, 0) === (0, 0, -1).","tags":[{"tag":"example","text":"Calculate a vector that is perpendicular to two vectors.\\nconst first = new Vector3(1, 0, 0);\\nconst second = new Vector3(0, 1, 0);\\n\\nconst result = first.cross(second);\\nos.toast(`Result: ${result}`); // Prints (0, 0, 1)\\n"}]},"parameters":[{"id":113,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to calculate the cross product with.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":108,"name":"dot","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":289,"character":4}],"signatures":[{"id":109,"name":"dot","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the dot product of this vector compared to the given other vector.\\nReturns a number that is positive if the vectors point in the same direction,\\nnegative if they point in opposite directions, and zero if they are perpendicular.\\nFor normalized vectors, this value is clamped to 1 and -1.","tags":[{"tag":"example","text":"Determine how two vectors are pointing towards/away from the same direction.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\n\\nconst dot = first.dot(second);\\nif (dot < 0) {\\n    os.toast(\\"Vectors are pointing away from each other!\\");\\n} else if (dot === 0) {\\n    os.toast(\\"Vectors 90 degrees away from each other!\\");\\n} else {\\n    os.toast(\\"Vectors are pointing towards from each other!\\");\\n}\\n"}]},"parameters":[{"id":110,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to calculate the dot product with.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":124,"name":"equals","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":399,"character":4}],"signatures":[{"id":125,"name":"equals","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Determines if this vector equals the other vector.","tags":[{"tag":"example","text":"Determine if two vectors represent the same value.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\nconst third = new Vector3(1, 2, 3);\\n\\nos.toast(`first == second: ${first.equals(second)}; first == third: ${first.equals(third)}`)\\n"}]},"parameters":[{"id":126,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other value to compare to.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":114,"name":"length","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":323,"character":4}],"signatures":[{"id":115,"name":"length","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the length of this vector and returns the result.","tags":[{"tag":"example","text":"Get the length of the vector.\\nconst myVector = new Vector3(1, 2, 3);\\nconst length = myVector.length();\\n\\nos.toast(`Vector is ${length} units long`);\\n"}]},"type":{"type":"intrinsic","name":"number"}}]},{"id":105,"name":"multiply","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":261,"character":4}],"signatures":[{"id":106,"name":"multiply","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Multiplies this vector by the given other vector and returns the result.","tags":[{"tag":"example","text":"Multiply two vectors together.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\nconst multiplied = first.multiply(second);\\n\\nos.toast(multiplied); // Prints (3, 8, 15)\\n"}]},"parameters":[{"id":107,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector to multiply with this vector.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":102,"name":"multiplyScalar","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":246,"character":4}],"signatures":[{"id":103,"name":"multiplyScalar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Multiplies each component of this vector by the given value and returns the result.","tags":[{"tag":"example","text":"Scale a vector by 10.\\nconst myVector = new Vector3(1, 1, 1);\\nconst scaled = myVector.multiplyScalar(10);\\nos.toast(scaled); // Prints (10, 10, 10)\\n"}]},"parameters":[{"id":104,"name":"scale","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The scale that should be applied to this vector.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":120,"name":"negate","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":371,"character":4}],"signatures":[{"id":121,"name":"negate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Negates each component of this vector and returns a new vector that contains the result.","tags":[{"tag":"example","text":"Negate a vector.\\nconst myVector = new Vector3(1, 2, 3);\\nconst negated = myVector.negate();\\n\\nos.toast(`Vector: ${myVector}, Negated: ${negated}`);\\n"}]},"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":118,"name":"normalize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":354,"character":4}],"signatures":[{"id":119,"name":"normalize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the normalized version of this vector and returns it.\\nA normalized vector is a vector whose length equals 1.","text":"Normalizing a vector preserves its directionality while making the length (i.e. scale) of it 1.\\n","tags":[{"tag":"example","text":"Normalize a vector.\\nconst myVector = new Vector3(1, 2, 3);\\nconst normalized = myVector.normalize();\\n\\nos.toast(`Vector: ${myVector}, Normalized: ${normalized}`);\\n"}]},"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":116,"name":"squareLength","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":338,"character":4}],"signatures":[{"id":117,"name":"squareLength","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the square length of this vector and returns the result.\\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn\'t require\\ncalculating a square root.","tags":[{"tag":"example","text":"Get the square length of the vector.\\nconst myVector = new Vector3(1, 2, 3);\\nconst length = myVector.squareLength();\\n\\nos.toast(`Vector is ${length}^2 units long`);\\n"}]},"type":{"type":"intrinsic","name":"number"}}]},{"id":99,"name":"subtract","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":229,"character":4}],"signatures":[{"id":100,"name":"subtract","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Subtracts the other vector from this vector and returns the result.","tags":[{"tag":"example","text":"Subtract two vectors.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\nconst subtracted = first.subtract(second);\\nos.toast(subtracted);\\n"},{"tag":"example","text":"Find the direction from one vector to another.\\nconst first = new Vector3(1, 2, 3);\\nconst second = new Vector3(3, 4, 5);\\n\\nconst directionFromFirstToSecond = second.subtract(first);\\nconst directionFromSecondToFirst = first.subtract(second);\\n\\nos.toast(`first -> second = ${directionFromFirstToSecond}; second -> first = ${directionFromSecondToFirst}`);\\n"}]},"parameters":[{"id":101,"name":"other","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The other vector that should be subtracted from this vector.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":122,"name":"toString","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":384,"character":4}],"signatures":[{"id":123,"name":"toString","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts this vector to a human-readable string representation.","tags":[{"tag":"example","text":"Get a string of a vector.\\nconst myVector = new Vector3(1, 2, 3);\\nconst vectorString = myVector.toString();\\n\\nos.toast(\'My Vector: \' + vectorString);\\n"}]},"type":{"type":"intrinsic","name":"string"}}]},{"id":64,"name":"angleBetween","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":105,"character":11}],"signatures":[{"id":65,"name":"angleBetween","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the angle between the two given vectors and returns the result in radians.","tags":[{"tag":"example","text":"Find the angle between two vectors.\\nconst first = new Vector3(\\n    Math.cos(Math.PI / 3),\\n    Math.sin(Math.PI / 3),\\n    0,\\n); // 60 degrees\\nconst second = new Vector3(\\n    Math.cos(Math.PI / 2),\\n    Math.sin(Math.PI / 2),\\n    0\\n); // 90 degrees\\n\\nconst angle = Vector3.angleBetween(first, second);\\nos.toast(angle);\\n"}]},"parameters":[{"id":66,"name":"first","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The first vector that should be used for comparision."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":67,"name":"second","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The second vector that should be used for comparision.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":59,"name":"createNormalized","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":80,"character":11}],"signatures":[{"id":60,"name":"createNormalized","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a 3D vector with the given X and Y values that is normalized immediately upon creation.","tags":[{"tag":"example","text":"Create a normalized vector\\nconst vector = Vector3.createNormalized(1, 2, 3);\\n"}]},"parameters":[{"id":61,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The X value of the vector."},"type":{"type":"intrinsic","name":"number"}},{"id":62,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Y value of the vector."},"type":{"type":"intrinsic","name":"number"}},{"id":63,"name":"z","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The Z value of the vector.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":68,"name":"distanceBetween","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":130,"character":11}],"signatures":[{"id":69,"name":"distanceBetween","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Calculates the distance between the two given vectors and returns the result.","tags":[{"tag":"example","text":"Find the distance between two vectors.\\nconst first = new Vector3(5, 10, 3);\\nconst second = new Vector3(9, 2, 6);\\nconst distance = Vector3.distanceBetween(first, second);\\n\\nos.toast(`Distance: ${distance}`);\\n"}]},"parameters":[{"id":70,"name":"first","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The first vector that should be used for comparision."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":71,"name":"second","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The second vector that should be used for comparision.\\n"},"type":{"type":"reference","id":58,"name":"Vector3"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":77,"name":"interpolateDirection","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":183,"character":11}],"signatures":[{"id":78,"name":"interpolateDirection","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Constructs a new vector that is the directional linear interpolation between the given start and end positions.\\nThe degree that the result is interpolated is determined by the given amount parameter.","text":"This function works similarly to interpolatePosition(), except the result is always a normalized vector.\\n","tags":[{"tag":"example","text":"Find the direction that points halfway between the two vectors.\\nconst start = new Vector3(5, 10, 16);\\nconst finish = new Vector3(9, 2, 6);\\nconst halfway = Vector3.interpolatePosition(start, finish, 0.5);\\n\\nos.toast(halfway);\\n"}]},"parameters":[{"id":79,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The start position."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":80,"name":"finish","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The end position."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":81,"name":"amount","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]},{"id":72,"name":"interpolatePosition","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":156,"character":11}],"signatures":[{"id":73,"name":"interpolatePosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Constructs a new vector that is the linear interpolation between the given start and end positions.\\nThe degree that the result is interpolated is determined by the given amount parameter.","tags":[{"tag":"example","text":"Find the position that is halfway between two vectors.\\nconst start = new Vector3(5, 10, 15);\\nconst finish = new Vector3(9, 2, 6);\\nconst halfway = Vector3.interpolatePosition(start, finish, 0.5);\\n\\nos.toast(halfway);\\n"},{"tag":"example","text":"Find the position that is 1/4 between two vectors.\\nconst start = new Vector3(5, 10, 15);\\nconst finish = new Vector3(9, 2, 6);\\nconst halfway = Vector3.interpolatePosition(start, finish, 0.25);\\n\\nos.toast(halfway);\\n"}]},"parameters":[{"id":74,"name":"start","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The start position."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":75,"name":"finish","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The end position."},"type":{"type":"reference","id":58,"name":"Vector3"}},{"id":76,"name":"amount","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":58,"name":"Vector3"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[82]},{"title":"Properties","kind":1024,"children":[87,88,89]},{"title":"Accessors","kind":262144,"children":[90,92,94]},{"title":"Methods","kind":2048,"children":[96,111,108,124,114,105,102,120,118,116,99,122,64,59,68,77,72]}],"sources":[{"fileName":"src/aux-common/math/Vector3.ts","line":8,"character":13}]}'),l=n(2503),m=["components"],d={id:"vectors",title:"Vectors",sidebar_label:"Vectors",description:"Vectors help represent positions and directions."},u=void 0,h={unversionedId:"math/vectors",id:"version-3.1.36/math/vectors",title:"Vectors",description:"Vectors help represent positions and directions.",source:"@site/versioned_docs/version-3.1.36/math/vectors.mdx",sourceDirName:"math",slug:"/math/vectors",permalink:"/3.1.36/math/vectors",draft:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/versioned_docs/version-3.1.36/math/vectors.mdx",tags:[],version:"3.1.36",frontMatter:{id:"vectors",title:"Vectors",sidebar_label:"Vectors",description:"Vectors help represent positions and directions."},sidebar:"docs",previous:{title:"ab-1",permalink:"/3.1.36/ab-1"},next:{title:"Rotations",permalink:"/3.1.36/math/rotations"}},f={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Vector2",id:"vector2",level:2}].concat((0,o.HE)(s),[{value:"Vector3",id:"vector3",level:2}],(0,o.HE)(c)),g={toc:p};function y(e){var t=e.components,n=(0,a.Z)(e,m);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(l.Z,{as:"h2",id:"introduction",mdxType:"Heading"},"Introduction"),(0,i.kt)("p",null,'In CasualOS, Vectors are useful objects that represent 2D/3D positions and directions.\nThey are called vectors because in Math it is common to call an ordered list of numbers a "vector".'),(0,i.kt)("p",null,"Additionally, they are useful because we can use vectors to represent X, Y, and Z positions and perform common operations on them like adding them together or finding the distance between them.\nWhen saved to tags, vectors are stored as ",(0,i.kt)("a",{parentName:"p",href:"/tags#vector-tags"},"vector tags"),"."),(0,i.kt)("p",null,"There are two classes that provide vector functionality:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#vector2"},(0,i.kt)("inlineCode",{parentName:"a"},"Vector2"))," provides 2D vectors."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#vector3"},(0,i.kt)("inlineCode",{parentName:"a"},"Vector3"))," provides 3D vectors.")),(0,i.kt)(l.Z,{as:"h2",id:"vector2",mdxType:"Heading"},"Vector2"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Vector2")," is a class that is able to represent 2D positions and directions.\nIt has two properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," which contain their respective coordinates."),(0,i.kt)(o.zl,{reflection:s,mdxType:"ClassMembers"}),(0,i.kt)(l.Z,{as:"h2",id:"vector3",mdxType:"Heading"},"Vector3"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Vector3")," is a class that is able to represent 3D positions and directions.\nIt has three properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," which contain their respective coordinates."),(0,i.kt)(o.zl,{reflection:c,mdxType:"ClassMembers"}))}y.isMDXComponent=!0}}]);