"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[4120],{4629:function(e,t,a){a.d(t,{hl:function(){return F},zl:function(){return V},KO:function(){return O},HE:function(){return D},Op:function(){return T}});var n=a(7639),o=a(7294),s=a(2503),r=a(814),i=a(4673),c=a(6486),l=a(1073),u=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={hasError:!1},a}(0,l.Z)(t,e),t.getDerivedStateFromError=function(e){return{hasError:!0,error:e}};var a=t.prototype;return a.componentDidCatch=function(e,t){var a="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw a;console.error(a)},a.render=function(){return this.state.hasError?o.createElement("h1",null,"[",this.props.reflection.name,"] ",this.state.error):this.props.children},t}(o.Component),d=a(4996),g=a(9960),m=a(7120),p=a(6388),h=a(1169);function f(e){void 0===e&&(e={});var t=e.references;return function(e){(0,h.Vn)(e,"link",(function(e){if(e.url.startsWith("tags:")){var a=e.url.slice("tags:".length);a.startsWith("@")?e.url=(0,d.Z)("listen-tags")+b(a.slice(1)):e.url=(0,d.Z)("tags")+b(a)}else if(e.url.startsWith("ref:")){var n=e.url.slice("ref:".length),o=t[n];e.url=(0,d.Z)(o)+"#"+n}else if(e.url.startsWith("glossary:")){var s=e.url.slice("glossary:".length);e.url=(0,d.Z)("glossary")+"#"+y(s)}else if(e.url.startsWith("page:")){var r=e.url.slice("page:".length).split("#"),i=r[0],c=r[1];e.url=(0,d.Z)(i)+"#"+c}}))}}function b(e){return"#"+y(e)}function y(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function v(e){return void 0===e&&(e={}),function(e){e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}var R={Property:["type"],reflection:["declaration"],"Type literal":["children","signatures"],"Call signature":["parameters","comment","type"]};function k(e,t,a){void 0===a&&(a=null),function(e,t,a){var o;void 0===a&&(a=null);for(var s,r=R[null!=(o=e.kindString)?o:e.type]||[],i=(0,n.Z)(r);!(s=i()).done;){var c=s.value,l=e[c];if(Array.isArray(l))for(var u,d=(0,n.Z)(l);!(u=d()).done;){var g=u.value;g&&t(g,a,c)}else l&&t(l,a,c)}}(e,(function(e,a,n){t(e,a,n),k(e,t,e)}))}function S(e,t){var a=[];return t(e)&&a.push(e),k(e,(function(e,n,o){t(e,n,o)&&a.push(e)})),a}function T(e){e}var w=["first","second","third","fourth","fifth"];function E(e,t){return e.name+"-"+t.name}function x(e,t){var a,n=E(e,t);return{value:"<code>"+("Constructor"===t.kindString||"Method"===t.kindString?te(t.signatures[0]):"Accessor"===t.kindString?(a=t).name+": "+ce(a.getSignature[0].type):se(t))+"</code>",id:n,level:3}}function D(e){var t=[],a=function(e){var t=[],a=[],o=[];if(!e)return{properties:t,constructors:a,methods:o};for(var s,r=(0,n.Z)(e);!(s=r()).done;){var i=s.value;i.flags.isPrivate||("Property"===i.kindString||"Accessor"===i.kindString?t.push(i):"Constructor"===i.kindString?a.push(i):"Method"===i.kindString&&o.push(i))}return{properties:t,constructors:a,methods:o}}(e.children),o=a.properties,s=a.constructors,r=a.methods;return o.length>0&&t.push.apply(t,o.map((function(t){return x(e,t)}))),s.length>0&&t.push.apply(t,s.map((function(t){return x(e,t)}))),r.length>0&&t.push.apply(t,r.map((function(t){return x(e,t)}))),t}function C(e){for(var t,a=[],o=xe(e),s=(0,n.Z)(o);!(t=s()).done;){var r=t.value,i=we(r);a.push({value:i,id:r.group,level:2}),a.push.apply(a,r.children.map((function(e){return P(e)})))}return a}function P(e){var t,a=e.reflection,n=e.child,o=(e.group,e.name),s=e.namespace,r=s?s+"."+o:o;if(ue(n)){var i,c=n.type.declaration.signatures;t=te(null!=(i=ke(c))?i:c[0],r)}else if(ge(n)){t=te(Se(n),r)}else t=se(n,r);return{value:t="<code>"+t+"</code>",id:a.name+"-"+n.name,level:3}}function O(e){for(var t,a=[{value:e.pageTitle,id:"",level:2}],o=(0,n.Z)(e.contents);!(t=o()).done;){var s=t.value;if("Interface"===s.reflection.kindString||"Class"===s.reflection.kindString){var r=ye(s.reflection),i=ve(s.reflection);a.push({value:r,id:i,level:2}),a.push.apply(a,D(s.reflection))}else if("Call signature"===s.reflection.kindString){var c=ye(s.reflection),l=ve(s.reflection);a.push({value:"<code>"+te(s.reflection,c)+"</code>",id:l,level:3})}else if("Type alias"===s.reflection.kindString){var u=ye(s.reflection),d=ve(s.reflection);a.push({value:u,id:d,level:2})}else if("Get signature"===s.reflection.kindString||"Set signature"===s.reflection.kindString){var g=ye(s.reflection),m=ve(s.reflection);a.push({value:"<code>"+te(s.reflection,g)+"</code>",id:m,level:3})}else{var p=ye(s.reflection),h=ve(s.reflection);a.push({value:p,id:h,level:2}),a.push.apply(a,C(s.reflection))}}return a}function F(e){var t=e.doc,a=t.contents,n=t.references;return o.createElement("div",{className:"api"},a.map((function(e){return o.createElement(N,{key:e.id,reflection:e.reflection,references:n})})))}function N(e){var t=e.reflection,a=e.references;return"Interface"===t.kindString||"Class"===t.kindString?o.createElement(I,{reflection:t,references:a}):"Call signature"===t.kindString||"Get signature"===t.kindString||"Set signature"===t.kindString?o.createElement(U,{reflection:t,references:a}):"Type alias"===t.kindString?o.createElement(A,{reflection:t,references:a}):o.createElement(L,{reflection:t,references:a})}function A(e){var t=e.reflection,a=e.references,n=ye(t),r=ve(t);return o.createElement("div",null,o.createElement(s.Z,{as:"h2",id:r},n),o.createElement(W,{reflection:t,references:a}),o.createElement(B,{reflection:t,name:n,references:a}),o.createElement(ne,{member:t}))}function B(e){var t=e.reflection,a=e.name,n=e.references,s="";return"union"===t.type.type&&(s=o.createElement(G,{type:t.type,name:a,references:n})),s}function G(e){var t=e.type,a=e.name,n=e.references;return o.createElement("div",null,o.createElement("p",null,"A ",a," can be one of the following values:"),o.createElement("ul",null,t.types.map((function(e,t){return o.createElement(M,{key:t,type:e,references:n})}))))}function M(e){var t=e.type,a=e.references;return o.createElement("li",null,o.createElement("code",null,o.createElement(ie,{type:t,references:a})))}function I(e){var t=e.reflection,a=e.references,n=ye(t),r=ve(t);return o.createElement("div",null,o.createElement(s.Z,{as:"h2",id:r},n),o.createElement(V,{reflection:t,references:a}),o.createElement(ne,{member:t}))}function L(e){var t=e.reflection,a=e.references,n=ye(t),r=ve(t);return o.createElement("div",null,o.createElement(s.Z,{as:"h2",id:r},n),o.createElement(H,{reflection:t,references:a}),o.createElement(ne,{member:t}))}function U(e){var t=e.reflection,a=e.references,n=ye(t),s=ve(t);return o.createElement("div",null,o.createElement(Q,{func:t,sig:t,name:n,link:s,references:a}))}function V(e){var t,a=e.reflection;if(!a)throw new Error("Unable to find "+e.name+"!");var n=function(e){return(0,c.sortBy)(e,(function(e){return"Property"===e.kindString||"Accessor"===e.kindString?0:"Constructor"===e.kindString?1:2})).filter((function(e){return!e.flags.isPrivate}))}(null!=(t=a.children)?t:[]);return o.createElement(u,{reflection:a,root:!0},o.createElement("div",{className:"api"},o.createElement(W,{reflection:a,references:e.references}),a.indexSignature?o.createElement(Z,{reflection:a,index:a.indexSignature,references:e.references}):"",a.references?o.createElement(q,{prop:a,references:e.references}):"",n.map((function(t){return o.createElement(_,{key:t.name,member:t,link:E(a,t),references:e.references})}))))}function Z(e){var t=e.reflection,a=e.index,n=e.references,r=a.parameters[0];return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:t.name+"-_index"},"Index Signature"),o.createElement(W,{reflection:a,references:n}),o.createElement("pre",null,o.createElement("code",null,"[",r.name,": ",o.createElement(ie,{type:r.type,references:n}),"]: ",o.createElement(ie,{type:a.type,references:n}))),o.createElement(ne,{member:a}))}function W(e){var t=e.reflection,a=e.references;return o.createElement("div",null,o.createElement(z,{comment:t.comment,references:a}))}function _(e){var t;return t="Property"===e.member.kindString?function(e){var t,a=e.member,n="";a.references?(n=o.createElement(j,{prop:a,references:e.references}),t=o.createElement(o.Fragment,null,a.typeReference)):"reflection"===a.type.type&&a.typeText&&a.typeReference?(t=o.createElement(o.Fragment,null,a.typeReference),n=o.createElement(r.Z,{language:"typescript"},a.typeText)):t=o.createElement(ie,{type:e.member.type,references:e.references});!n&&a.typeText&&a.typeReference&&(n=o.createElement(r.Z,{language:"typescript"},a.typeText));var i=ye(a);ve(a);return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:e.link},o.createElement("code",null,i,e.member.flags.isOptional?"?":"",": ",t)),o.createElement(W,{reflection:e.member,references:e.references}),n)}(e):"Constructor"===e.member.kindString?function(e){var t=ye(e.member);return o.createElement("div",null,o.createElement(Q,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Method"===e.member.kindString?function(e){var t=ye(e.member);return o.createElement("div",null,o.createElement(Q,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Accessor"===e.member.kindString?function(e){var t;return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:e.link},o.createElement("code",null,e.member.name,": ",o.createElement(ie,{type:e.member.getSignature[0].type,references:e.references}))),o.createElement("p",null,null==(t=e.member.getSignature[0].comment)?void 0:t.shortText))}(e):"Not found "+e.member.kindString,o.createElement(u,{reflection:e.member},o.createElement("div",null,t))}function q(e){var t=e.prop,a=e.references,n=ve(t);return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:n+"-extra-functions"},"Extra Functions"),o.createElement("p",null,"The extra functions that are available on this type."),o.createElement(i.Z,null,o.createElement("p",null,"See the following functions for more information:"),o.createElement(Y,{children:t.references,references:a})))}function j(e){var t=e.prop,a=e.references;return o.createElement(i.Z,null,o.createElement("p",null,"See the following functions for more information:"),o.createElement(Y,{children:t.references,references:a}))}function H(e){var t=e.reflection,a=(t.type.declaration,xe(t));return console.log(a),o.createElement(u,{reflection:t,root:!0},o.createElement("div",{className:"api"},o.createElement(W,{reflection:t,references:e.references}),a.map((function(t){return o.createElement(J,{key:t.group,group:t,references:e.references})}))))}function J(e){var t=e.group,a=e.references,n=t.children,r=we(t);return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:t.group},r),n.map((function(e){return o.createElement(K,{key:e.child.id,namespace:e.namespace,name:e.name,property:e.child,link:E(e.reflection,e.child),references:a})})))}function K(e){var t;if(ue(e.property)){var a,n=e.namespace?e.namespace+"."+e.name:e.name,r=e.property.type.declaration;t=Q({name:n,func:e.property,sig:null!=(a=ke(r.signatures))?a:r.signatures[0],link:e.link,references:e.references})}else if(ge(e.property)){var i=e.namespace?e.namespace+"."+e.name:e.name,c=Se(e.property);console.log(i,c,e.property),t=Q({name:i,func:e.property,sig:c,link:e.link,references:e.references})}else t=pe(e.property)?o.createElement(o.Fragment,null,"This is really fun! ",e.property.name):"Property"===e.property.kindString?function(e){return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:e.link},o.createElement("code",null,e.property.name,": ",o.createElement(ie,{type:e.property.type,references:e.references}))),o.createElement(W,{reflection:e.property,references:e.references}))}(e):"Not found "+e.property.kindString;return o.createElement(u,{reflection:e.property},o.createElement("div",null,t))}function Q(e){var t=e.func,a=e.sig,n=e.link,r=e.name,i=e.references;a||console.log(r,t);var c=a.parameters||[];return o.createElement("div",null,o.createElement(s.Z,{as:"h3",id:n},o.createElement(ee,{func:t,sig:a,name:r,references:i})),o.createElement(X,{sig:a,references:i}),c.length>0?o.createElement("div",null,c.map((function(e,t){return o.createElement(ae,{key:e.name,param:e,index:t,references:i})}))):"",o.createElement(ne,{member:a}))}function X(e){var t=e.sig,a=e.references;return o.createElement(z,{comment:t.comment,references:a})}function z(e){var t=e.comment,a=e.references;return o.createElement(Y,{references:a},$(t))}function Y(e){var t=e.children,a=e.remarkPlugins,n=e.rehypePlugins,s=e.references;return o.createElement(m.D,{remarkPlugins:[[f,{references:s}]].concat(a||[]),rehypePlugins:[p.Z].concat(n||[])},t)}function $(e){var t="";return e&&(t+=e.shortText,e.text&&(t+="\n\n"+e.text)),t}function ee(e){var t=e.func,a=e.sig,n=e.name,s=e.references,r=a.parameters||[],i="";return"Get signature"!==t.kindString&&(i=o.createElement(o.Fragment,null,"(",r.map((function(e,t){return o.createElement("span",{key:e.name},t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",o.createElement(ie,{type:e.type,references:s}))})),")")),o.createElement("code",null,(t.flags.isStatic?"static ":"")+(n||a.name),i,": ",o.createElement(ie,{type:a.type,references:s}))}function te(e,t){void 0===t&&(t=e.name);var a=e.parameters||[],n="";return"Get signature"!==e.kindString&&(n="("+a.map((function(e,t){return(e.flags.isRest?"...":"")+e.name})).join(", ")+")"),""+t+n+": "+ce(e.type)}function ae(e){var t,a=e.param,n=e.index,s=e.references;return t=a.flags.isRest&&a.type.elementType?0===n?o.createElement("p",null,o.createElement("strong",null,"Each parameter")," is a ",o.createElement(ie,{type:a.type.elementType,references:s})," and are ",o.createElement(re,{param:a,isRest:!0,references:s})):o.createElement("p",null,o.createElement("strong",null,"Each other parameter")," is a ",o.createElement(ie,{type:a.type.elementType,references:s})," and are ",o.createElement(re,{param:a,isRest:!0,references:s})):o.createElement("p",null,"The ",o.createElement("strong",null,function(e){return w[e]}(n)," parameter")," is",a.flags.isOptional?" optional and is":""," a ",o.createElement(ie,{type:a.type,references:s})," and ",o.createElement(re,{param:a,references:s})),t}function ne(e){var t,a=e.member;if(null==(t=a.comment)||!t.tags)return"";var n=a.comment.tags.filter((function(e){return"example"===e.tag}));return n.length>0?o.createElement("div",null,o.createElement("h4",null,"Examples"),n.map((function(e,t){return o.createElement(oe,{key:t,example:e})}))):""}function oe(e){var t=e.example.text,a=t.indexOf("\n"),n=t.substring(0,a),s=t.substring(a+1);return o.createElement(r.Z,{language:"typescript",title:n.trim()},s.trim())}function se(e,t){var a;return void 0===t&&(t=e.name),a=e.typeReference?e.typeReference:ce(e.type),t+(e.flags.isOptional?"?":"")+": "+a}function re(e){var t=e.param,a=e.isRest,n=e.references;return o.createElement(Y,{remarkPlugins:[v],references:n},function(e,t){var a=$(e.comment);if(!a)return"";(a=a.slice(0,1).toLowerCase()+a.slice(1)).startsWith("the")&&!t&&(a="is "+a);return a}(t,a))}function ie(e){var t=e.type,a=e.references,n=e.isInUnionOrArray;if("intrinsic"===t.type)return o.createElement("span",null,t.name);if(t.name){if("Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return o.createElement(o.Fragment,null,"Promise<",o.createElement(ie,{type:t.typeArguments[0],references:a}),">");if("Partial"===t.name&&"Partial"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return o.createElement(o.Fragment,null,o.createElement("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"Partial"),"<",o.createElement(ie,{type:t.typeArguments[0],references:a}),">");var s="#"+t.name,r=t.id?null==a?void 0:a["id-"+t.id]:null;if(r){var i=null==a?void 0:a[r];i&&(s=(0,d.Z)(i)+"#"+r)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry");return o.createElement(g.Z,{href:s},t.name)}if("union"===t.type)return o.createElement("span",null,"(",t.types.map((function(e,t){return o.createElement(o.Fragment,{key:t},t>0?" | ":"",o.createElement(ie,{type:e,references:a,isInUnionOrArray:!0}))})),")");if("array"===t.type)return o.createElement(o.Fragment,null,o.createElement(ie,{type:t.elementType,references:a,isInUnionOrArray:!0}),"[]");if("literal"===t.type)return"string"==typeof t.value?o.createElement("span",null,'"',t.value,'"'):"number"==typeof t.value?o.createElement("span",null,t.value):"boolean"==typeof t.value?o.createElement("span",null,t.value?"true":"false"):void 0===t.value?o.createElement("span",null,"undefined"):null===t.value?o.createElement("span",null,"null"):""+JSON.stringify(t);if("reflection"===t.type){var c=t.declaration;if("Type literal"===c.kindString&&c.signatures&&!c.children){var l,u=null!=(l=ke(c.signatures))?l:c.signatures[0],m=u.parameters||[];return o.createElement(o.Fragment,null,o.createElement("span",null,n?"(":"","(",m.map((function(e,t){return o.createElement("span",{key:t},t>0?",":"",e.name,": ",o.createElement(ie,{type:e.type,references:a}))})),") => ",o.createElement(ie,{type:u.type,references:a}),n?")":""))}return"object"}return""+JSON.stringify(t)}function ce(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+ce(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((function(e){return ce(e)})).join(" | ")+")":"array"===e.type?ce(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function le(e){return ue(e)||ge(e)}function ue(e){return e&&de(e.type)}function de(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((function(e){return"Call signature"===e.kindString}))}function ge(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((function(e){return de(e)}))}function me(e){return e&&"Call signature"===e.kindString}function pe(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&"Type literal"===e.type.declaration.kindString&&e.type.declaration.children}function he(e,t){var a,n,o=null==(a=e.comment)||null==(n=a.tags)?void 0:n.find((function(e){return e.tag===t}));return o?o.text.trim():null}function fe(e){if(e)for(var t,a=(0,n.Z)(e);!(t=a()).done;){var o=he(t.value,"docname");if(o)return o.trim()}return null}function be(e){if(ue(e)){var t,a=null==e||null==(t=e.type)?void 0:t.declaration,o=Re(null==a?void 0:a.signatures);if(o)return o}else if(ge(e))for(var s,r=e.type.types,i=(0,n.Z)(r);!(s=i()).done;){var c=s.value;if(de(c)){var l=Re(c.declaration.signatures);if(l)return l}}else if(me(e)){var u=Re([e]);if(u)return u}return"99-default"}function ye(e){if("Method"===e.kindString){var t=fe(e.signatures);if(t)return t}else if(ue(e)){var a,o=null==e||null==(a=e.type)?void 0:a.declaration,s=fe(null==o?void 0:o.signatures);if(s)return s}else if(ge(e))for(var r,i=e.type.types,c=(0,n.Z)(i);!(r=c()).done;){var l=r.value;if(de(l)){var u=fe(l.declaration.signatures);if(u)return u}}else if(me(e)){var d=fe([e]);if(d)return d}return he(g=e,"docname")||g.name;var g}function ve(e){var t=he(e,"docid");if(t)return t;var a,n,o=(a="docid",n=[],k(e,(function(e,t,o){"comment"===o&&n.push.apply(n,e.tags.filter((function(e){return e.tag===a})))})),n);return o.length>0?o[0].text.trim():ye(e)}function Re(e){if(e)for(var t,a=(0,n.Z)(e);!(t=a()).done;){var o=he(t.value,"docgroup");if(o)return o.trim()}return null}function ke(e){for(var t,a=(0,n.Z)(e);!(t=a()).done;){var o=t.value;if(he(o,"docgroup"))return o}return null}function Se(e){for(var t,a=e.type.types,o=null,s=(0,n.Z)(a);!(t=s()).done;){var r=t.value;if(de(r)){var i=r.declaration.signatures;o||(o=i[0]);var c=ke(i);if(c)return c}}return o}function Te(e){for(var t,a,o=(t="Call signature",S(e,(function(e){return e.kindString===t}))),s=(0,n.Z)(o);!(a=s()).done;){var r=he(a.value,"docgrouptitle");if(r)return r.trim()}return null}function we(e){for(var t,a=(0,n.Z)(e.children);!(t=a()).done;){var o=Te(t.value.child);if(o)return o}return e.group}function Ee(e){if("Call signature"===e.kindString)return me(e)||le(e)||pe(e)?[{group:be(e),name:ye(e),reflection:e,child:e}]:[];if("Type alias"===e.kindString||"Get signature"===e.kindString||"Set signature"===e.kindString)return[];var t=e.type.declaration.children.filter((function(e){return me(e)||le(e)||pe(e)})),a=null!==he(e,"hiddennamespace")?null:e.name;return(0,c.flatMap)(t,(function(t){return le(t)?{group:be(t),name:ye(t),namespace:a,reflection:e,child:t}:Ee(t)}))}function xe(e){var t=Ee(e),a=(0,c.groupBy)(t,(function(e){return e.group})),n=[];for(var o in a)n.push({group:o,children:a[o]});return n=(0,c.sortBy)(n,(function(e){return e.group}))}},1359:function(e,t,a){a.r(t),a.d(t,{assets:function(){return g},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var n=a(3117),o=a(102),s=(a(7294),a(3905)),r=JSON.parse('{"hash":"actions/debuggers","pageTitle":"Debugger Actions","pageDescription":"Debugger actions are useful for simulating bots in isolation from the rest of the inst.","pageSidebarLabel":"Debuggers","contents":[{"id":407,"order":9999,"name":"assert","reflection":{"id":407,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verifies that the given condition is true.\\nIf it is not, then an error is thrown with the given message.\\nThis function is useful for automated testing since tests should ideally throw an error if the test fails.\\nIt can also be useful to make sure that some important code is only run if a precondition is met.","tags":[{"tag":"example","paramName":"","text":"Assert that the tag color is \\"blue\\"\\nassert(tags.color === \\"blue\\", \\"The tag color is not blue!\\");\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"docname","paramName":"","text":"assert\\n"}]},"parameters":[{"id":408,"name":"condition","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the condition that should be verified.","tags":[]},"type":{"type":"intrinsic","name":"boolean"}},{"id":409,"name":"message","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the message that should be included in the error.\\n","tags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"shortText":"Verifies that the given condition is true.\\nIf it is not, then an error is thrown with the given message.\\nThis function is useful for automated testing since tests should ideally throw an error if the test fails.\\nIt can also be useful to make sure that some important code is only run if a precondition is met.","text":"","tags":[{"tagName":"example","paramName":"","text":"Assert that the tag color is \\"blue\\"\\nassert(tags.color === \\"blue\\", \\"The tag color is not blue!\\");\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"docname","paramName":"","text":"assert\\n"}]},"group":null},{"id":412,"order":9999,"name":"assertEqual","reflection":{"id":412,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Verifies that the given values are equal to each other.\\nIf they are not, then an error is thrown.\\nThis function is useful for automated testing since tests should ideally throw an error if the test fails.\\nIt can also be useful to make sure that some important code is only run if a precondition is met.","tags":[{"tag":"example","paramName":"","text":"Assert that the tag color is \\"blue\\"\\nassertEqual(tags.color, \\"blue\\");\\n"},{"tag":"example","paramName":"","text":"Assert that the bot contains some specific tag values\\nassertEqual(tags, {\\n    color: \\"blue\\",\\n    home: true,\\n    homeX: 0,\\n    homeY: 0\\n});\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"docname","paramName":"","text":"assertEqual\\n"}]},"parameters":[{"id":413,"name":"first","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The first value to test.","tags":[]},"type":{"type":"intrinsic","name":"any"}},{"id":414,"name":"second","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The second value to test.\\n","tags":[]},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"}},"comment":{"shortText":"Verifies that the given values are equal to each other.\\nIf they are not, then an error is thrown.\\nThis function is useful for automated testing since tests should ideally throw an error if the test fails.\\nIt can also be useful to make sure that some important code is only run if a precondition is met.","text":"","tags":[{"tagName":"example","paramName":"","text":"Assert that the tag color is \\"blue\\"\\nassertEqual(tags.color, \\"blue\\");\\n"},{"tagName":"example","paramName":"","text":"Assert that the bot contains some specific tag values\\nassertEqual(tags, {\\n    color: \\"blue\\",\\n    home: true,\\n    homeX: 0,\\n    homeY: 0\\n});\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"docname","paramName":"","text":"assertEqual\\n"}]},"group":null},{"id":1287,"order":9999,"name":"os.attachDebugger","reflection":{"id":1287,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Attaches the given debugger to the CasualOS frontend. This causes the given debugger to be treated like another inst that has been loaded simultaneously with the current inst. This feature makes it useful for inspecting the bots in a debugger or even for setting up a sandbox that you control.","text":"Note that because debuggers are entirely separate environments, the debugger gets its own configBot and portal bots. This means that in order for bots to show up in the portals, you need to set the corresponding portal on the debugger\'s configBot. For portals that are stored in the URL (like the gridPortal), this is done automatically. But for other portals (like the miniGridPortal or the wrist portals), you need to manage this manually.\\n\\nReturns a promise that resolves when the debugger has been attached.\\n","tags":[{"tag":"example","paramName":"","text":"Create and attach a debugger\\nconst debug = await os.createDebugger();\\n\\n// Create a bot in the debugger.\\ndebug.create({\\n    home: true\\n    label: \'Test\'\\n});\\n\\n// Attach the debugger to CasualOS.\\nawait os.attachDebugger(debug);\\n"},{"tag":"example","paramName":"","text":"Attach a debugger with a tag mapper that renames \\"home\\" tags to \\"testHome\\"\\nconst debug = await os.createDebugger();\\n\\n// Create a bot in the debugger.\\ndebug.create({\\n    home: true\\n    label: \'Test\'\\n});\\n\\n// Attach the debugger to CasualOS.\\n// Because we\'re providing a tag mapper, the frontend won\'t see the \\"home\\" tag in debugger bots,\\n// instead it will see \\"testHome\\" tags.\\nawait os.attachDebugger(debug, {\\n    tagNameMapper: {\\n        forward: (tag) => {\\n            if (tag.startsWith(\'home\')) {\\n                return `testHome${tag.slice(\'home\'.length)}`;\\n            }\\n\\n            return tag;\\n        },\\n        reverse: (tag) => {\\n            if (tag.startsWith(\'testHome\')) {\\n                return tag.slice(\'testHome\'.length);\\n            }\\n\\n            return tag;\\n        }\\n    }\\n});\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"docname","paramName":"","text":"os.attachDebugger\\n"}]},"parameters":[{"id":1288,"name":"debug","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the debugger that you want to be attached to the runtime.","tags":[]},"type":{"type":"reference","id":2242,"name":"Debugger"}},{"id":1289,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the options that should be used to attach the debugger.\\n","tags":[]},"type":{"type":"reference","id":2478,"name":"AttachDebuggerOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}},"comment":{"shortText":"Attaches the given debugger to the CasualOS frontend. This causes the given debugger to be treated like another inst that has been loaded simultaneously with the current inst. This feature makes it useful for inspecting the bots in a debugger or even for setting up a sandbox that you control.","text":"Note that because debuggers are entirely separate environments, the debugger gets its own configBot and portal bots. This means that in order for bots to show up in the portals, you need to set the corresponding portal on the debugger\'s configBot. For portals that are stored in the URL (like the gridPortal), this is done automatically. But for other portals (like the miniGridPortal or the wrist portals), you need to manage this manually.\\n\\nReturns a promise that resolves when the debugger has been attached.\\n","tags":[{"tagName":"example","paramName":"","text":"Create and attach a debugger\\nconst debug = await os.createDebugger();\\n\\n// Create a bot in the debugger.\\ndebug.create({\\n    home: true\\n    label: \'Test\'\\n});\\n\\n// Attach the debugger to CasualOS.\\nawait os.attachDebugger(debug);\\n"},{"tagName":"example","paramName":"","text":"Attach a debugger with a tag mapper that renames \\"home\\" tags to \\"testHome\\"\\nconst debug = await os.createDebugger();\\n\\n// Create a bot in the debugger.\\ndebug.create({\\n    home: true\\n    label: \'Test\'\\n});\\n\\n// Attach the debugger to CasualOS.\\n// Because we\'re providing a tag mapper, the frontend won\'t see the \\"home\\" tag in debugger bots,\\n// instead it will see \\"testHome\\" tags.\\nawait os.attachDebugger(debug, {\\n    tagNameMapper: {\\n        forward: (tag) => {\\n            if (tag.startsWith(\'home\')) {\\n                return `testHome${tag.slice(\'home\'.length)}`;\\n            }\\n\\n            return tag;\\n        },\\n        reverse: (tag) => {\\n            if (tag.startsWith(\'testHome\')) {\\n                return tag.slice(\'testHome\'.length);\\n            }\\n\\n            return tag;\\n        }\\n    }\\n});\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"docname","paramName":"","text":"os.attachDebugger\\n"}]},"group":null},{"id":1276,"order":9999,"name":"os.createDebugger-normal","reflection":{"id":1276,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a debug environment that can be used to simulate bots in isolation from the rest of the inst.\\nReturns a promise that resolves with an object that contains all of the action functions.","text":"One of the special things about debug environments is that the bots in the environment are totally isolated from regular bots.\\nThis means that functions like [`getBots(...filters)`](ref:getbots-filters) can only access bots that have been created in the debugger and actions like [`os.toast(message, duration)`](ref:os.toast) don\'t do anything automatically.\\nThis can be useful for automated testing where you want to see what some bots will do without actually letting them do anything.\\n\\nAdditionally, debuggers can be configured to be pausable (see [`os.createDebugger(options)`](ref:os.createDebugger-pausable)).\\nThis allows you to set pause triggers (also known as breakpoints) that temporarily stop the debugger at a specific location in a listener and allows you to inspect the current state of the script. Pausable debuggers work like normal debuggers, except that some specific functions return promises instead of a result. This is because those functions can trigger user code that could trigger a pause. When this is possible, the debugger returns a promise to your host code so you can properly handle the pause. (See the examples below for more information)\\n\\nThe returned object can be used to create/find bots in the debug environment and simulate interactions. The debug environment also contains several functions that make it easy to observe what has happened inside the environment and therefore determine if everything was performed correctly.\\n","tags":[{"tag":"example","paramName":"","text":"Create a normal debugger and copy this bot into it.\\n// Note: variables cannot be named \\"debugger\\" so we use the name \\"debug\\" instead.\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create(thisBot);\\n"},{"tag":"example","paramName":"","text":"Test a script in the debugger\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create({\\n    test: \'@tags.hit = true;\'\\n});\\ndebug.shout(\'test\');\\n\\nif (debuggerBot.tags.hit) {\\n    os.toast(\'Success!\');\\n} else {\\n    os.toast(\'Failed!\');\\n}\\n"},{"tag":"example","paramName":"","text":"Find out what actions a script performs\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create({\\n    test: \'@os.toast(\\"hello!\\")\'\\n});\\ndebug.shout(\'test\');\\n\\nconst actions = debug.getCommonActions();\\nos.toast(actions);\\n"},{"tag":"example","paramName":"","text":"Create a debugger with a custom configBot\\nconst debug = await os.createDebugger({\\n    configBot: {\\n        test: \'@console.log(\\"Hello, World!\\");\'\\n    }\\n});\\ndebug.shout(\'test\');\\n"},{"tag":"example","paramName":"","text":"Mask the web.get() function.\\nconst debug = await os.createDebugger();\\nlet url = \\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/The_star_formation_region_Messier_17.jpg/1200px-The_star_formation_region_Messier_17.jpg\\";\\nconst debuggerBot = debug.create({\\n    url,\\n    test: \'@return await web.get(tags.url)\'\\n});\\n\\ndebug.web.get.mask(url)\\n    .returns({\\n        data: \'test data\',\\n        status: 200\\n    });\\n\\nconst [result] = debug.shout(\'test\');\\n\\nassertEqual(result, {\\n    data: \'test data\',\\n    status: 200\\n});\\nos.toast(\\"Success!\\");\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"doctitle","paramName":"","text":"Debugger Actions"},{"tag":"docsidebar","paramName":"","text":"Debuggers"},{"tag":"docdescription","paramName":"","text":"Debugger actions are useful for simulating bots in isolation from the rest of the inst."},{"tag":"docname","paramName":"","text":"os.createDebugger"},{"tag":"docid","paramName":"","text":"os.createDebugger-normal\\n"}]},"parameters":[{"id":1277,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"the options that should be used to configure the debugger.\\n","tags":[]},"type":{"type":"reference","id":2450,"name":"NormalDebuggerOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2243,"name":"Debugger"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}},"comment":{"shortText":"Creates a debug environment that can be used to simulate bots in isolation from the rest of the inst.\\nReturns a promise that resolves with an object that contains all of the action functions.","text":"One of the special things about debug environments is that the bots in the environment are totally isolated from regular bots.\\nThis means that functions like {@link getbots-filters} can only access bots that have been created in the debugger and actions like {@link os.toast} don\'t do anything automatically.\\nThis can be useful for automated testing where you want to see what some bots will do without actually letting them do anything.\\n\\nAdditionally, debuggers can be configured to be pausable (see {@link os.createDebugger-pausable}).\\nThis allows you to set pause triggers (also known as breakpoints) that temporarily stop the debugger at a specific location in a listener and allows you to inspect the current state of the script. Pausable debuggers work like normal debuggers, except that some specific functions return promises instead of a result. This is because those functions can trigger user code that could trigger a pause. When this is possible, the debugger returns a promise to your host code so you can properly handle the pause. (See the examples below for more information)\\n\\nThe returned object can be used to create/find bots in the debug environment and simulate interactions. The debug environment also contains several functions that make it easy to observe what has happened inside the environment and therefore determine if everything was performed correctly.\\n","tags":[{"tagName":"example","paramName":"","text":"Create a normal debugger and copy this bot into it.\\n// Note: variables cannot be named \\"debugger\\" so we use the name \\"debug\\" instead.\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create(thisBot);\\n"},{"tagName":"example","paramName":"","text":"Test a script in the debugger\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create({\\n    test: \'@tags.hit = true;\'\\n});\\ndebug.shout(\'test\');\\n\\nif (debuggerBot.tags.hit) {\\n    os.toast(\'Success!\');\\n} else {\\n    os.toast(\'Failed!\');\\n}\\n"},{"tagName":"example","paramName":"","text":"Find out what actions a script performs\\nconst debug = await os.createDebugger();\\nconst debuggerBot = debug.create({\\n    test: \'@os.toast(\\"hello!\\")\'\\n});\\ndebug.shout(\'test\');\\n\\nconst actions = debug.getCommonActions();\\nos.toast(actions);\\n"},{"tagName":"example","paramName":"","text":"Create a debugger with a custom configBot\\nconst debug = await os.createDebugger({\\n    configBot: {\\n        test: \'@console.log(\\"Hello, World!\\");\'\\n    }\\n});\\ndebug.shout(\'test\');\\n"},{"tagName":"example","paramName":"","text":"Mask the web.get() function.\\nconst debug = await os.createDebugger();\\nlet url = \\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/The_star_formation_region_Messier_17.jpg/1200px-The_star_formation_region_Messier_17.jpg\\";\\nconst debuggerBot = debug.create({\\n    url,\\n    test: \'@return await web.get(tags.url)\'\\n});\\n\\ndebug.web.get.mask(url)\\n    .returns({\\n        data: \'test data\',\\n        status: 200\\n    });\\n\\nconst [result] = debug.shout(\'test\');\\n\\nassertEqual(result, {\\n    data: \'test data\',\\n    status: 200\\n});\\nos.toast(\\"Success!\\");\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"doctitle","paramName":"","text":"Debugger Actions"},{"tagName":"docsidebar","paramName":"","text":"Debuggers"},{"tagName":"docdescription","paramName":"","text":"Debugger actions are useful for simulating bots in isolation from the rest of the inst."},{"tagName":"docname","paramName":"","text":"os.createDebugger"},{"tagName":"docid","paramName":"","text":"os.createDebugger-normal\\n"}]},"group":null},{"id":1280,"order":9999,"name":"os.createDebugger-pausable","reflection":{"id":1280,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a pausable debug environment that can be used to simulate bots in isolation from the rest of the inst.\\nReturns a promise that resolves with an object that contains all of the action functions.","text":"One of the special things about debug environments is that the bots in the environment are totally isolated from regular bots.\\nThis means that functions like [`getBots(...filters)`](ref:getbots-filters) can only access bots that have been created in the debugger and actions like [`os.toast(message, duration)`](ref:os.toast) don\'t do anything automatically.\\nThis can be useful for automated testing where you want to see what some bots will do without actually letting them do anything.\\n\\nPausable debuggers allow you to set pause triggers (also known as breakpoints) that temporarily stop the debugger at a specific location in a listener and allows you to inspect the current state of the script. Pausable debuggers work like normal debuggers, except that some specific functions return promises instead of a result. This is because those functions can trigger user code that could trigger a pause. When this is possible, the debugger returns a promise to your host code so you can properly handle the pause. (See the examples below for more information)\\n\\nThe returned object can be used to create/find bots in the debug environment and simulate interactions. The debug environment also contains several functions that make it easy to observe what has happened inside the environment and therefore determine if everything was performed correctly.\\n","tags":[{"tag":"example","paramName":"","text":"Create a pausable debugger\\nconst debug = await os.createDebugger({\\n    pausable: true\\n});\\n\\n// Register a listener that gets called whenever a pause happens in this debugger.\\ndebug.onPause(pause => {\\n    // Get the current stack frame from the pause\\n    const currentFrame = pause.callStack[pause.callStack.length - 1];\\n\\n    // Set the abc variable to 999\\n    currentFrame.setVariableValue(\'abc\', 999);\\n\\n    // Resume execution after the pause.\\n    debug.resume(pause);\\n});\\n\\n// Because the debugger is pausable, the create() function returns a promise\\n// because it calls @onCreate which could cause a pause trigger to be hit.\\nconst debuggerBot = await debug.create({\\n    test: \'@let abc = 123; os.toast(abc);\'\\n});\\n\\n// Set a pause trigger in the \\"test\\" script of the bot we just created\\n// at line 1 column 16\\nconst trigger = debug.setPauseTrigger(debuggerBot, \'test\', {\\n    lineNumber: 1,\\n    columnNumber: 16\\n});\\n\\n// Send a shout. Just like the create() function above, we recieve a promise that we can await.\\nawait debug.shout(\'test\');\\n\\n// Get the resulting actions from the debugger\\n// and perform the first one. This should be the os.toast(), but instead of printing 123,\\n// it should print 999 because we changed the value of abc during the debugger pause.\\nconst actions = debug.getCommonActions();\\naction.perform(actions[0]);\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"docname","paramName":"","text":"os.createDebugger"},{"tag":"docid","paramName":"","text":"os.createDebugger-pausable\\n"}]},"parameters":[{"id":1281,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"the options that should be used to configure the debugger.\\n","tags":[]},"type":{"type":"reference","id":2455,"name":"PausableDebuggerOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2299,"name":"PausableDebugger"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}},"comment":{"shortText":"Creates a pausable debug environment that can be used to simulate bots in isolation from the rest of the inst.\\nReturns a promise that resolves with an object that contains all of the action functions.","text":"One of the special things about debug environments is that the bots in the environment are totally isolated from regular bots.\\nThis means that functions like {@link getbots-filters} can only access bots that have been created in the debugger and actions like {@link os.toast} don\'t do anything automatically.\\nThis can be useful for automated testing where you want to see what some bots will do without actually letting them do anything.\\n\\nPausable debuggers allow you to set pause triggers (also known as breakpoints) that temporarily stop the debugger at a specific location in a listener and allows you to inspect the current state of the script. Pausable debuggers work like normal debuggers, except that some specific functions return promises instead of a result. This is because those functions can trigger user code that could trigger a pause. When this is possible, the debugger returns a promise to your host code so you can properly handle the pause. (See the examples below for more information)\\n\\nThe returned object can be used to create/find bots in the debug environment and simulate interactions. The debug environment also contains several functions that make it easy to observe what has happened inside the environment and therefore determine if everything was performed correctly.\\n","tags":[{"tagName":"example","paramName":"","text":"Create a pausable debugger\\nconst debug = await os.createDebugger({\\n    pausable: true\\n});\\n\\n// Register a listener that gets called whenever a pause happens in this debugger.\\ndebug.onPause(pause => {\\n    // Get the current stack frame from the pause\\n    const currentFrame = pause.callStack[pause.callStack.length - 1];\\n\\n    // Set the abc variable to 999\\n    currentFrame.setVariableValue(\'abc\', 999);\\n\\n    // Resume execution after the pause.\\n    debug.resume(pause);\\n});\\n\\n// Because the debugger is pausable, the create() function returns a promise\\n// because it calls @onCreate which could cause a pause trigger to be hit.\\nconst debuggerBot = await debug.create({\\n    test: \'@let abc = 123; os.toast(abc);\'\\n});\\n\\n// Set a pause trigger in the \\"test\\" script of the bot we just created\\n// at line 1 column 16\\nconst trigger = debug.setPauseTrigger(debuggerBot, \'test\', {\\n    lineNumber: 1,\\n    columnNumber: 16\\n});\\n\\n// Send a shout. Just like the create() function above, we recieve a promise that we can await.\\nawait debug.shout(\'test\');\\n\\n// Get the resulting actions from the debugger\\n// and perform the first one. This should be the os.toast(), but instead of printing 123,\\n// it should print 999 because we changed the value of abc during the debugger pause.\\nconst actions = debug.getCommonActions();\\naction.perform(actions[0]);\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"docname","paramName":"","text":"os.createDebugger"},{"tagName":"docid","paramName":"","text":"os.createDebugger-pausable\\n"}]},"group":null},{"id":1284,"order":9999,"name":"os.getExecutingDebugger","reflection":{"id":1284,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the debugger that is currently executing the script. Returns null if the script is not running in a debugger.","tags":[{"tag":"example","paramName":"","text":"Get the debugger that this script is running in\\nconst debug = os.getExecutingDebugger();\\nconsole.log(debug);\\n"},{"tag":"dochash","paramName":"","text":"actions/debuggers"},{"tag":"docname","paramName":"","text":"os.getExecutingDebugger\\n"}]},"type":{"type":"reference","id":2242,"name":"Debugger"}},"comment":{"shortText":"Gets the debugger that is currently executing the script. Returns null if the script is not running in a debugger.","text":"","tags":[{"tagName":"example","paramName":"","text":"Get the debugger that this script is running in\\nconst debug = os.getExecutingDebugger();\\nconsole.log(debug);\\n"},{"tagName":"dochash","paramName":"","text":"actions/debuggers"},{"tagName":"docname","paramName":"","text":"os.getExecutingDebugger\\n"}]},"group":null}],"references":{"Quaternion":"types/math/rotations","id-3179":"Quaternion","Rotation":"types/math/rotations","id-3211":"Rotation","Vector2":"types/math/vectors","id-3045":"Vector2","Vector3":"types/math/vectors","id-3102":"Vector3","AddCountFailure":"types/records/events","id-2992":"AddCountFailure","AddCountSuccess":"types/records/events","id-2987":"AddCountSuccess","AnimateTagOptions":"types/animation","id-2103":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-2478":"AttachDebuggerOptions","CasualOSDevice":"types/os","id-2811":"CasualOSDevice","CasualOSVersion":"types/os","id-2803":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-3257":"AxisAndAngle","BotTagMasks":"types/core","id-2780":"BotTagMasks","BotTags":"types/core","id-2695":"BotTags","BotState":"types/core","id-2793":"BotState","CompiledBotListeners":"types/core","id-2774":"CompiledBotListeners","ConvertGeolocationToWhat3WordsOptions":"types/os","id-2513":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-2825":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-2821":"CreatePublicRecordKeySuccess","DebuggerCallFrame":"types/debuggers/common","id-2431":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-2466":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-2460":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-2439":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-2445":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-2472":"DebuggerVariable","EnableXROptions":"types/os","id-2587":"EnableXROptions","EraseDataFailure":"types/records/data","id-2960":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-2956":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-2982":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-2978":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-3260":"EulerAnglesRotation","FocusOnOptions":"types/os","id-2547":"FocusOnOptions","FocusOnRotation":"types/os","id-2559":"FocusOnRotation","FormAnimationData":"types/os","id-2605":"FormAnimationData","FromToRotation":"types/math/rotations","id-3254":"FromToRotation","GetCountFailure":"types/records/events","id-3003":"GetCountFailure","GetCountSuccess":"types/records/events","id-2997":"GetCountSuccess","GetDataFailure":"types/records/data","id-2951":"GetDataFailure","GetDataSuccess":"types/records/data","id-2942":"GetDataSuccess","GetRoomOptionsFailure":"types/os","id-2193":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os","id-2189":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os","id-2236":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os","id-2231":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os","id-2212":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os","id-2207":"GetRoomTrackOptionsSuccess","GrantMarkerPermissionFailure":"types/records/policies","id-3031":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-3029":"GrantMarkerPermissionSuccess","GrantRoleFailure":"types/records/roles","id-3017":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-3015":"GrantRoleSuccess","ImageClassifierOptions":"types/os","id-2565":"ImageClassifierOptions","InstUpdate":"types/os","id-2816":"InstUpdate","JoinRoomFailure":"types/os","id-2174":"JoinRoomFailure","JoinRoomSuccess":"types/os","id-2171":"JoinRoomSuccess","LeaveRoomFailure":"types/os","id-2183":"LeaveRoomFailure","LeaveRoomSuccess":"types/os","id-2180":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-2973":"ListDataFailure","ListDataSuccess":"types/records/data","id-2965":"ListDataSuccess","LookRotation":"types/math/rotations","id-3277":"LookRotation","MediaPermissionOptions":"types/os","id-2584":"MediaPermissionOptions","Debugger":"types/debuggers/debugger","id-2243":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-2450":"NormalDebuggerOptions","ParsedBotLink":"types/core","id-2799":"ParsedBotLink","PartialBotState":"types/core","id-2796":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-2299":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-2455":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-2418":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-2426":"PauseTriggerOptions","PossiblePauseTriggerLocation":"types/debuggers/common","id-2413":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-2480":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-3270":"QuaternionRotation","RaycastRay":"types/os","id-2167":"RaycastRay","RaycastResult":"types/os","id-2164":"RaycastResult","RecordActionOptions":"types/records/extra","id-2496":"RecordActionOptions","RecordDataFailure":"types/records/data","id-2937":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-2933":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-2134":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-2130":"RecordFileSuccess","RegisterPrefixOptions":"types/core","id-2644":"RegisterPrefixOptions","RevokeMarkerPermissionFailure":"types/records/policies","id-3038":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-3036":"RevokeMarkerPermissionSuccess","RevokeRoleFailure":"types/records/roles","id-3024":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-3022":"RevokeRoleSuccess","RoomJoinOptions":"types/os","id-2610":"RoomJoinOptions","RoomOptions":"types/os","id-2619":"RoomOptions","RoomRemoteOptions":"types/os","id-2635":"RoomRemoteOptions","RoomTrackOptions":"types/os","id-2623":"RoomTrackOptions","RuntimeBot":"types/core","id-2647":"RuntimeBot","RuntimeBotLinks":"types/core","id-2786":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-2783":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-3268":"SequenceRotation","SetRoomOptionsSuccess":"types/os","id-2198":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os","id-2641":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os","id-2224":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os","id-2219":"SetRoomTrackOptionsSuccess","ShareOptions":"types/os","id-2543":"ShareOptions","ShowChatOptions":"types/os","id-2537":"ShowChatOptions","ShowConfirmOptions":"types/os","id-2579":"ShowConfirmOptions","ShowInputOptions":"types/os","id-2570":"ShowInputOptions","SnapAxis":"types/os","id-2517":"SnapAxis","SnapGridTarget":"types/os","id-2139":"SnapGridTarget","SnapPoint":"types/os","id-2529":"SnapPoint","StartFormAnimationOptions":"types/os","id-2589":"StartFormAnimationOptions","StopFormAnimationOptions":"types/os","id-2602":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os","id-2499":"SuccessfulGeolocation","UnsuccessfulGeolocation":"types/os","id-2509":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-3010":"UpdateEventRecordFailure","UpdateEventRecordSuccess":"types/records/events","id-3008":"UpdateEventRecordSuccess","UploadedFile":"types/os","id-2160":"UploadedFile","WebhookOptions":"types/web","id-2084":"WebhookOptions","WebhookResult":"types/web","id-2096":"WebhookResult","AddCountResult":"types/records/events","id-2986":"AddCountResult","AvailablePermissions":"types/permissions","id-2830":"AvailablePermissions","BarcodeFormat":"types/os","id-2564":"BarcodeFormat","BotFilter":"types/core","id-2118":"BotFilter","BotSpace":"types/core","id-2770":"BotSpace","CameraType":"types/os","id-2563":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-2820":"CreatePublicRecordKeyResult","EraseDataResult":"types/records/data","id-2955":"EraseDataResult","EraseFileResult":"types/records/files","id-2977":"EraseFileResult","Geolocation":"types/os","id-2498":"Geolocation","GetCountResult":"types/records/events","id-2996":"GetCountResult","GetDataResult":"types/records/data","id-2941":"GetDataResult","GetRoomOptionsResult":"types/os","id-2188":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os","id-2230":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os","id-2206":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-3028":"GrantMarkerPermissionResult","GrantRoleResult":"types/records/roles","id-3014":"GrantRoleResult","JoinRoomResult":"types/os","id-2170":"JoinRoomResult","LeaveRoomResult":"types/os","id-2179":"LeaveRoomResult","ListDataResult":"types/records/data","id-2964":"ListDataResult","Mod":"types/core","id-2113":"Mod","PortalType":"types/core","id-2802":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-2417":"PossiblePauseTriggerStates","RecordDataResult":"types/records/data","id-2932":"RecordDataResult","RecordFileResult":"types/records/files","id-2129":"RecordFileResult","RevokeMarkerPermissionResult":"types/records/policies","id-3035":"RevokeMarkerPermissionResult","RevokeRoleResult":"types/records/roles","id-3021":"RevokeRoleResult","SetRoomOptionsResult":"types/os","id-2197":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os","id-2218":"SetRoomTrackOptionsResult","SnapTarget":"types/os","id-2536":"SnapTarget","TagFilter":"types/core","id-2114":"TagFilter","UpdateEventRecordResult":"types/records/events","id-3007":"UpdateEventRecordResult","animateTag-byOptions":"actions/utility","id-364":"animateTag-byOptions","getbot-tag":"actions/data","id-33":"getbot-tag","getbots-tag":"actions/data","id-17":"getbots-tag","animateTag-byTag":"actions/utility","id-358":"animateTag-byTag","changeState":"actions/data","id-177":"changeState","create":"actions/data","id-162":"create","destroy":"actions/data","id-166":"destroy","getbot-filters":"actions/data","id-26":"getbot-filters","getbots-filters":"actions/data","id-10":"getbots-filters","priorityShout":"actions/event","id-225":"priorityShout","shout":"actions/event","id-237":"shout","updateBotLinks":"actions/data","id-198":"updateBotLinks","whisper":"actions/event","id-263":"whisper","action.perform":"actions/event","id-1589":"action.perform","action.reject":"actions/event","id-1593":"action.reject","applyDiffToSnapshot":"actions/data","id-83":"applyDiffToSnapshot","applyMod":"actions/mods","id-152":"applyMod","assert":"actions/debuggers","id-407":"assert","assertEqual":"actions/debuggers","id-412":"assertEqual","atPosition":"actions/bot-filters","id-293":"atPosition","byCreator":"actions/bot-filters","id-314":"byCreator","byID":"actions/bot-filters","id-281":"byID","byMod":"actions/bot-filters","id-285":"byMod","bySpace":"actions/bot-filters","id-310":"bySpace","byTag":"actions/bot-filters","id-276":"byTag","bytes.fromBase64String":"actions/bytes","id-1817":"bytes.fromBase64String","bytes.fromHexString":"actions/bytes","id-1825":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-1813":"bytes.toBase64String","bytes.toHexString":"actions/bytes","id-1821":"bytes.toHexString","clearAnimations":"actions/utility","id-378":"clearAnimations","clearTagMasks":"actions/data","id-106":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-1831":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-1837":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-1868":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-1861":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-1926":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-1921":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-1932":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-1917":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-1913":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-1897":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-1887":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-1892":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-1907":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-1936":"crypto.keypair","crypto.sha256":"actions/crypto","id-1853":"crypto.sha256","crypto.sha512":"actions/crypto","id-1857":"crypto.sha512","crypto.sign":"actions/crypto","id-1940":"crypto.sign","deleteTagMaskText":"actions/data","id-133":"deleteTagMaskText","deleteTagText":"actions/data","id-126":"deleteTagText","diffSnapshots":"actions/data","id-78":"diffSnapshots","either":"actions/bot-filters","id-318":"either","os.beginAudioRecording":"actions/audio","id-1647":"os.beginAudioRecording","os.endAudioRecording":"actions/audio","id-1651":"os.endAudioRecording","getBotLinks":"actions/data","id-194":"getBotLinks","getBotPosition":"actions/data","id-52":"getBotPosition","getBotRotation":"actions/data","id-57":"getBotRotation","getBotTagValues":"actions/data","id-42":"getBotTagValues","getFormattedJSON":"actions/data","id-70":"getFormattedJSON","getID":"actions/data","id-62":"getID","getJSON":"actions/data","id-66":"getJSON","getLink":"actions/data","id-190":"getLink","getMod":"actions/mods","id-47":"getMod","getSnapshot":"actions/data","id-74":"getSnapshot","getTag":"actions/data","id-88":"getTag","inDimension":"actions/bot-filters","id-289":"inDimension","inStack":"actions/bot-filters","id-299":"inStack","insertTagMaskText":"actions/data","id-118":"insertTagMaskText","insertTagText":"actions/data","id-111":"insertTagText","math.abs":"actions/math","id-1687":"math.abs","math.addVectors":"actions/math","id-1757":"math.addVectors","math.areClose":"actions/math","id-1788":"math.areClose","math.avg":"actions/math","id-1679":"math.avg","math.degreesToRadians":"actions/math","id-1713":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-1753":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-1721":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-1695":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-1730":"math.intersectPlane","math.negateVector":"actions/math","id-1767":"math.negateVector","math.normalizeVector":"actions/math","id-1772":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-1717":"math.radiansToDegrees","math.random":"actions/math","id-1708":"math.random","math.randomInt":"actions/math","id-1703":"math.randomInt","math.scaleVector":"actions/math","id-1782":"math.scaleVector","math.setRandomSeed":"actions/math","id-1699":"math.setRandomSeed","math.sqrt":"actions/math","id-1683":"math.sqrt","math.stdDev":"actions/math","id-1691":"math.stdDev","math.subtractVectors":"actions/math","id-1762":"math.subtractVectors","math.sum":"actions/math","id-1675":"math.sum","math.vectorLength":"actions/math","id-1777":"math.vectorLength","neighboring":"actions/bot-filters","id-304":"neighboring","not":"actions/bot-filters","id-325":"not","os.attachDebugger":"actions/debuggers","id-1287":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-1276":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-1280":"os.createDebugger-pausable","os.focusOn-bot":"actions/portals","id-480":"os.focusOn-bot","os.focusOn-position":"actions/portals","id-485":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-1284":"os.getExecutingDebugger","showChat-options":"actions/os","id-507":"showChat-options","showChat-placeholder":"actions/os","id-503":"showChat-placeholder","os.showInput":"actions/portals","id-712":"os.showInput","os.addBotDropGrid":"actions/portals","id-786":"os.addBotDropGrid","os.addBotDropSnap":"actions/portals","id-777":"os.addBotDropSnap","os.addDropGrid":"actions/portals","id-782":"os.addDropGrid","os.addDropSnap":"actions/portals","id-773":"os.addDropSnap","os.applyUpdatesToInst":"actions/os","id-1230":"os.applyUpdatesToInst","os.arSupported":"actions/xr","id-548":"os.arSupported","os.bufferSound":"actions/audio","id-749":"os.bufferSound","os.calculateRayFromCamera":"actions/portals","id-1178":"os.calculateRayFromCamera","os.cancelSound":"actions/audio","id-753":"os.cancelSound","os.closeBarcodeScanner":"actions/barcodes","id-621":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/portals","id-765":"os.closeCircleWipe","os.closeImageClassifier":"actions/image-classification","id-636":"os.closeImageClassifier","os.closeQRCodeScanner":"actions/barcodes","id-607":"os.closeQRCodeScanner","os.compileApp":"actions/app","id-900":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os","id-1163":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/records","id-1157":"os.countEvents","os.createInitializationUpdate":"actions/os","id-1226":"os.createInitializationUpdate","os.device":"actions/os","id-525":"os.device","os.disableAR":"actions/xr","id-538":"os.disableAR","os.disablePointOfView":"actions/portals","id-563":"os.disablePointOfView","os.disableVR":"actions/xr","id-545":"os.disableVR","os.disableWakeLock":"actions/os","id-569":"os.disableWakeLock","os.download":"actions/files","id-575":"os.download","os.downloadBots":"actions/files","id-581":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/files","id-586":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/files","id-594":"os.downloadInst","os.enableAR":"actions/xr","id-534":"os.enableAR","os.enableCustomDragging":"actions/portals","id-791":"os.enableCustomDragging","os.enablePointOfView":"actions/portals","id-554":"os.enablePointOfView","os.enableVR":"actions/xr","id-541":"os.enableVR","os.eraseData":"actions/records","id-1100":"os.eraseData","os.eraseManualApprovalData":"actions/records","id-1106":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/portals","id-451":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os","id-848":"os.getAverageFrameRate","os.getCameraPosition":"actions/portals","id-804":"os.getCameraPosition","os.getCameraRotation":"actions/portals","id-808":"os.getCameraRotation","os.getCurrentDimension":"actions/portals","id-683":"os.getCurrentDimension","os.getCurrentInst":"actions/portals","id-689":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os","id-1234":"os.getCurrentInstUpdate","os.getData":"actions/records","id-1082":"os.getData","os.getDimensionalDepth":"actions/portals","id-702":"os.getDimensionalDepth","os.getFocusPoint":"actions/portals","id-816":"os.getFocusPoint","os.getGeolocation":"actions/os","id-798":"os.getGeolocation","os.getInputList":"actions/portals","id-841":"os.getInputList","os.getInputState":"actions/portals","id-836":"os.getInputState","os.getInstStateFromUpdates":"actions/os","id-1222":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/records","id-1088":"os.getManualApprovalData","os.getMediaPermission":"actions/os","id-844":"os.getMediaPermission","os.getMenuDimension":"actions/portals","id-692":"os.getMenuDimension","os.getMiniPortalDimension":"actions/portals","id-695":"os.getMiniPortalDimension","os.getPointerDirection":"actions/portals","id-832":"os.getPointerDirection","os.getPointerPosition":"actions/portals","id-820":"os.getPointerPosition","os.getPointerRotation":"actions/portals","id-824":"os.getPointerRotation","os.getPortalDimension":"actions/portals","id-698":"os.getPortalDimension","os.getPublicRecordKey":"actions/records","id-1007":"os.getPublicRecordKey","os.getRoomOptions":"actions/rooms","id-866":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/rooms","id-881":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/rooms","id-870":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/records","id-1011":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os","id-572":"os.getWakeLockConfiguration","os.goToDimension":"actions/portals","id-726":"os.goToDimension","os.goToURL":"actions/portals","id-730":"os.goToURL","os.grantInstAdminPermission":"actions/records","id-1029":"os.grantInstAdminPermission","os.grantInstRole":"actions/records","id-1049":"os.grantInstRole","os.grantRecordMarkerPermission":"actions/records","id-1015":"os.grantRecordMarkerPermission","os.grantUserRole":"actions/records","id-1034":"os.grantUserRole","os.hasBotInMiniPortal":"actions/portals","id-757":"os.hasBotInMiniPortal","os.hideBarcode":"actions/barcodes","id-629":"os.hideBarcode","os.hideChat":"actions/os","id-515":"os.hideChat","os.hideHtml":"actions/os","id-458":"os.hideHtml","os.hideQRCode":"actions/barcodes","id-614":"os.hideQRCode","os.hideTips":"actions/portals","id-439":"os.hideTips","os.importAUX":"actions/files","id-667":"os.importAUX","os.inSheet":"actions/portals","id-801":"os.inSheet","os.instStatuses":"actions/os","id-1251":"os.instStatuses","os.instances":"actions/os","id-1241":"os.instances","os.isCollaborative":"actions/os","id-528":"os.isCollaborative","os.isInDimension":"actions/portals","id-679":"os.isInDimension","os.isRecordKey":"actions/records","id-1064":"os.isRecordKey","os.joinRoom":"actions/rooms","id-851":"os.joinRoom","os.leaveRoom":"actions/rooms","id-856":"os.leaveRoom","os.listBuiltinTags":"actions/app","id-1001":"os.listBuiltinTags","os.listData":"actions/records","id-1094":"os.listData","os.listFormAnimations":"actions/animations","id-1198":"os.listFormAnimations","os.listInstUpdates":"actions/os","id-1219":"os.listInstUpdates","os.loadInst":"actions/os","id-659":"os.loadInst","os.log":"actions/os","id-794":"os.log","os.meetCommand":"actions/os","id-1264":"os.meetCommand","os.meetFunction":"actions/os","id-1269":"os.meetFunction","os.openBarcodeScanner":"actions/barcodes","id-617":"os.openBarcodeScanner","os.openCircleWipe":"actions/portals","id-769":"os.openCircleWipe","os.openDevConsole":"actions/os","id-738":"os.openDevConsole","os.openImageClassifier":"actions/image-classification","id-632":"os.openImageClassifier","os.openQRCodeScanner":"actions/barcodes","id-603":"os.openQRCodeScanner","os.openURL":"actions/portals","id-734":"os.openURL","os.parseBotsFromData":"actions/files","id-671":"os.parseBotsFromData","os.playSound":"actions/audio","id-745":"os.playSound","os.raycast":"actions/portals","id-1172":"os.raycast","os.raycastFromCamera":"actions/portals","id-1167":"os.raycastFromCamera","os.recordData":"actions/records","id-1068":"os.recordData","os.recordEvent":"actions/records","id-1151":"os.recordEvent","os.recordFile":"actions/records","id-1112":"os.recordFile","os.recordManualApprovalData":"actions/records","id-1075":"os.recordManualApprovalData","os.registerApp":"actions/app","id-891":"os.registerApp","os.registerTagPrefix":"actions/app","id-886":"os.registerTagPrefix","os.remoteCount":"actions/os","id-1244":"os.remoteCount","os.remotes":"actions/os","id-1216":"os.remotes","os.replaceDragBot":"actions/portals","id-675":"os.replaceDragBot","os.requestAuthBot":"actions/records","id-1004":"os.requestAuthBot","os.requestFullscreenMode":"actions/portals","id-448":"os.requestFullscreenMode","os.requestWakeLock":"actions/os","id-566":"os.requestWakeLock","os.revokeInstRole":"actions/records","id-1057":"os.revokeInstRole","os.revokeRecordMarkerPermission":"actions/records","id-1022":"os.revokeRecordMarkerPermission","os.revokeUserRole":"actions/records","id-1042":"os.revokeUserRole","os.run":"actions/os","id-518":"os.run","os.setClipboard":"actions/os","id-461":"os.setClipboard","os.setRoomOptions":"actions/rooms","id-861":"os.setRoomOptions","os.setRoomTrackOptions":"actions/rooms","id-875":"os.setRoomTrackOptions","os.share":"actions/os","id-761":"os.share","os.showBarcode":"actions/barcodes","id-624":"os.showBarcode","os.showConfirm":"actions/portals","id-722":"os.showConfirm","os.showHtml":"actions/os","id-454":"os.showHtml","os.showInputForTag":"actions/portals","id-706":"os.showInputForTag","os.showJoinCode":"actions/barcodes","id-443":"os.showJoinCode","os.showQRCode":"actions/barcodes","id-610":"os.showQRCode","os.showUploadAuxFile":"actions/files","id-597":"os.showUploadAuxFile","os.showUploadFiles":"actions/files","id-600":"os.showUploadFiles","os.sleep":"actions/os","id-423":"os.sleep","os.startFormAnimation":"actions/animations","id-1187":"os.startFormAnimation","os.stopFormAnimation":"actions/animations","id-1193":"os.stopFormAnimation","os.tip":"actions/portals","id-432":"os.tip","os.toast":"actions/os","id-427":"os.toast","os.totalRemoteCount":"actions/os","id-1248":"os.totalRemoteCount","os.unloadInst":"actions/os","id-663":"os.unloadInst","os.unregisterApp":"actions/app","id-896":"os.unregisterApp","os.version":"actions/os","id-522":"os.version","os.vrSupported":"actions/xr","id-551":"os.vrSupported","os.agreedUponTime":"actions/time","id-640":"os.agreedUponTime","os.deadReckoningTime":"actions/time","id-648":"os.deadReckoningTime","os.instLatency":"actions/time","id-642":"os.instLatency","os.instTimeOffset":"actions/time","id-644":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/time","id-646":"os.instTimeOffsetSpread","os.localTime":"actions/time","id-638":"os.localTime","removeTags":"actions/data","id-141":"removeTags","renameTag":"actions/data","id-146":"renameTag","setTag":"actions/data","id-93":"setTag","setTagMask":"actions/data","id-99":"setTagMask","subtractMods":"actions/mods","id-157":"subtractMods","superShout":"actions/event","id-220":"superShout","uuid":"actions/data","id-355":"uuid","web.get":"actions/web","id-1983":"web.get","web.hook":"actions/web","id-1994":"web.hook","web.post":"actions/web","id-1988":"web.post","configBot":"actions/os","id-418":"configBot"}}'),i=a(4629),c=(a(2503),a(9960),["components"]),l={id:"debuggers",title:"Debugger Actions",sidebar_label:"Debuggers",description:"Debugger actions are useful for simulating bots in isolation from the rest of the inst."},u=void 0,d={unversionedId:"actions/debuggers",id:"actions/debuggers",title:"Debugger Actions",description:"Debugger actions are useful for simulating bots in isolation from the rest of the inst.",source:"@site/docs/actions/debuggers.mdx",sourceDirName:"actions",slug:"/actions/debuggers",permalink:"/actions/debuggers",draft:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/actions/debuggers.mdx",tags:[],version:"current",frontMatter:{id:"debuggers",title:"Debugger Actions",sidebar_label:"Debuggers",description:"Debugger actions are useful for simulating bots in isolation from the rest of the inst."},sidebar:"docs",previous:{title:"Data",permalink:"/actions/data"},next:{title:"Events",permalink:"/actions/event"}},g={},m=[].concat((0,i.KO)(r)),p={toc:m};function h(e){var t=e.components,a=(0,o.Z)(e,c);return(0,s.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(i.hl,{doc:r,mdxType:"ApiContents"}))}h.isMDXComponent=!0}}]);