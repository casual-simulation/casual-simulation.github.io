"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[3786],{4629:function(e,t,a){a.d(t,{hl:function(){return O},zl:function(){return V},KO:function(){return C},HE:function(){return P},Op:function(){return T}});var n=a(7639),r=a(7294),o=a(2503),s=a(814),i=a(4673),c=a(6486),m=a(1073),l=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={hasError:!1},a}(0,m.Z)(t,e),t.getDerivedStateFromError=function(e){return{hasError:!0,error:e}};var a=t.prototype;return a.componentDidCatch=function(e,t){var a="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw a;console.error(a)},a.render=function(){return this.state.hasError?r.createElement("h1",null,"[",this.props.reflection.name,"] ",this.state.error):this.props.children},t}(r.Component),d=a(4996),p=a(9960),u=a(7120),g=a(6388),f=a(1169);function y(e){void 0===e&&(e={});var t=e.references;return function(e){(0,f.Vn)(e,"link",(function(e){if(e.url.startsWith("tags:")){var a=e.url.slice("tags:".length);a.startsWith("@")?e.url=(0,d.Z)("listen-tags")+h(a.slice(1)):e.url=(0,d.Z)("tags")+h(a)}else if(e.url.startsWith("ref:")){var n=e.url.slice("ref:".length),r=t[n];e.url=(0,d.Z)(r)+"#"+n}else if(e.url.startsWith("glossary:")){var o=e.url.slice("glossary:".length);e.url=(0,d.Z)("glossary")+"#"+b(o)}else if(e.url.startsWith("page:")){var s=e.url.slice("page:".length).split("#"),i=s[0],c=s[1];e.url=(0,d.Z)(i)+"#"+c}}))}}function h(e){return"#"+b(e)}function b(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function x(e){return void 0===e&&(e={}),function(e){e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}var k={Property:["type"],reflection:["declaration"],"Type literal":["children","signatures"],"Call signature":["parameters","comment","type"]};function v(e,t,a){void 0===a&&(a=null),function(e,t,a){var r;void 0===a&&(a=null);for(var o,s=k[null!=(r=e.kindString)?r:e.type]||[],i=(0,n.Z)(s);!(o=i()).done;){var c=o.value,m=e[c];if(Array.isArray(m))for(var l,d=(0,n.Z)(m);!(l=d()).done;){var p=l.value;p&&t(p,a,c)}else m&&t(m,a,c)}}(e,(function(e,a,n){t(e,a,n),v(e,t,e)}))}function S(e,t){var a=[];return t(e)&&a.push(e),v(e,(function(e,n,r){t(e,n,r)&&a.push(e)})),a}function T(e){e}var R=["first","second","third","fourth","fifth"];function N(e,t){return e.name+"-"+t.name}function E(e,t){var a,n=N(e,t);return{value:"<code>"+("Constructor"===t.kindString||"Method"===t.kindString?te(t.signatures[0]):"Accessor"===t.kindString?(a=t).name+": "+ce(a.getSignature[0].type):oe(t))+"</code>",id:n,level:3}}function P(e){var t=[],a=function(e){var t=[],a=[],r=[];if(!e)return{properties:t,constructors:a,methods:r};for(var o,s=(0,n.Z)(e);!(o=s()).done;){var i=o.value;i.flags.isPrivate||("Property"===i.kindString||"Accessor"===i.kindString?t.push(i):"Constructor"===i.kindString?a.push(i):"Method"===i.kindString&&r.push(i))}return{properties:t,constructors:a,methods:r}}(e.children),r=a.properties,o=a.constructors,s=a.methods;return r.length>0&&t.push.apply(t,r.map((function(t){return E(e,t)}))),o.length>0&&t.push.apply(t,o.map((function(t){return E(e,t)}))),s.length>0&&t.push.apply(t,s.map((function(t){return E(e,t)}))),t}function D(e){for(var t,a=[],r=Ee(e),o=(0,n.Z)(r);!(t=o()).done;){var s=t.value,i=Re(s);a.push({value:i,id:s.group,level:2}),a.push.apply(a,s.children.map((function(e){return B(e)})))}return a}function B(e){var t,a=e.reflection,n=e.child,r=(e.group,e.name),o=e.namespace,s=o?o+"."+r:r;if(le(n)){var i,c=n.type.declaration.signatures;t=te(null!=(i=ve(c))?i:c[0],s)}else if(pe(n)){t=te(Se(n),s)}else t=oe(n,s);return{value:t="<code>"+t+"</code>",id:a.name+"-"+n.name,level:3}}function C(e){for(var t,a=[{value:e.pageTitle,id:"",level:2}],r=(0,n.Z)(e.contents);!(t=r()).done;){var o=t.value;if("Interface"===o.reflection.kindString||"Class"===o.reflection.kindString){var s=be(o.reflection),i=xe(o.reflection);a.push({value:s,id:i,level:2}),a.push.apply(a,P(o.reflection))}else if("Call signature"===o.reflection.kindString){var c=be(o.reflection),m=xe(o.reflection);a.push({value:"<code>"+te(o.reflection,c)+"</code>",id:m,level:3})}else if("Type alias"===o.reflection.kindString){var l=be(o.reflection),d=xe(o.reflection);a.push({value:l,id:d,level:2})}else if("Get signature"===o.reflection.kindString||"Set signature"===o.reflection.kindString){var p=be(o.reflection),u=xe(o.reflection);a.push({value:"<code>"+te(o.reflection,p)+"</code>",id:u,level:3})}else{var g=be(o.reflection),f=xe(o.reflection);a.push({value:g,id:f,level:2}),a.push.apply(a,D(o.reflection))}}return a}function O(e){var t=e.doc,a=t.contents,n=t.references;return r.createElement("div",{className:"api"},a.map((function(e){return r.createElement(w,{key:e.id,reflection:e.reflection,references:n})})))}function w(e){var t=e.reflection,a=e.references;return"Interface"===t.kindString||"Class"===t.kindString?r.createElement(M,{reflection:t,references:a}):"Call signature"===t.kindString||"Get signature"===t.kindString||"Set signature"===t.kindString?r.createElement(U,{reflection:t,references:a}):"Type alias"===t.kindString?r.createElement(F,{reflection:t,references:a}):r.createElement(L,{reflection:t,references:a})}function F(e){var t=e.reflection,a=e.references,n=be(t),s=xe(t);return r.createElement("div",null,r.createElement(o.Z,{as:"h2",id:s},n),r.createElement(Z,{reflection:t,references:a}),r.createElement(A,{reflection:t,name:n,references:a}),r.createElement(ne,{member:t}))}function A(e){var t=e.reflection,a=e.name,n=e.references,o="";return"union"===t.type.type&&(o=r.createElement(I,{type:t.type,name:a,references:n})),o}function I(e){var t=e.type,a=e.name,n=e.references;return r.createElement("div",null,r.createElement("p",null,"A ",a," can be one of the following values:"),r.createElement("ul",null,t.types.map((function(e,t){return r.createElement(G,{key:t,type:e,references:n})}))))}function G(e){var t=e.type,a=e.references;return r.createElement("li",null,r.createElement("code",null,r.createElement(ie,{type:t,references:a})))}function M(e){var t=e.reflection,a=e.references,n=be(t),s=xe(t);return r.createElement("div",null,r.createElement(o.Z,{as:"h2",id:s},n),r.createElement(V,{reflection:t,references:a}),r.createElement(ne,{member:t}))}function L(e){var t=e.reflection,a=e.references,n=be(t),s=xe(t);return r.createElement("div",null,r.createElement(o.Z,{as:"h2",id:s},n),r.createElement(K,{reflection:t,references:a}),r.createElement(ne,{member:t}))}function U(e){var t=e.reflection,a=e.references,n=be(t),o=xe(t);return r.createElement("div",null,r.createElement(z,{func:t,sig:t,name:n,link:o,references:a}))}function V(e){var t,a=e.reflection;if(!a)throw new Error("Unable to find "+e.name+"!");var n=function(e){return(0,c.sortBy)(e,(function(e){return"Property"===e.kindString||"Accessor"===e.kindString?0:"Constructor"===e.kindString?1:2})).filter((function(e){return!e.flags.isPrivate}))}(null!=(t=a.children)?t:[]);return r.createElement(l,{reflection:a,root:!0},r.createElement("div",{className:"api"},r.createElement(Z,{reflection:a,references:e.references}),a.indexSignature?r.createElement(_,{reflection:a,index:a.indexSignature,references:e.references}):"",a.references?r.createElement(q,{prop:a,references:e.references}):"",n.map((function(t){return r.createElement(W,{key:t.name,member:t,link:N(a,t),references:e.references})}))))}function _(e){var t=e.reflection,a=e.index,n=e.references,s=a.parameters[0];return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:t.name+"-_index"},"Index Signature"),r.createElement(Z,{reflection:a,references:n}),r.createElement("pre",null,r.createElement("code",null,"[",s.name,": ",r.createElement(ie,{type:s.type,references:n}),"]: ",r.createElement(ie,{type:a.type,references:n}))),r.createElement(ne,{member:a}))}function Z(e){var t=e.reflection,a=e.references;return r.createElement("div",null,r.createElement(X,{comment:t.comment,references:a}))}function W(e){var t;return t="Property"===e.member.kindString?function(e){var t,a=e.member,n="";a.references?(n=r.createElement(J,{prop:a,references:e.references}),t=r.createElement(r.Fragment,null,a.typeReference)):"reflection"===a.type.type&&a.typeText&&a.typeReference?(t=r.createElement(r.Fragment,null,a.typeReference),n=r.createElement(s.Z,{language:"typescript"},a.typeText)):t=r.createElement(ie,{type:e.member.type,references:e.references});!n&&a.typeText&&a.typeReference&&(n=r.createElement(s.Z,{language:"typescript"},a.typeText));var i=be(a);xe(a);return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:e.link},r.createElement("code",null,i,e.member.flags.isOptional?"?":"",": ",t)),r.createElement(Z,{reflection:e.member,references:e.references}),n)}(e):"Constructor"===e.member.kindString?function(e){var t=be(e.member);return r.createElement("div",null,r.createElement(z,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Method"===e.member.kindString?function(e){var t=be(e.member);return r.createElement("div",null,r.createElement(z,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Accessor"===e.member.kindString?function(e){var t;return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:e.link},r.createElement("code",null,e.member.name,": ",r.createElement(ie,{type:e.member.getSignature[0].type,references:e.references}))),r.createElement("p",null,null==(t=e.member.getSignature[0].comment)?void 0:t.shortText))}(e):"Not found "+e.member.kindString,r.createElement(l,{reflection:e.member},r.createElement("div",null,t))}function q(e){var t=e.prop,a=e.references,n=xe(t);return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:n+"-extra-functions"},"Extra Functions"),r.createElement("p",null,"The extra functions that are available on this type."),r.createElement(i.Z,null,r.createElement("p",null,"See the following functions for more information:"),r.createElement(Y,{children:t.references,references:a})))}function J(e){var t=e.prop,a=e.references;return r.createElement(i.Z,null,r.createElement("p",null,"See the following functions for more information:"),r.createElement(Y,{children:t.references,references:a}))}function K(e){var t=e.reflection,a=(t.type.declaration,Ee(t));return console.log(a),r.createElement(l,{reflection:t,root:!0},r.createElement("div",{className:"api"},r.createElement(Z,{reflection:t,references:e.references}),a.map((function(t){return r.createElement(j,{key:t.group,group:t,references:e.references})}))))}function j(e){var t=e.group,a=e.references,n=t.children,s=Re(t);return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:t.group},s),n.map((function(e){return r.createElement(Q,{key:e.child.id,namespace:e.namespace,name:e.name,property:e.child,link:N(e.reflection,e.child),references:a})})))}function Q(e){var t;if(le(e.property)){var a,n=e.namespace?e.namespace+"."+e.name:e.name,s=e.property.type.declaration;t=z({name:n,func:e.property,sig:null!=(a=ve(s.signatures))?a:s.signatures[0],link:e.link,references:e.references})}else if(pe(e.property)){var i=e.namespace?e.namespace+"."+e.name:e.name,c=Se(e.property);console.log(i,c,e.property),t=z({name:i,func:e.property,sig:c,link:e.link,references:e.references})}else t=ge(e.property)?r.createElement(r.Fragment,null,"This is really fun! ",e.property.name):"Property"===e.property.kindString?function(e){return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:e.link},r.createElement("code",null,e.property.name,": ",r.createElement(ie,{type:e.property.type,references:e.references}))),r.createElement(Z,{reflection:e.property,references:e.references}))}(e):"Not found "+e.property.kindString;return r.createElement(l,{reflection:e.property},r.createElement("div",null,t))}function z(e){var t=e.func,a=e.sig,n=e.link,s=e.name,i=e.references;a||console.log(s,t);var c=a.parameters||[];return r.createElement("div",null,r.createElement(o.Z,{as:"h3",id:n},r.createElement(ee,{func:t,sig:a,name:s,references:i})),r.createElement(H,{sig:a,references:i}),c.length>0?r.createElement("div",null,c.map((function(e,t){return r.createElement(ae,{key:e.name,param:e,index:t,references:i})}))):"",r.createElement(ne,{member:a}))}function H(e){var t=e.sig,a=e.references;return r.createElement(X,{comment:t.comment,references:a})}function X(e){var t=e.comment,a=e.references;return r.createElement(Y,{references:a},$(t))}function Y(e){var t=e.children,a=e.remarkPlugins,n=e.rehypePlugins,o=e.references;return r.createElement(u.D,{remarkPlugins:[[y,{references:o}]].concat(a||[]),rehypePlugins:[g.Z].concat(n||[])},t)}function $(e){var t="";return e&&(t+=e.shortText,e.text&&(t+="\n\n"+e.text)),t}function ee(e){var t=e.func,a=e.sig,n=e.name,o=e.references,s=a.parameters||[],i="";return"Get signature"!==t.kindString&&(i=r.createElement(r.Fragment,null,"(",s.map((function(e,t){return r.createElement("span",{key:e.name},t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",r.createElement(ie,{type:e.type,references:o}))})),")")),r.createElement("code",null,(t.flags.isStatic?"static ":"")+(n||a.name),i,": ",r.createElement(ie,{type:a.type,references:o}))}function te(e,t){void 0===t&&(t=e.name);var a=e.parameters||[],n="";return"Get signature"!==e.kindString&&(n="("+a.map((function(e,t){return(e.flags.isRest?"...":"")+e.name})).join(", ")+")"),""+t+n+": "+ce(e.type)}function ae(e){var t,a=e.param,n=e.index,o=e.references;return t=a.flags.isRest&&a.type.elementType?0===n?r.createElement("p",null,r.createElement("strong",null,"Each parameter")," is a ",r.createElement(ie,{type:a.type.elementType,references:o})," and are ",r.createElement(se,{param:a,isRest:!0,references:o})):r.createElement("p",null,r.createElement("strong",null,"Each other parameter")," is a ",r.createElement(ie,{type:a.type.elementType,references:o})," and are ",r.createElement(se,{param:a,isRest:!0,references:o})):r.createElement("p",null,"The ",r.createElement("strong",null,function(e){return R[e]}(n)," parameter")," is",a.flags.isOptional?" optional and is":""," a ",r.createElement(ie,{type:a.type,references:o})," and ",r.createElement(se,{param:a,references:o})),t}function ne(e){var t,a=e.member;if(null==(t=a.comment)||!t.tags)return"";var n=a.comment.tags.filter((function(e){return"example"===e.tag}));return n.length>0?r.createElement("div",null,r.createElement("h4",null,"Examples"),n.map((function(e,t){return r.createElement(re,{key:t,example:e})}))):""}function re(e){var t=e.example.text,a=t.indexOf("\n"),n=t.substring(0,a),o=t.substring(a+1);return r.createElement(s.Z,{language:"typescript",title:n.trim()},o.trim())}function oe(e,t){var a;return void 0===t&&(t=e.name),a=e.typeReference?e.typeReference:ce(e.type),t+(e.flags.isOptional?"?":"")+": "+a}function se(e){var t=e.param,a=e.isRest,n=e.references;return r.createElement(Y,{remarkPlugins:[x],references:n},function(e,t){var a=$(e.comment);if(!a)return"";(a=a.slice(0,1).toLowerCase()+a.slice(1)).startsWith("the")&&!t&&(a="is "+a);return a}(t,a))}function ie(e){var t=e.type,a=e.references,n=e.isInUnionOrArray;if("intrinsic"===t.type)return r.createElement("span",null,t.name);if(t.name){if("Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return r.createElement(r.Fragment,null,"Promise<",r.createElement(ie,{type:t.typeArguments[0],references:a}),">");if("Partial"===t.name&&"Partial"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return r.createElement(r.Fragment,null,r.createElement("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"Partial"),"<",r.createElement(ie,{type:t.typeArguments[0],references:a}),">");var o="#"+t.name,s=t.id?null==a?void 0:a["id-"+t.id]:null;if(s){var i=null==a?void 0:a[s];i&&(o=(0,d.Z)(i)+"#"+s)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry");return r.createElement(p.Z,{href:o},t.name)}if("union"===t.type)return r.createElement("span",null,"(",t.types.map((function(e,t){return r.createElement(r.Fragment,{key:t},t>0?" | ":"",r.createElement(ie,{type:e,references:a,isInUnionOrArray:!0}))})),")");if("array"===t.type)return r.createElement(r.Fragment,null,r.createElement(ie,{type:t.elementType,references:a,isInUnionOrArray:!0}),"[]");if("literal"===t.type)return"string"==typeof t.value?r.createElement("span",null,'"',t.value,'"'):"number"==typeof t.value?r.createElement("span",null,t.value):"boolean"==typeof t.value?r.createElement("span",null,t.value?"true":"false"):void 0===t.value?r.createElement("span",null,"undefined"):null===t.value?r.createElement("span",null,"null"):""+JSON.stringify(t);if("reflection"===t.type){var c=t.declaration;if("Type literal"===c.kindString&&c.signatures&&!c.children){var m,l=null!=(m=ve(c.signatures))?m:c.signatures[0],u=l.parameters||[];return r.createElement(r.Fragment,null,r.createElement("span",null,n?"(":"","(",u.map((function(e,t){return r.createElement("span",{key:t},t>0?",":"",e.name,": ",r.createElement(ie,{type:e.type,references:a}))})),") => ",r.createElement(ie,{type:l.type,references:a}),n?")":""))}return"object"}return""+JSON.stringify(t)}function ce(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+ce(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((function(e){return ce(e)})).join(" | ")+")":"array"===e.type?ce(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function me(e){return le(e)||pe(e)}function le(e){return e&&de(e.type)}function de(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((function(e){return"Call signature"===e.kindString}))}function pe(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((function(e){return de(e)}))}function ue(e){return e&&"Call signature"===e.kindString}function ge(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&"Type literal"===e.type.declaration.kindString&&e.type.declaration.children}function fe(e,t){var a,n,r=null==(a=e.comment)||null==(n=a.tags)?void 0:n.find((function(e){return e.tag===t}));return r?r.text.trim():null}function ye(e){if(e)for(var t,a=(0,n.Z)(e);!(t=a()).done;){var r=fe(t.value,"docname");if(r)return r.trim()}return null}function he(e){if(le(e)){var t,a=null==e||null==(t=e.type)?void 0:t.declaration,r=ke(null==a?void 0:a.signatures);if(r)return r}else if(pe(e))for(var o,s=e.type.types,i=(0,n.Z)(s);!(o=i()).done;){var c=o.value;if(de(c)){var m=ke(c.declaration.signatures);if(m)return m}}else if(ue(e)){var l=ke([e]);if(l)return l}return"99-default"}function be(e){if("Method"===e.kindString){var t=ye(e.signatures);if(t)return t}else if(le(e)){var a,r=null==e||null==(a=e.type)?void 0:a.declaration,o=ye(null==r?void 0:r.signatures);if(o)return o}else if(pe(e))for(var s,i=e.type.types,c=(0,n.Z)(i);!(s=c()).done;){var m=s.value;if(de(m)){var l=ye(m.declaration.signatures);if(l)return l}}else if(ue(e)){var d=ye([e]);if(d)return d}return fe(p=e,"docname")||p.name;var p}function xe(e){var t=fe(e,"docid");if(t)return t;var a,n,r=(a="docid",n=[],v(e,(function(e,t,r){"comment"===r&&n.push.apply(n,e.tags.filter((function(e){return e.tag===a})))})),n);return r.length>0?r[0].text.trim():be(e)}function ke(e){if(e)for(var t,a=(0,n.Z)(e);!(t=a()).done;){var r=fe(t.value,"docgroup");if(r)return r.trim()}return null}function ve(e){for(var t,a=(0,n.Z)(e);!(t=a()).done;){var r=t.value;if(fe(r,"docgroup"))return r}return null}function Se(e){for(var t,a=e.type.types,r=null,o=(0,n.Z)(a);!(t=o()).done;){var s=t.value;if(de(s)){var i=s.declaration.signatures;r||(r=i[0]);var c=ve(i);if(c)return c}}return r}function Te(e){for(var t,a,r=(t="Call signature",S(e,(function(e){return e.kindString===t}))),o=(0,n.Z)(r);!(a=o()).done;){var s=fe(a.value,"docgrouptitle");if(s)return s.trim()}return null}function Re(e){for(var t,a=(0,n.Z)(e.children);!(t=a()).done;){var r=Te(t.value.child);if(r)return r}return e.group}function Ne(e){if("Call signature"===e.kindString)return ue(e)||me(e)||ge(e)?[{group:he(e),name:be(e),reflection:e,child:e}]:[];if("Type alias"===e.kindString||"Get signature"===e.kindString||"Set signature"===e.kindString)return[];var t=e.type.declaration.children.filter((function(e){return ue(e)||me(e)||ge(e)})),a=null!==fe(e,"hiddennamespace")?null:e.name;return(0,c.flatMap)(t,(function(t){return me(t)?{group:he(t),name:be(t),namespace:a,reflection:e,child:t}:Ne(t)}))}function Ee(e){var t=Ne(e),a=(0,c.groupBy)(t,(function(e){return e.group})),n=[];for(var r in a)n.push({group:r,children:a[r]});return n=(0,c.sortBy)(n,(function(e){return e.group}))}},5597:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return m},metadata:function(){return d},toc:function(){return u}});var n=a(3117),r=a(102),o=(a(7294),a(3905)),s=JSON.parse('{"hash":"types/core","pageTitle":"Core Types","pageDescription":"Documentation for core types that are used throughout CasualOS.","pageSidebarLabel":"Core","contents":[{"id":2164,"order":9999,"name":"BotFilter","reflection":{"id":2164,"name":"BotFilter","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Defines a bot filter function.","text":"Common bot filters are [`byTag(tag, filter)`](ref:byTag)\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"BotFilter\\n"}]},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":867,"character":12}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2165,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":867,"character":25}],"signatures":[{"id":2166,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2167,"name":"bot","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":2773,"name":"Bot"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},{"type":"literal","value":null}]}},"comment":{"shortText":"Defines a bot filter function.","text":"Common bot filters are {@link byTag}\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"BotFilter\\n"}]},"group":"01-core"},{"id":2896,"order":9999,"name":"BotSpace","reflection":{"id":2896,"name":"BotSpace","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"The possible bot spaces.","text":"- `\\"shared\\"` means that the bot is a normal bot.\\n- `\\"local\\"` means that the bot is stored in the [local storage](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage) partition.\\n- `\\"tempLocal\\"` means that the bot is stored in the [temporary](https://en.wikipedia.org/wiki/In-memory_database) partition.\\n- `\\"tempShared\\"` means that the bot is temporary and shared with other devices.\\n- `\\"remoteTempShared\\"` means that the bot is temporary and shared with this device from a remote device.\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Space"},{"tag":"docid","paramName":"","text":"BotSpace\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":442,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"shared"},{"type":"literal","value":"local"},{"type":"literal","value":"tempLocal"},{"type":"literal","value":"history"},{"type":"literal","value":"admin"},{"type":"literal","value":"tempShared"},{"type":"literal","value":"remoteTempShared"},{"type":"literal","value":"certified"}]}},"comment":{"shortText":"The possible bot spaces.","text":"- `\\"shared\\"` means that the bot is a normal bot.\\n- `\\"local\\"` means that the bot is stored in the [local storage](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage) partition.\\n- `\\"tempLocal\\"` means that the bot is stored in the [temporary](https://en.wikipedia.org/wiki/In-memory_database) partition.\\n- `\\"tempShared\\"` means that the bot is temporary and shared with other devices.\\n- `\\"remoteTempShared\\"` means that the bot is temporary and shared with this device from a remote device.\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Space"},{"tagName":"docid","paramName":"","text":"BotSpace\\n"}]},"group":"01-core"},{"id":2919,"order":9999,"name":"BotState","reflection":{"id":2919,"name":"BotsState","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that contains a set of bots that have been indexed by their IDs.","text":"Generally, this is only used when working with groups of bots.\\nFor example, the [`diffSnapshots(first, second)`](ref:diffSnapshots) function takes two bot states and produces the difference between them.\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"BotState\\n"},{"tag":"example","paramName":"","text":"Create a bot state with two bots\\nlet state = {\\n   [bot1.id]: bot1,\\n   [bot2.id]: bot2\\n};\\n"},{"tag":"example","paramName":"","text":"Get a bot by its ID from a bot state\\nlet bot = state[botId];\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":882,"character":17}],"indexSignature":{"id":2920,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets or sets the bot in the state with the given ID.","tags":[]},"parameters":[{"id":2921,"name":"id","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2773,"name":"Bot"}}},"comment":{"shortText":"Defines an interface that contains a set of bots that have been indexed by their IDs.","text":"Generally, this is only used when working with groups of bots.\\nFor example, the {@link diffSnapshots} function takes two bot states and produces the difference between them.\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"BotState\\n"},{"tagName":"example","paramName":"","text":"Create a bot state with two bots\\nlet state = {\\n   [bot1.id]: bot1,\\n   [bot2.id]: bot2\\n};\\n"},{"tagName":"example","paramName":"","text":"Get a bot by its ID from a bot state\\nlet bot = state[botId];\\n"}]},"group":"01-core"},{"id":2906,"order":9999,"name":"BotTagMasks","reflection":{"id":2906,"name":"BotTagMasks","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface for a map of tag masks to tag names.","text":"Tag masks are special tags that can exist in a different space from the bot they are applied to.\\nThis makes it possible to have some local-only data applied to a shared bot for example.\\n\\nThe actual data structure is similar to the bot tags structure except that tags are additionally\\nsplit by the space that they originated from. This makes it possible to identify which space a tag came from and also\\nprevents cross-space conflicts.\\n\\n```typescript\\ninterface TagMasks {\\n     [space: string]: Tags;\\n}\\n```\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"TagMasks"},{"tag":"docid","paramName":"","text":"BotTagMasks\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":528,"character":17}],"indexSignature":{"id":2907,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets or sets the tag masks that are specific to the given space.","tags":[]},"parameters":[{"id":2908,"name":"space","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":2821,"name":"Tags"}}},"comment":{"shortText":"Defines an interface for a map of tag masks to tag names.","text":"Tag masks are special tags that can exist in a different space from the bot they are applied to.\\nThis makes it possible to have some local-only data applied to a shared bot for example.\\n\\nThe actual data structure is similar to the bot tags structure except that tags are additionally\\nsplit by the space that they originated from. This makes it possible to identify which space a tag came from and also\\nprevents cross-space conflicts.\\n\\n```typescript\\ninterface TagMasks {\\n     [space: string]: Tags;\\n}\\n```\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"TagMasks"},{"tagName":"docid","paramName":"","text":"BotTagMasks\\n"}]},"group":"01-core"},{"id":2821,"order":9999,"name":"BotTags","reflection":{"id":2821,"name":"BotTags","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that represents a set of tags and their related values.","text":"```typescript\\ninterface Tags {\\n     [tag: string]: any\\n}\\n```\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Tags"},{"tag":"docid","paramName":"","text":"BotTags\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":549,"character":17}],"indexSignature":{"id":2894,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets or sets the given tag on the bot.","tags":[{"tag":"example","paramName":"","text":"Get the #color on this bot\\nlet color = thisBot.tags.color;\\n"},{"tag":"example","paramName":"","text":"Get a raw tag on this bot\\nlet rawTag = thisBot.raw.tag;\\n"},{"tag":"example","paramName":"","text":"Set the #color tag to \\"red\\" on this bot\\nthisBot.tags.color = \\"red\\";\\n"},{"tag":"example","paramName":"","text":"Set a tempLocal tag mask for #color on this bot\\nthisBot.masks.color = \\"red\\";\\n"}]},"parameters":[{"id":2895,"name":"tag","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}},"comment":{"shortText":"Defines an interface that represents a set of tags and their related values.","text":"```typescript\\ninterface Tags {\\n     [tag: string]: any\\n}\\n```\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Tags"},{"tagName":"docid","paramName":"","text":"BotTags\\n"}]},"group":"01-core"},{"id":2900,"order":9999,"name":"CompiledBotListeners","reflection":{"id":2900,"name":"CompiledBotListeners","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"An interface that maps tag names to compiled listener functions.","text":"```typescript\\ninterface Listeners {\\n     [tag: string]: (arg?: any) => any;\\n}\\n```\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Listeners"},{"tag":"docid","paramName":"","text":"CompiledBotListeners\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":295,"character":17}],"indexSignature":{"id":2901,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets the listener in the given tag.","tags":[]},"parameters":[{"id":2902,"name":"tag","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reflection","declaration":{"id":2903,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":299,"character":19}],"signatures":[{"id":2904,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the listener in the given tag.","tags":[]},"parameters":[{"id":2905,"name":"arg","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"any"}}]}}}},"comment":{"shortText":"An interface that maps tag names to compiled listener functions.","text":"```typescript\\ninterface Listeners {\\n     [tag: string]: (arg?: any) => any;\\n}\\n```\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Listeners"},{"tagName":"docid","paramName":"","text":"CompiledBotListeners\\n"}]},"group":"01-core"},{"id":2159,"order":9999,"name":"Mod","reflection":{"id":2159,"name":"Mod","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Defines a type that represents a mod.\\nThat is, a set of tags that can be applied to another bot.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Mod\\n"}]},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":559,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2821,"name":"Tags"},{"type":"reference","id":2773,"name":"Bot"}]}},"comment":{"shortText":"Defines a type that represents a mod.\\nThat is, a set of tags that can be applied to another bot.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Mod\\n"}]},"group":"01-core"},{"id":2925,"order":9999,"name":"ParsedBotLink","reflection":{"id":2925,"name":"ParsedBotLink","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that represents a bot link that was parsed from a tag.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"ParsedBotLink\\n"}]},"children":[{"id":2927,"name":"botIDs","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The bot IDs that the link references.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":223,"character":4}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":2926,"name":"tag","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The tag that the link was parsed from.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":218,"character":4}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2927,2926]}],"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":214,"character":17}]},"comment":{"shortText":"Defines an interface that represents a bot link that was parsed from a tag.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"ParsedBotLink\\n"}]},"group":"01-core"},{"id":2922,"order":9999,"name":"PartialBotState","reflection":{"id":2922,"name":"PartialBotsState","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that contains a set of partial bots that have been indexed by their IDs.","text":"Generally, this is only used when working with differences between groups of bots.\\nFor example, the [`applyDiffToSnapshot(snapshot, diff)`](ref:applyDiffToSnapshot) function takes a bot state and a partial bot state and produces a final state that contains the combined result.\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"PartialBotState\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":899,"character":17}],"indexSignature":{"id":2923,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":2924,"name":"id","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":2773,"name":"Bot"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}}},"comment":{"shortText":"Defines an interface that contains a set of partial bots that have been indexed by their IDs.","text":"Generally, this is only used when working with differences between groups of bots.\\nFor example, the {@link applyDiffToSnapshot} function takes a bot state and a partial bot state and produces a final state that contains the combined result.\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"PartialBotState\\n"}]},"group":"01-core"},{"id":2773,"order":9999,"name":"RuntimeBot","reflection":{"id":2773,"name":"RuntimeBot","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface for a bot in a script/formula.","text":"The difference between this and Bot is that the tags\\nare calculated values and raw is the original tag values.\\n\\ni.e. tags will evaluate formulas while raw will return the formula scripts themselves.\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"doctitle","paramName":"","text":"Core Types"},{"tag":"docsidebar","paramName":"","text":"Core"},{"tag":"docdescription","paramName":"","text":"Documentation for core types that are used throughout CasualOS."},{"tag":"docid","paramName":"","text":"RuntimeBot"},{"tag":"docname","paramName":"","text":"Bot\\n"}]},"children":[{"id":2782,"name":"changes","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The changes that have been made to the bot.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":111,"character":4}],"type":{"type":"reference","id":2821,"name":"Tags"}},{"id":2774,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The ID of the bot.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":69,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2775,"name":"link","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The link to the bot.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":74,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2780,"name":"links","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The tags on the bot that link to other bots.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":101,"character":4}],"type":{"type":"reference","id":2912,"name":"Links"}},{"id":2785,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The calculated listener functions.\\nThis lets you get the compiled listener functions.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":129,"character":4}],"type":{"type":"reference","id":2900,"name":"Listeners"}},{"id":2783,"name":"maskChanges","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The tag mask changes that have been made to the bot.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":116,"character":4}],"type":{"type":"reference","id":2906,"name":"TagMasks"}},{"id":2779,"name":"masks","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The tag masks that have been applied to this bot.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":96,"character":4}],"type":{"type":"reference","id":2821,"name":"Tags"}},{"id":2778,"name":"raw","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The raw tag values. This lets you get the raw script text from formulas.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":91,"character":4}],"type":{"type":"reference","id":2821,"name":"Tags"}},{"id":2776,"name":"space","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The space that the bot is in.\\nDefaults to `\\"shared\\"`","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":80,"character":4}],"type":{"type":"reference","id":2896,"name":"Space"}},{"id":2777,"name":"tags","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The calculated tag values.\\nThis lets you get the calculated values from formulas.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":86,"character":4}],"type":{"type":"reference","id":2821,"name":"Tags"}},{"id":2781,"name":"vars","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The variables that the bot contains.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":106,"character":4}],"type":{"type":"reference","id":2909,"name":"Variables"}}],"groups":[{"title":"Properties","kind":1024,"children":[2782,2774,2775,2780,2785,2783,2779,2778,2776,2777,2781]}],"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":65,"character":17}],"indexSignature":{"id":2810,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets the listener or bot property with the given name.","text":"If given a property name, like `\\"tags\\"` or `\\"vars\\"`, then it will return the value of that property.\\nAlternatively, if the name does not match an existing property on the bot, then it will return the listener with the given name.\\n","tags":[{"tag":"example","paramName":"","text":"Get the tags of a bot\\nlet tags = bot.tags;\\n"},{"tag":"example","paramName":"","text":"Get the links of a bot\\nlet links = bot.links;\\n"},{"tag":"example","paramName":"","text":"Get the @onClick listener of a bot\\nlet onClick = bot.onClick;\\n"},{"tag":"example","paramName":"","text":"Get a property on a bot by a variable\\nlet propertyToGet = \'tags\';\\nlet tags = bot[propertyToGet];\\n"}]},"parameters":[{"id":2811,"name":"listenerOrProperty","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2812,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":204,"character":35}],"signatures":[{"id":2813,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2814,"name":"arg","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"any"}}]}},{"type":"intrinsic","name":"any"}]}}},"comment":{"shortText":"Defines an interface for a bot in a script/formula.","text":"The difference between this and Bot is that the tags\\nare calculated values and raw is the original tag values.\\n\\ni.e. tags will evaluate formulas while raw will return the formula scripts themselves.\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"doctitle","paramName":"","text":"Core Types"},{"tagName":"docsidebar","paramName":"","text":"Core"},{"tagName":"docdescription","paramName":"","text":"Documentation for core types that are used throughout CasualOS."},{"tagName":"docid","paramName":"","text":"RuntimeBot"},{"tagName":"docname","paramName":"","text":"Bot\\n"}]},"group":"01-core"},{"id":2912,"order":9999,"name":"RuntimeBotLinks","reflection":{"id":2912,"name":"RuntimeBotLinks","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that represents the bot links a bot can have.","text":"```typescript\\ninterface Links {\\n     [link: string]: Bot | Bot[];\\n}\\n```\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Links"},{"tag":"docid","paramName":"","text":"RuntimeBotLinks\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":240,"character":17}],"indexSignature":{"id":2913,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets the bot or bots that are linked in the given tag.","tags":[{"tag":"example","paramName":"","text":"Get a bot that is linked in the #manager tag\\nlet managerBot = thisBot.links.manager;\\n"},{"tag":"example","paramName":"","text":"Link a bot to another bot in the #manager tag\\nthisBot.links.manager = managerBot;\\n"}]},"parameters":[{"id":2914,"name":"tag","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","id":2773,"name":"Bot"},{"type":"array","elementType":{"type":"reference","id":2773,"name":"Bot"}}]}}},"comment":{"shortText":"Defines an interface that represents the bot links a bot can have.","text":"```typescript\\ninterface Links {\\n     [link: string]: Bot | Bot[];\\n}\\n```\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Links"},{"tagName":"docid","paramName":"","text":"RuntimeBotLinks\\n"}]},"group":"01-core"},{"id":2909,"order":9999,"name":"RuntimeBotVars","reflection":{"id":2909,"name":"RuntimeBotVars","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that represents the variables a bot can have.\\nVariables are useful for storing data that is not able to be saved to a tag.","text":"```typescript\\ninterface Variables {\\n     [variable: string]: any;\\n}\\n```\\n","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"Variables"},{"tag":"docid","paramName":"","text":"RuntimeBotVars\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":268,"character":17}],"indexSignature":{"id":2910,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"comment":{"shortText":"Gets or sets a variable on the bot.","tags":[{"tag":"example","paramName":"","text":"Get a variable on thisBot\\nlet variable = thisBot.vars.variable;\\n"},{"tag":"example","paramName":"","text":"Save a variable on thisBot\\nthisBot.vars.variable = variable;\\n"}]},"parameters":[{"id":2911,"name":"variable","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}},"comment":{"shortText":"Defines an interface that represents the variables a bot can have.\\nVariables are useful for storing data that is not able to be saved to a tag.","text":"```typescript\\ninterface Variables {\\n     [variable: string]: any;\\n}\\n```\\n","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"Variables"},{"tagName":"docid","paramName":"","text":"RuntimeBotVars\\n"}]},"group":"01-core"},{"id":2160,"order":9999,"name":"TagFilter","reflection":{"id":2160,"name":"TagFilter","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Defines the possible values that can be used as a tag filter.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docgroup","paramName":"","text":"01-core"},{"tag":"docname","paramName":"","text":"TagFilter\\n"}]},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":543,"character":12}],"type":{"type":"union","types":[{"type":"reflection","declaration":{"id":2161,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":544,"character":7}],"signatures":[{"id":2162,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":2163,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"boolean"},{"type":"literal","value":null},{"type":"intrinsic","name":"undefined"}]}},"comment":{"shortText":"Defines the possible values that can be used as a tag filter.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docgroup","paramName":"","text":"01-core"},{"tagName":"docname","paramName":"","text":"TagFilter\\n"}]},"group":"01-core"},{"id":2928,"order":9999,"name":"PortalType","reflection":{"id":2928,"name":"PortalType","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"The possible portal types.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docname","paramName":"","text":"PortalType\\n"}]},"sources":[{"fileName":"src/aux-common/bots/Bot.ts","line":477,"character":12}],"type":{"type":"union","types":[{"type":"literal","value":"grid"},{"type":"literal","value":"miniGrid"},{"type":"literal","value":"menu"},{"type":"literal","value":"sheet"},{"type":"literal","value":"meet"},{"type":"literal","value":"system"},{"type":"intrinsic","name":"string"}]}},"comment":{"shortText":"The possible portal types.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docname","paramName":"","text":"PortalType\\n"}]},"group":null},{"id":2533,"order":9999,"name":"PseudoRandomNumberGenerator","reflection":{"id":2533,"name":"PseudoRandomNumberGenerator","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface for a random number generator.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docname","paramName":"","text":"PseudoRandomNumberGenerator\\n"}]},"children":[{"id":2534,"name":"seed","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The seed used for this random number generator.\\nIf null then an unpredictable seed was used.","tags":[]},"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":2128,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"id":2535,"name":"random","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":2536,"name":"random","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Generates a random number between 0 and 1.","tags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":2537,"name":"random","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Generates a random decimal number between the given min and max values.","tags":[]},"parameters":[{"id":2538,"name":"min","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The minimum output number.","tags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":2539,"name":"max","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The maximum output number.\\n","tags":[]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"number"}}]},{"id":2540,"name":"randomInt","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":2541,"name":"randomInt","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Generates a random integer between the given min and max values.","tags":[]},"parameters":[{"id":2542,"name":"min","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The minimum output number.","tags":[]},"type":{"type":"intrinsic","name":"number"}},{"id":2543,"name":"max","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The maximum output number.\\n","tags":[]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"number"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[2534]},{"title":"Methods","kind":2048,"children":[2535,2540]}],"sources":[{"fileName":"src/aux-common/runtime/AuxLibrary.ts","line":2123,"character":17}]},"comment":{"shortText":"Defines an interface for a random number generator.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docname","paramName":"","text":"PseudoRandomNumberGenerator\\n"}]},"group":null},{"id":2712,"order":9999,"name":"RegisterPrefixOptions","reflection":{"id":2712,"name":"RegisterPrefixOptions","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that contains options for register prefix actions.","tags":[{"tag":"dochash","paramName":"","text":"types/core"},{"tag":"docname","paramName":"","text":"RegisterPrefixOptions\\n"}]},"children":[{"id":2713,"name":"language","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The possible languages that prefixes can use.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/BotEvents.ts","line":3448,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"javascript"},{"type":"literal","value":"typescript"},{"type":"literal","value":"json"},{"type":"literal","value":"jsx"},{"type":"literal","value":"tsx"}]}},{"id":2714,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The name of the prefix.","tags":[]},"sources":[{"fileName":"src/aux-common/bots/BotEvents.ts","line":3453,"character":4}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[2713,2714]}],"sources":[{"fileName":"src/aux-common/bots/BotEvents.ts","line":3444,"character":17}]},"comment":{"shortText":"Defines an interface that contains options for register prefix actions.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/core"},{"tagName":"docname","paramName":"","text":"RegisterPrefixOptions\\n"}]},"group":null}],"references":{"CasualOSError":"types/error","id-2949":"CasualOSError","Quaternion":"types/math/rotations","id-3339":"Quaternion","Rotation":"types/math/rotations","id-3371":"Rotation","Vector2":"types/math/vectors","id-3205":"Vector2","Vector3":"types/math/vectors","id-3262":"Vector3","AIChatMessage":"types/ai","id-2968":"AIChatMessage","AIChatOptions":"types/ai","id-2746":"AIChatOptions","AIGenerateImageSuccess":"types/ai","id-2551":"AIGenerateImageSuccess","AIGenerateImageOptions":"types/ai","id-2760":"AIGenerateImageOptions","AIGenerateSkyboxOptions":"types/ai","id-2756":"AIGenerateSkyboxOptions","AIGenerateSkyboxRequest":"types/ai","id-2544":"AIGenerateSkyboxRequest","AIGenerateSkyboxResult":"types/ai","id-2548":"AIGenerateSkyboxResult","AIGeneratedImage":"types/ai","id-2554":"AIGeneratedImage","AddCountFailure":"types/records/events","id-3152":"AddCountFailure","AddCountSuccess":"types/records/events","id-3147":"AddCountSuccess","AnimateTagOptions":"types/animation","id-2149":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-2524":"AttachDebuggerOptions","CasualOSDevice":"types/os","id-2937":"CasualOSDevice","CasualOSVersion":"types/os","id-2929":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-3417":"AxisAndAngle","BotTagMasks":"types/core","id-2906":"BotTagMasks","BotTags":"types/core","id-2821":"BotTags","BotState":"types/core","id-2919":"BotState","CompiledBotListeners":"types/core","id-2900":"CompiledBotListeners","ConvertGeolocationToWhat3WordsOptions":"types/os","id-2581":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-2979":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-2975":"CreatePublicRecordKeySuccess","DebuggerCallFrame":"types/debuggers/common","id-2477":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-2512":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-2506":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-2485":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-2491":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-2518":"DebuggerVariable","Easing":"types/animation","id-2561":"Easing","EnableXROptions":"types/os","id-2655":"EnableXROptions","EraseDataFailure":"types/records/data","id-3123":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-3119":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-3142":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-3138":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-3420":"EulerAnglesRotation","FocusOnOptions":"types/os","id-2615":"FocusOnOptions","FocusOnRotation":"types/os","id-2627":"FocusOnRotation","FormAnimationData":"types/os","id-2673":"FormAnimationData","FromToRotation":"types/math/rotations","id-3414":"FromToRotation","GenericError":"types/error","id-2946":"GenericError","GetCountFailure":"types/records/events","id-3163":"GetCountFailure","GetCountSuccess":"types/records/events","id-3157":"GetCountSuccess","GetDataFailure":"types/records/data","id-3114":"GetDataFailure","GetDataSuccess":"types/records/data","id-3105":"GetDataSuccess","GetRoomOptionsFailure":"types/os","id-2239":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os","id-2235":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os","id-2282":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os","id-2277":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os","id-2258":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os","id-2253":"GetRoomTrackOptionsSuccess","GrantMarkerPermissionFailure":"types/records/policies","id-3191":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-3189":"GrantMarkerPermissionSuccess","GrantRoleFailure":"types/records/roles","id-3177":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-3175":"GrantRoleSuccess","ImageClassifierOptions":"types/os","id-2633":"ImageClassifierOptions","InstUpdate":"types/os","id-2942":"InstUpdate","JoinRoomFailure":"types/os","id-2220":"JoinRoomFailure","JoinRoomSuccess":"types/os","id-2217":"JoinRoomSuccess","LeaveRoomFailure":"types/os","id-2229":"LeaveRoomFailure","LeaveRoomSuccess":"types/os","id-2226":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-3133":"ListDataFailure","ListDataSuccess":"types/records/data","id-3128":"ListDataSuccess","LookRotation":"types/math/rotations","id-3437":"LookRotation","MediaPermissionOptions":"types/os","id-2652":"MediaPermissionOptions","Debugger":"types/debuggers/debugger","id-2289":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-2496":"NormalDebuggerOptions","PhotoCameraOptions":"types/camera","id-2730":"PhotoCameraOptions","ParsedBotLink":"types/core","id-2925":"ParsedBotLink","PartialBotState":"types/core","id-2922":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-2345":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-2501":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-2464":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-2472":"PauseTriggerOptions","Photo":"types/camera","id-2742":"Photo","PossiblePauseTriggerLocation":"types/debuggers/common","id-2459":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-2533":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-3430":"QuaternionRotation","RaycastRay":"types/os","id-2213":"RaycastRay","RaycastResult":"types/os","id-2210":"RaycastResult","RecordActionOptions":"types/records/extra","id-2564":"RecordActionOptions","RecordDataFailure":"types/records/data","id-3100":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-3096":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-2180":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-2176":"RecordFileSuccess","RecordedFile":"types/experimental","id-2717":"RecordedFile","Recording":"types/experimental","id-2715":"Recording","RecordingOptions":"types/experimental","id-2722":"RecordingOptions","RegisterPrefixOptions":"types/core","id-2712":"RegisterPrefixOptions","RevokeMarkerPermissionFailure":"types/records/policies","id-3198":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-3196":"RevokeMarkerPermissionSuccess","RevokeRoleFailure":"types/records/roles","id-3184":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-3182":"RevokeRoleSuccess","RoomJoinOptions":"types/os","id-2678":"RoomJoinOptions","RoomOptions":"types/os","id-2687":"RoomOptions","RoomRemoteOptions":"types/os","id-2703":"RoomRemoteOptions","RoomTrackOptions":"types/os","id-2691":"RoomTrackOptions","RuntimeBot":"types/core","id-2773":"RuntimeBot","RuntimeBotLinks":"types/core","id-2912":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-2909":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-3428":"SequenceRotation","SetRoomOptionsSuccess":"types/os","id-2244":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os","id-2709":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os","id-2270":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os","id-2265":"SetRoomTrackOptionsSuccess","ShareOptions":"types/os","id-2611":"ShareOptions","ShowChatOptions":"types/os","id-2605":"ShowChatOptions","ShowConfirmOptions":"types/os","id-2647":"ShowConfirmOptions","ShowInputOptions":"types/os","id-2638":"ShowInputOptions","SnapAxis":"types/os","id-2585":"SnapAxis","SnapGridTarget":"types/os","id-2185":"SnapGridTarget","SnapPoint":"types/os","id-2597":"SnapPoint","SpeakTextOptions":"types/experimental","id-2529":"SpeakTextOptions","StartFormAnimationOptions":"types/os","id-2657":"StartFormAnimationOptions","StopFormAnimationOptions":"types/os","id-2670":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os","id-2567":"SuccessfulGeolocation","SyntheticVoice":"types/experimental","id-2726":"SyntheticVoice","TweenOptions":"types/experimental","id-2526":"TweenOptions","UnsuccessfulGeolocation":"types/os","id-2577":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-3170":"UpdateEventRecordFailure","UpdateEventRecordSuccess":"types/records/events","id-3168":"UpdateEventRecordSuccess","UploadedFile":"types/os","id-2206":"UploadedFile","WebhookOptions":"types/web","id-2130":"WebhookOptions","WebhookResult":"types/web","id-2142":"WebhookResult","AddCountResult":"types/records/events","id-3146":"AddCountResult","AvailablePermissions":"types/permissions","id-2984":"AvailablePermissions","BarcodeFormat":"types/os","id-2632":"BarcodeFormat","BotFilter":"types/core","id-2164":"BotFilter","BotSpace":"types/core","id-2896":"BotSpace","CameraType":"types/os","id-2631":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-2974":"CreatePublicRecordKeyResult","EaseMode":"types/animation","id-2560":"EaseMode","EaseType":"types/animation","id-2559":"EaseType","EraseDataResult":"types/records/data","id-3118":"EraseDataResult","EraseFileResult":"types/records/files","id-3137":"EraseFileResult","Geolocation":"types/os","id-2566":"Geolocation","GetCountResult":"types/records/events","id-3156":"GetCountResult","GetDataResult":"types/records/data","id-3104":"GetDataResult","GetRoomOptionsResult":"types/os","id-2234":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os","id-2276":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os","id-2252":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-3188":"GrantMarkerPermissionResult","GrantRoleResult":"types/records/roles","id-3174":"GrantRoleResult","JoinRoomResult":"types/os","id-2216":"JoinRoomResult","LeaveRoomResult":"types/os","id-2225":"LeaveRoomResult","ListDataResult":"types/records/data","id-3127":"ListDataResult","Mod":"types/core","id-2159":"Mod","PortalType":"types/core","id-2928":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-2463":"PossiblePauseTriggerStates","RecordDataResult":"types/records/data","id-3095":"RecordDataResult","RecordFileResult":"types/records/files","id-2175":"RecordFileResult","RevokeMarkerPermissionResult":"types/records/policies","id-3195":"RevokeMarkerPermissionResult","RevokeRoleResult":"types/records/roles","id-3181":"RevokeRoleResult","SetRoomOptionsResult":"types/os","id-2243":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os","id-2264":"SetRoomTrackOptionsResult","SnapTarget":"types/os","id-2604":"SnapTarget","TagFilter":"types/core","id-2160":"TagFilter","UpdateEventRecordResult":"types/records/events","id-3167":"UpdateEventRecordResult","animateTag-byOptions":"actions/utility","id-364":"animateTag-byOptions","getbot-tag":"actions/data","id-33":"getbot-tag","getbots-tag":"actions/data","id-17":"getbots-tag","animateTag-byTag":"actions/utility","id-358":"animateTag-byTag","changeState":"actions/data","id-177":"changeState","create":"actions/data","id-162":"create","destroy":"actions/data","id-166":"destroy","getbot-filters":"actions/data","id-26":"getbot-filters","getbots-filters":"actions/data","id-10":"getbots-filters","priorityShout":"actions/event","id-225":"priorityShout","shout":"actions/event","id-237":"shout","updateBotLinks":"actions/data","id-198":"updateBotLinks","whisper":"actions/event","id-263":"whisper","action.perform":"actions/event","id-1630":"action.perform","action.reject":"actions/event","id-1634":"action.reject","ai.chat-string":"actions/ai","id-423":"ai.chat-string","ai.chat-message":"actions/ai","id-426":"ai.chat-message","ai.chat-messages":"actions/ai","id-429":"ai.chat-messages","ai.generateImage-string":"actions/ai","id-442":"ai.generateImage-string","ai.generateImage-request":"actions/ai","id-446":"ai.generateImage-request","ai.generateSkybox-string":"actions/ai","id-434":"ai.generateSkybox-string","ai.generateSkybox-request":"actions/ai","id-438":"ai.generateSkybox-request","applyDiffToSnapshot":"actions/data","id-83":"applyDiffToSnapshot","applyMod":"actions/mods","id-152":"applyMod","assert":"actions/debuggers","id-407":"assert","assertEqual":"actions/debuggers","id-412":"assertEqual","atPosition":"actions/bot-filters","id-293":"atPosition","byCreator":"actions/bot-filters","id-314":"byCreator","byID":"actions/bot-filters","id-281":"byID","byMod":"actions/bot-filters","id-285":"byMod","bySpace":"actions/bot-filters","id-310":"bySpace","byTag":"actions/bot-filters","id-276":"byTag","bytes.fromBase64String":"actions/bytes","id-1854":"bytes.fromBase64String","bytes.fromBase64Url":"actions/bytes","id-1871":"bytes.fromBase64Url","bytes.fromHexString":"actions/bytes","id-1862":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-1850":"bytes.toBase64String","bytes.toBase64Url":"actions/bytes","id-1866":"bytes.toBase64Url","bytes.toHexString":"actions/bytes","id-1858":"bytes.toHexString","clearAnimations":"actions/utility","id-378":"clearAnimations","clearTagMasks":"actions/data","id-106":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-1877":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-1883":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-1914":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-1907":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-1972":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-1967":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-1978":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-1963":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-1959":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-1943":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-1933":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-1938":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-1953":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-1982":"crypto.keypair","crypto.sha256":"actions/crypto","id-1899":"crypto.sha256","crypto.sha512":"actions/crypto","id-1903":"crypto.sha512","crypto.sign":"actions/crypto","id-1986":"crypto.sign","deleteTagMaskText":"actions/data","id-133":"deleteTagMaskText","deleteTagText":"actions/data","id-126":"deleteTagText","diffSnapshots":"actions/data","id-78":"diffSnapshots","either":"actions/bot-filters","id-318":"either","os.beginAudioRecording":"actions/audio","id-1688":"os.beginAudioRecording","experiment.beginRecording":"actions/experimental","id-1695":"experiment.beginRecording","os.endAudioRecording":"actions/audio","id-1692":"os.endAudioRecording","experiment.endRecording":"actions/experimental","id-1699":"experiment.endRecording","experiment.getAnchorPointPosition":"actions/experimental","id-1678":"experiment.getAnchorPointPosition","experiment.getVoices":"actions/experimental","id-1707":"experiment.getVoices","experiment.localFormAnimation":"actions/experimental","id-1651":"experiment.localFormAnimation","experiment.localPositionTween":"actions/experimental","id-1656":"experiment.localPositionTween","experiment.localRotationTween":"actions/experimental","id-1667":"experiment.localRotationTween","experiment.speakText":"actions/experimental","id-1702":"experiment.speakText","getBotLinks":"actions/data","id-194":"getBotLinks","getBotPosition":"actions/data","id-52":"getBotPosition","getBotRotation":"actions/data","id-57":"getBotRotation","getBotTagValues":"actions/data","id-42":"getBotTagValues","getFormattedJSON":"actions/data","id-70":"getFormattedJSON","getID":"actions/data","id-62":"getID","getJSON":"actions/data","id-66":"getJSON","getLink":"actions/data","id-190":"getLink","getMod":"actions/mods","id-47":"getMod","getSnapshot":"actions/data","id-74":"getSnapshot","getTag":"actions/data","id-88":"getTag","inDimension":"actions/bot-filters","id-289":"inDimension","inStack":"actions/bot-filters","id-299":"inStack","insertTagMaskText":"actions/data","id-118":"insertTagMaskText","insertTagText":"actions/data","id-111":"insertTagText","math.abs":"actions/math","id-1724":"math.abs","math.addVectors":"actions/math","id-1794":"math.addVectors","math.areClose":"actions/math","id-1825":"math.areClose","math.avg":"actions/math","id-1716":"math.avg","math.degreesToRadians":"actions/math","id-1750":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-1790":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-1758":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-1732":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-1767":"math.intersectPlane","math.negateVector":"actions/math","id-1804":"math.negateVector","math.normalizeVector":"actions/math","id-1809":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-1754":"math.radiansToDegrees","math.random":"actions/math","id-1745":"math.random","math.randomInt":"actions/math","id-1740":"math.randomInt","math.scaleVector":"actions/math","id-1819":"math.scaleVector","math.setRandomSeed":"actions/math","id-1736":"math.setRandomSeed","math.sqrt":"actions/math","id-1720":"math.sqrt","math.stdDev":"actions/math","id-1728":"math.stdDev","math.subtractVectors":"actions/math","id-1799":"math.subtractVectors","math.sum":"actions/math","id-1712":"math.sum","math.vectorLength":"actions/math","id-1814":"math.vectorLength","neighboring":"actions/bot-filters","id-304":"neighboring","not":"actions/bot-filters","id-325":"not","os.attachDebugger":"actions/debuggers","id-1328":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-1317":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-1321":"os.createDebugger-pausable","os.focusOn-bot":"actions/portals","id-510":"os.focusOn-bot","os.focusOn-position":"actions/portals","id-515":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-1325":"os.getExecutingDebugger","showChat-options":"actions/os","id-537":"showChat-options","showChat-placeholder":"actions/os","id-533":"showChat-placeholder","os.showInput":"actions/portals","id-753":"os.showInput","os.addBotDropGrid":"actions/portals","id-827":"os.addBotDropGrid","os.addBotDropSnap":"actions/portals","id-818":"os.addBotDropSnap","os.addDropGrid":"actions/portals","id-823":"os.addDropGrid","os.addDropSnap":"actions/portals","id-814":"os.addDropSnap","os.applyUpdatesToInst":"actions/os","id-1271":"os.applyUpdatesToInst","os.arSupported":"actions/xr","id-578":"os.arSupported","os.bufferFormAddressGLTF":"actions/animations","id-1224":"os.bufferFormAddressGLTF","os.bufferSound":"actions/audio","id-790":"os.bufferSound","os.calculateRayFromCamera":"actions/portals","id-1219":"os.calculateRayFromCamera","os.cancelSound":"actions/audio","id-794":"os.cancelSound","os.capturePhoto":"actions/camera","id-673":"os.capturePhoto","os.closeBarcodeScanner":"actions/barcodes","id-651":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/portals","id-806":"os.closeCircleWipe","os.closeImageClassifier":"actions/image-classification","id-666":"os.closeImageClassifier","os.closePhotoCamera":"actions/camera","id-677":"os.closePhotoCamera","os.closeQRCodeScanner":"actions/barcodes","id-637":"os.closeQRCodeScanner","os.compileApp":"actions/app","id-941":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os","id-1204":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/records","id-1198":"os.countEvents","os.createInitializationUpdate":"actions/os","id-1267":"os.createInitializationUpdate","os.device":"actions/os","id-555":"os.device","os.disableAR":"actions/xr","id-568":"os.disableAR","os.disablePointOfView":"actions/portals","id-593":"os.disablePointOfView","os.disableVR":"actions/xr","id-575":"os.disableVR","os.disableWakeLock":"actions/os","id-599":"os.disableWakeLock","os.download":"actions/files","id-605":"os.download","os.downloadBots":"actions/files","id-611":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/files","id-616":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/files","id-624":"os.downloadInst","os.enableAR":"actions/xr","id-564":"os.enableAR","os.enableCustomDragging":"actions/portals","id-832":"os.enableCustomDragging","os.enablePointOfView":"actions/portals","id-584":"os.enablePointOfView","os.enableVR":"actions/xr","id-571":"os.enableVR","os.eraseData":"actions/records","id-1141":"os.eraseData","os.eraseManualApprovalData":"actions/records","id-1147":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/portals","id-481":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os","id-889":"os.getAverageFrameRate","os.getCameraPosition":"actions/portals","id-845":"os.getCameraPosition","os.getCameraRotation":"actions/portals","id-849":"os.getCameraRotation","os.getCurrentDimension":"actions/portals","id-724":"os.getCurrentDimension","os.getCurrentInst":"actions/portals","id-730":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os","id-1275":"os.getCurrentInstUpdate","os.getData":"actions/records","id-1123":"os.getData","os.getDimensionalDepth":"actions/portals","id-743":"os.getDimensionalDepth","os.getFocusPoint":"actions/portals","id-857":"os.getFocusPoint","os.getGeolocation":"actions/os","id-839":"os.getGeolocation","os.getInputList":"actions/portals","id-882":"os.getInputList","os.getInputState":"actions/portals","id-877":"os.getInputState","os.getInstStateFromUpdates":"actions/os","id-1263":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/records","id-1129":"os.getManualApprovalData","os.getMediaPermission":"actions/os","id-885":"os.getMediaPermission","os.getMenuDimension":"actions/portals","id-733":"os.getMenuDimension","os.getMiniPortalDimension":"actions/portals","id-736":"os.getMiniPortalDimension","os.getPointerDirection":"actions/portals","id-873":"os.getPointerDirection","os.getPointerPosition":"actions/portals","id-861":"os.getPointerPosition","os.getPointerRotation":"actions/portals","id-865":"os.getPointerRotation","os.getPortalDimension":"actions/portals","id-739":"os.getPortalDimension","os.getPublicRecordKey":"actions/records","id-1048":"os.getPublicRecordKey","os.getRoomOptions":"actions/rooms","id-907":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/rooms","id-922":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/rooms","id-911":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/records","id-1052":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os","id-602":"os.getWakeLockConfiguration","os.goToDimension":"actions/portals","id-767":"os.goToDimension","os.goToURL":"actions/portals","id-771":"os.goToURL","os.grantInstAdminPermission":"actions/records","id-1070":"os.grantInstAdminPermission","os.grantInstRole":"actions/records","id-1090":"os.grantInstRole","os.grantRecordMarkerPermission":"actions/records","id-1056":"os.grantRecordMarkerPermission","os.grantUserRole":"actions/records","id-1075":"os.grantUserRole","os.hasBotInMiniPortal":"actions/portals","id-798":"os.hasBotInMiniPortal","os.hideBarcode":"actions/barcodes","id-659":"os.hideBarcode","os.hideChat":"actions/os","id-545":"os.hideChat","os.hideHtml":"actions/os","id-488":"os.hideHtml","os.hideQRCode":"actions/barcodes","id-644":"os.hideQRCode","os.hideTips":"actions/portals","id-469":"os.hideTips","os.importAUX":"actions/files","id-708":"os.importAUX","os.inSheet":"actions/portals","id-842":"os.inSheet","os.instStatuses":"actions/os","id-1292":"os.instStatuses","os.instances":"actions/os","id-1282":"os.instances","os.isCollaborative":"actions/os","id-558":"os.isCollaborative","os.isInDimension":"actions/portals","id-720":"os.isInDimension","os.isRecordKey":"actions/records","id-1105":"os.isRecordKey","os.joinRoom":"actions/rooms","id-892":"os.joinRoom","os.leaveRoom":"actions/rooms","id-897":"os.leaveRoom","os.listBuiltinTags":"actions/app","id-1042":"os.listBuiltinTags","os.listData":"actions/records","id-1135":"os.listData","os.listFormAnimations":"actions/animations","id-1239":"os.listFormAnimations","os.listInstUpdates":"actions/os","id-1260":"os.listInstUpdates","os.loadInst":"actions/os","id-700":"os.loadInst","os.log":"actions/os","id-835":"os.log","os.meetCommand":"actions/os","id-1305":"os.meetCommand","os.meetFunction":"actions/os","id-1310":"os.meetFunction","os.openBarcodeScanner":"actions/barcodes","id-647":"os.openBarcodeScanner","os.openCircleWipe":"actions/portals","id-810":"os.openCircleWipe","os.openDevConsole":"actions/os","id-779":"os.openDevConsole","os.openImageClassifier":"actions/image-classification","id-662":"os.openImageClassifier","os.openPhotoCamera":"actions/camera","id-669":"os.openPhotoCamera","os.openQRCodeScanner":"actions/barcodes","id-633":"os.openQRCodeScanner","os.openURL":"actions/portals","id-775":"os.openURL","os.parseBotsFromData":"actions/files","id-712":"os.parseBotsFromData","os.playSound":"actions/audio","id-786":"os.playSound","os.raycast":"actions/portals","id-1213":"os.raycast","os.raycastFromCamera":"actions/portals","id-1208":"os.raycastFromCamera","os.recordData":"actions/records","id-1109":"os.recordData","os.recordEvent":"actions/records","id-1192":"os.recordEvent","os.recordFile":"actions/records","id-1153":"os.recordFile","os.recordManualApprovalData":"actions/records","id-1116":"os.recordManualApprovalData","os.registerApp":"actions/app","id-932":"os.registerApp","os.registerTagPrefix":"actions/app","id-927":"os.registerTagPrefix","os.remoteCount":"actions/os","id-1285":"os.remoteCount","os.remotes":"actions/os","id-1257":"os.remotes","os.replaceDragBot":"actions/portals","id-716":"os.replaceDragBot","os.requestAuthBot":"actions/records","id-1045":"os.requestAuthBot","os.requestFullscreenMode":"actions/portals","id-478":"os.requestFullscreenMode","os.requestWakeLock":"actions/os","id-596":"os.requestWakeLock","os.revokeInstRole":"actions/records","id-1098":"os.revokeInstRole","os.revokeRecordMarkerPermission":"actions/records","id-1063":"os.revokeRecordMarkerPermission","os.revokeUserRole":"actions/records","id-1083":"os.revokeUserRole","os.run":"actions/os","id-548":"os.run","os.setClipboard":"actions/os","id-491":"os.setClipboard","os.setRoomOptions":"actions/rooms","id-902":"os.setRoomOptions","os.setRoomTrackOptions":"actions/rooms","id-916":"os.setRoomTrackOptions","os.share":"actions/os","id-802":"os.share","os.showBarcode":"actions/barcodes","id-654":"os.showBarcode","os.showConfirm":"actions/portals","id-763":"os.showConfirm","os.showHtml":"actions/os","id-484":"os.showHtml","os.showInputForTag":"actions/portals","id-747":"os.showInputForTag","os.showJoinCode":"actions/barcodes","id-473":"os.showJoinCode","os.showQRCode":"actions/barcodes","id-640":"os.showQRCode","os.showUploadAuxFile":"actions/files","id-627":"os.showUploadAuxFile","os.showUploadFiles":"actions/files","id-630":"os.showUploadFiles","os.sleep":"actions/os","id-453":"os.sleep","os.startFormAnimation":"actions/animations","id-1228":"os.startFormAnimation","os.stopFormAnimation":"actions/animations","id-1234":"os.stopFormAnimation","os.tip":"actions/portals","id-462":"os.tip","os.toast":"actions/os","id-457":"os.toast","os.totalRemoteCount":"actions/os","id-1289":"os.totalRemoteCount","os.unloadInst":"actions/os","id-704":"os.unloadInst","os.unregisterApp":"actions/app","id-937":"os.unregisterApp","os.version":"actions/os","id-552":"os.version","os.vrSupported":"actions/xr","id-581":"os.vrSupported","os.agreedUponTime":"actions/time","id-681":"os.agreedUponTime","os.deadReckoningTime":"actions/time","id-689":"os.deadReckoningTime","os.instLatency":"actions/time","id-683":"os.instLatency","os.instTimeOffset":"actions/time","id-685":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/time","id-687":"os.instTimeOffsetSpread","os.localTime":"actions/time","id-679":"os.localTime","removeTags":"actions/data","id-141":"removeTags","renameTag":"actions/data","id-146":"renameTag","setTag":"actions/data","id-93":"setTag","setTagMask":"actions/data","id-99":"setTagMask","subtractMods":"actions/mods","id-157":"subtractMods","superShout":"actions/event","id-220":"superShout","uuid":"actions/data","id-355":"uuid","web.get":"actions/web","id-2029":"web.get","web.hook":"actions/web","id-2040":"web.hook","web.post":"actions/web","id-2034":"web.post","configBot":"actions/os","id-418":"configBot"}}'),i=a(4629),c=(a(2503),a(9960),["components"]),m={id:"core",title:"Core Types",sidebar_label:"Core",description:"Documentation for core types that are used throughout CasualOS."},l=void 0,d={unversionedId:"types/core",id:"types/core",title:"Core Types",description:"Documentation for core types that are used throughout CasualOS.",source:"@site/docs/types/core.mdx",sourceDirName:"types",slug:"/types/core",permalink:"/types/core",draft:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/types/core.mdx",tags:[],version:"current",frontMatter:{id:"core",title:"Core Types",sidebar_label:"Core",description:"Documentation for core types that are used throughout CasualOS."},sidebar:"docs",previous:{title:"Camera",permalink:"/types/camera"},next:{title:"Common",permalink:"/types/debuggers/common"}},p={},u=[].concat((0,i.KO)(s)),g={toc:u};function f(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.hl,{doc:s,mdxType:"ApiContents"}))}f.isMDXComponent=!0}}]);