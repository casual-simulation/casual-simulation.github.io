"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[993],{5998:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>m});var o=s(5250),r=s(5545);const a=JSON.parse('{"hash":"actions/os/records","pageTitle":"Records Actions","pageDescription":"Records are a way to store permenent data in CasualOS.","pageSidebarLabel":"Records","contents":[{"id":34784,"order":9999,"name":"os.countEvents","reflection":{"id":34784,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the number of times that the given [event](glossary:event-record) has been recorded in the given record.\\n\\nReturns a promise that resolves with an object that indicates whether the operation was successful or unsuccessful."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the number of times the click event has happened\\nconst result = await os.countEvents(myRecord, \'click\');\\n\\nif (result.success) {\\n    os.toast(result.count);\\n} else {\\n    os.toast(\'Failed to get count \' + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.countEvents"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":9352,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L9352"}],"parameters":[{"id":34785,"name":"recordNameOrKey","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record that the event count should be retrieved from. It can also be a record key."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34786,"name":"eventName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the event whose count should be retrieved."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34787,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to. If omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40706,"name":"GetCountResult","package":"@casual-simulation/aux-records","id":40706,"qualifiedName":"GetCountResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets the number of times that the given [event](glossary:event-record) has been recorded in the given record.\\n\\nReturns a promise that resolves with an object that indicates whether the operation was successful or unsuccessful.","tags":[{"tagName":"example","text":"```ts\\nGet the number of times the click event has happened\\nconst result = await os.countEvents(myRecord, \'click\');\\n\\nif (result.success) {\\n    os.toast(result.count);\\n} else {\\n    os.toast(\'Failed to get count \' + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.countEvents"}]},"group":"01-records"},{"id":34727,"order":9999,"name":"os.eraseData","reflection":{"id":34727,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Erases the [data](glossary:data-record) stored at the given address in the given [record](glossary:record).\\nReturns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nErase some data from a record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.eraseData(recordKeyResult.recordKey, \'myAddress\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.eraseData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8788,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8788"}],"parameters":[{"id":34728,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record key or record name that should be used to access the record. You can request a record key by using "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34729,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data is stored at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34730,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to.\\nIf omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40203,"name":"EraseDataResult","package":"@casual-simulation/aux-records","id":40203,"qualifiedName":"EraseDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Erases the [data](glossary:data-record) stored at the given address in the given [record](glossary:record).\\nReturns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nErase some data from a record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.eraseData(recordKeyResult.recordKey, \'myAddress\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.eraseData"}]},"group":"01-records"},{"id":34733,"order":9999,"name":"os.eraseManualApprovalData","reflection":{"id":34733,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Erases the [manual approval data](glossary:manual-approval-data-record) stored at the given address in the given record. Returns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred.\\n\\nWorks the same as "},{"kind":"text","text":"[`os.eraseData(recordKeyOrName, address, endpoint)`](ref:os.eraseData)"},{"kind":"text","text":" except that manual approval data records require the user to allow the operation manually."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.eraseManualApprovalData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8810,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8810"}],"parameters":[{"id":34734,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record key or record name that should be used to access the record. You can request a record key by using "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34735,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data is stored at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34736,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to.\\nIf omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40203,"name":"EraseDataResult","package":"@casual-simulation/aux-records","id":40203,"qualifiedName":"EraseDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Erases the [manual approval data](glossary:manual-approval-data-record) stored at the given address in the given record. Returns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred.\\n\\nWorks the same as os.eraseData except that manual approval data records require the user to allow the operation manually.","tags":[{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.eraseManualApprovalData"}]},"group":"01-records"},{"id":34702,"order":9999,"name":"os.getData","reflection":{"id":34702,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the data stored at the given address in the given record.\\nReturns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet some data from a record\\nconst result = await os.getData(\'myRecord\', \'myAddress\');\\n\\nif (result.success) {\\n    os.toast(result.data);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.getData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8551,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8551"}],"parameters":[{"id":34703,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record name or a record key. This indicates the record that the data should be retrieved from.\\nNote that you don\'t need a record key in order to retrieve public data from a record. Using a record name will work just fine."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34704,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data should be retrieved from."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34705,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to.\\nIf omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40189,"name":"GetDataResult","package":"@casual-simulation/aux-records","id":40189,"qualifiedName":"GetDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets the data stored at the given address in the given record.\\nReturns a promise that resolves with an object that contains the data (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nGet some data from a record\\nconst result = await os.getData(\'myRecord\', \'myAddress\');\\n\\nif (result.success) {\\n    os.toast(result.data);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.getData"}]},"group":"01-records"},{"id":34708,"order":9999,"name":"os.getManualApprovalData","reflection":{"id":34708,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the [manual approval data](glossary:manual-approval-data-record) stored at the given address in the given record.\\n\\nWorks the same as "},{"kind":"text","text":"[`os.getData(recordKeyOrName, address, endpoint)`](ref:os.getData)"},{"kind":"text","text":" except that manual approval data records require the user to allow the operation manually."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.getManualApprovalData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8574,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8574"}],"parameters":[{"id":34709,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record name or a record key. This indicates the record that the data should be retrieved from.\\nNote that you don\'t need a record key in order to retrieve public data from a record. Using a record name will work just fine."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34710,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data should be retrieved from."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34711,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to.\\nIf omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40189,"name":"GetDataResult","package":"@casual-simulation/aux-records","id":40189,"qualifiedName":"GetDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets the [manual approval data](glossary:manual-approval-data-record) stored at the given address in the given record.\\n\\nWorks the same as os.getData except that manual approval data records require the user to allow the operation manually.","tags":[{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.getManualApprovalData"}]},"group":"01-records"},{"id":34629,"order":9999,"name":"os.getPublicRecordKey","reflection":{"id":34629,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Requests an [access key](glossary:record-key) for the [public record](glossary:record) with the given name.\\nReturns a promise that resolves with an object that contains the record key (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRequest an access key for a public record.\\nconst result = await os.getPublicRecordKey(\'myPublicRecord\');\\n\\nif (result.success) {\\n    os.toast(result.recordKey);\\n} else {\\n    os.toast(\'Failed \' + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.getPublicRecordKey"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8064,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8064"}],"parameters":[{"id":34630,"name":"name","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record to get the key for."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":39679,"name":"CreatePublicRecordKeyResult","package":"@casual-simulation/aux-records","id":39679,"qualifiedName":"CreatePublicRecordKeyResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Requests an [access key](glossary:record-key) for the [public record](glossary:record) with the given name.\\nReturns a promise that resolves with an object that contains the record key (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nRequest an access key for a public record.\\nconst result = await os.getPublicRecordKey(\'myPublicRecord\');\\n\\nif (result.success) {\\n    os.toast(result.recordKey);\\n} else {\\n    os.toast(\'Failed \' + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.getPublicRecordKey"}]},"group":"01-records"},{"id":34633,"order":9999,"name":"os.getSubjectlessPublicRecordKey","reflection":{"id":34633,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Requests an subjectless [access key](glossary:record-key) for the [public record](glossary:record) with the given name.\\nReturns a promise that resolves with an object that contains the record key (if successful) or information about the error that occurred.\\n\\nThis function works similarly to "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":", except that it does not require the user to be signed in when the resulting key is used.\\nUsage of subjectless keys should therefore be limited, since they do not record who is using the key and therefore make moderation more difficult."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.getSubjectlessPublicRecordKey"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8085,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8085"}],"parameters":[{"id":34634,"name":"name","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":39679,"name":"CreatePublicRecordKeyResult","package":"@casual-simulation/aux-records","id":39679,"qualifiedName":"CreatePublicRecordKeyResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Requests an subjectless [access key](glossary:record-key) for the [public record](glossary:record) with the given name.\\nReturns a promise that resolves with an object that contains the record key (if successful) or information about the error that occurred.\\n\\nThis function works similarly to os.getPublicRecordKey, except that it does not require the user to be signed in when the resulting key is used.\\nUsage of subjectless keys should therefore be limited, since they do not record who is using the key and therefore make moderation more difficult.","tags":[{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.getSubjectlessPublicRecordKey"}]},"group":"01-records"},{"id":34649,"order":9999,"name":"os.grantInstAdminPermission","reflection":{"id":34649,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Attempts to grant the current inst admin permissions in the given record for the rest of the day.\\n\\nWhen called, the user will be prompted to accept/deny the request.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant the current inst admin permissions in the \\"myRecord\\" record.\\nconst result = await os.grantInstAdminPermission(\'myRecord\');\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.grantInstAdminPermission"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8202,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8202"}],"parameters":[{"id":34650,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34651,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43722,"name":"GrantRoleResult","package":"@casual-simulation/aux-records","id":43722,"qualifiedName":"GrantRoleResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Attempts to grant the current inst admin permissions in the given record for the rest of the day.\\n\\nWhen called, the user will be prompted to accept/deny the request.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nGrant the current inst admin permissions in the \\"myRecord\\" record.\\nconst result = await os.grantInstAdminPermission(\'myRecord\');\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.grantInstAdminPermission"}]},"group":"01-records"},{"id":34669,"order":9999,"name":"os.grantInstRole","reflection":{"id":34669,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Grants the given inst the given role in the given record for the specified time.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant the \\"myRole\\" role to a public inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'/myInst\');\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant the \\"myRole\\" role to a studio inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'myRecord/myInst\');\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant a role to an inst for 24 hours.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'myInst/myInst\', DateTime.now().plus({ hours: 24 }).toMillis());\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.grantInstRole"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8313,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8313"}],"parameters":[{"id":34670,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34671,"name":"role","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the role that should be granted."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34672,"name":"inst","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the inst that should be granted the role."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34673,"name":"expireTimeMs","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the time that the role grant expires. If null, then the role will not expire."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"null"},{"id":34674,"name":"options","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"},"defaultValue":"{}"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43722,"name":"GrantRoleResult","package":"@casual-simulation/aux-records","id":43722,"qualifiedName":"GrantRoleResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Grants the given inst the given role in the given record for the specified time.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nGrant the \\"myRole\\" role to a public inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'/myInst\');\\n```"},{"tagName":"example","text":"```ts\\nGrant the \\"myRole\\" role to a studio inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'myRecord/myInst\');\\n```"},{"tagName":"example","text":"```ts\\nGrant a role to an inst for 24 hours.\\nconst result = await os.grantInstRole(\'myRecord\', \'myRole\', \'myInst/myInst\', DateTime.now().plus({ hours: 24 }).toMillis());\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.grantInstRole"}]},"group":"01-records"},{"id":34637,"order":9999,"name":"os.grantPermission","reflection":{"id":34637,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Grants the given permission in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant a permission in \\"recordName\\" to the \\"myRole\\" role to access all resources with the \\"secret\\" marker.\\nconst result = await os.grantPermission(\'recordName\', {\\n    marker: \'secret\',\\n\\n    // any kind of resource\\n    resourceKind: null,\\n\\n    // all actions\\n    action: null,\\n\\n    subjectType: \'role\',\\n    subjectId: \'myRole\',\\n\\n    options: {},\\n\\n    // Never expire\\n    expireTimeMs: null\\n});\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant a permission to access the data record at \\"myAddress\\".\\nconst result = await os.grantPermission(\'recordName\', {\\n    resourceKind: \'data\',\\n    resourceId: \'myAddress\',\\n\\n    // all actions\\n    action: null,\\n\\n    subjectType: \'role\',\\n    subjectId: \'myRole\',\\n\\n    options: {},\\n\\n    // Never expire\\n    expireTimeMs: null\\n});\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.grantPermission"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8142,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8142"}],"parameters":[{"id":34638,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34639,"name":"permission","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the permission that should be added."}],"blockTags":[]},"type":{"type":"reference","target":268,"name":"AvailablePermissions","package":"@casual-simulation/aux-common","id":268,"qualifiedName":"AvailablePermissions"}},{"id":34640,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"union","types":[{"type":"reference","target":43640,"name":"GrantMarkerPermissionResult","package":"@casual-simulation/aux-records","id":43640,"qualifiedName":"GrantMarkerPermissionResult"},{"type":"reference","target":43663,"name":"GrantResourcePermissionResult","package":"@casual-simulation/aux-records","id":43663,"qualifiedName":"GrantResourcePermissionResult"}]}],"name":"Promise","package":"typescript"}},"comment":{"text":"Grants the given permission in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nGrant a permission in \\"recordName\\" to the \\"myRole\\" role to access all resources with the \\"secret\\" marker.\\nconst result = await os.grantPermission(\'recordName\', {\\n    marker: \'secret\',\\n\\n    // any kind of resource\\n    resourceKind: null,\\n\\n    // all actions\\n    action: null,\\n\\n    subjectType: \'role\',\\n    subjectId: \'myRole\',\\n\\n    options: {},\\n\\n    // Never expire\\n    expireTimeMs: null\\n});\\n```"},{"tagName":"example","text":"```ts\\nGrant a permission to access the data record at \\"myAddress\\".\\nconst result = await os.grantPermission(\'recordName\', {\\n    resourceKind: \'data\',\\n    resourceId: \'myAddress\',\\n\\n    // all actions\\n    action: null,\\n\\n    subjectType: \'role\',\\n    subjectId: \'myRole\',\\n\\n    options: {},\\n\\n    // Never expire\\n    expireTimeMs: null\\n});\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.grantPermission"}]},"group":"01-records"},{"id":34654,"order":9999,"name":"os.grantUserRole","reflection":{"id":34654,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Grants the given user the given role in the given record for the specified time.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant the \\"myRole\\" role to the user with the ID \\"myUserId\\" in the \\"myRecord\\" record.\\nconst result = await os.grantUserRole(\'myRecord\', \'myRole\', \'myUserId\');\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGrant a role to a user for 24 hours.\\nconst result = await os.grantUserRole(\'myRecord\', \'myRole\', \'myUserId\', DateTime.now().plus({ hours: 24 }).toMillis());\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.grantUserRole"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8236,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8236"}],"parameters":[{"id":34655,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34656,"name":"role","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the role that should be granted to the user."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34657,"name":"userId","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the ID of the user that should be granted the role."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34658,"name":"expireTimeMs","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the time that the role grant expires. If "},{"kind":"code","text":"`null`"},{"kind":"text","text":", then the role will not expire."}],"blockTags":[]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"null"},{"id":34659,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43722,"name":"GrantRoleResult","package":"@casual-simulation/aux-records","id":43722,"qualifiedName":"GrantRoleResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Grants the given user the given role in the given record for the specified time.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nGrant the \\"myRole\\" role to the user with the ID \\"myUserId\\" in the \\"myRecord\\" record.\\nconst result = await os.grantUserRole(\'myRecord\', \'myRole\', \'myUserId\');\\n```"},{"tagName":"example","text":"```ts\\nGrant a role to a user for 24 hours.\\nconst result = await os.grantUserRole(\'myRecord\', \'myRole\', \'myUserId\', DateTime.now().plus({ hours: 24 }).toMillis());\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.grantUserRole"}]},"group":"01-records"},{"id":34684,"order":9999,"name":"os.isRecordKey","reflection":{"id":34684,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Determines if the given value represents a [record key](glossary:record-key).\\n\\nReturns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the value is a record key and "},{"kind":"code","text":"`false`"},{"kind":"text","text":" if the value is not a record key."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nDetermine if a value is a record key.\\nconst isRecordKey = os.isRecordKey(tags.myRecordKey);\\nos.toast(tags.myRecordKey \' is \' + (isRecordKey ? \'a\' : \'not a\') + \' record key.\');\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.isRecordKey"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8384,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8384"}],"parameters":[{"id":34685,"name":"key","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the value to test to see if it is a record key."}],"blockTags":[]},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"intrinsic","name":"boolean"}},"comment":{"text":"Determines if the given value represents a [record key](glossary:record-key).\\n\\nReturns `true` if the value is a record key and `false` if the value is not a record key.","tags":[{"tagName":"example","text":"```ts\\nDetermine if a value is a record key.\\nconst isRecordKey = os.isRecordKey(tags.myRecordKey);\\nos.toast(tags.myRecordKey \' is \' + (isRecordKey ? \'a\' : \'not a\') + \' record key.\');\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.isRecordKey"}]},"group":"01-records"},{"id":34714,"order":9999,"name":"os.listData","reflection":{"id":34714,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets a partial list of [data](glossary:data-record) that is stored in the given record.\\nOptionally accepts the address before the first item that should be included in the list.\\nReturns a promise that resolves with an object that contains the items (if successful) or information about the error that occurred.\\n\\nOn [publicos.link](https://publicos.link), the returned list is limited to 25 items."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet a list of data items in a record\\nconst result = await os.listData(\'myRecord\');\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nList all the items in a record\\nlet lastAddress;\\nlet items = [];\\nwhile(true) {\\n    const result = await os.listData(\'myRecord\', lastAddress);\\n    if (result.success) {\\n        console.log(result.items);\\n        items.push(...result.items);\\n        if (result.items.length > 0) {\\n            lastAddress = result.items[result.items.length - 1].address;\\n        } else {\\n            // result.items is empty, so we can break out of the loop\\n            break;\\n        }\\n    } else {\\n        os.toast(\\"Failed \\" + result.errorMessage);\\n        break;\\n    }\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.listData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8658,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8658"}],"parameters":[{"id":34715,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record name or a record key. This indicates the record that the data should be retrieved from.\\nNote that you don\'t need a record key in order to retrieve public data from a record. Using a record name will work just fine."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34716,"name":"startingAddress","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address after which items will be included in the list.\\nSince items are ordered within the record by address, this can be used as way to iterate through all the data items in a record.\\nIf omitted, then the list will start with the first item."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"},{"id":34717,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to. If omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40219,"name":"ListDataResult","package":"@casual-simulation/aux-records","id":40219,"qualifiedName":"ListDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets a partial list of [data](glossary:data-record) that is stored in the given record.\\nOptionally accepts the address before the first item that should be included in the list.\\nReturns a promise that resolves with an object that contains the items (if successful) or information about the error that occurred.\\n\\nOn [publicos.link](https://publicos.link), the returned list is limited to 25 items.","tags":[{"tagName":"example","text":"```ts\\nGet a list of data items in a record\\nconst result = await os.listData(\'myRecord\');\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nList all the items in a record\\nlet lastAddress;\\nlet items = [];\\nwhile(true) {\\n    const result = await os.listData(\'myRecord\', lastAddress);\\n    if (result.success) {\\n        console.log(result.items);\\n        items.push(...result.items);\\n        if (result.items.length > 0) {\\n            lastAddress = result.items[result.items.length - 1].address;\\n        } else {\\n            // result.items is empty, so we can break out of the loop\\n            break;\\n        }\\n    } else {\\n        os.toast(\\"Failed \\" + result.errorMessage);\\n        break;\\n    }\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.listData"}]},"group":"01-records"},{"id":34720,"order":9999,"name":"os.listDataByMarker","reflection":{"id":34720,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets a partial list of [data](glossary:data-record) with the given marker that is stored in the given record.\\nOptionally accepts the address before the first item that should be included in the list.\\nReturns a promise that resolves with an object that contains the items (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet a list of publicRead data items in a record\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead\');\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nList all the items that have the publicRead marker in a record\\nlet lastAddress;\\nlet items = [];\\nwhile(true) {\\n    const result = await os.listDataByMarker(\'myRecord\', \'publicRead\', lastAddress);\\n    if (result.success) {\\n        console.log(result.items);\\n        items.push(...result.items);\\n        if (result.items.length > 0) {\\n            lastAddress = result.items[result.items.length - 1].address;\\n        } else {\\n            // result.items is empty, so we can break out of the loop\\n            break;\\n        }\\n    } else {\\n        os.toast(\\"Failed \\" + result.errorMessage);\\n        break;\\n    }\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nList publicRead items in descending order\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead\', null, { sort: \'descending\' });\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nList publicRead items stored at \\"myContainer\\" in descending order\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead:myContainer\', null, { sort: \'descending\' });\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.listDataByMarker"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8742,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8742"}],"parameters":[{"id":34721,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record name or a record key. This indicates the record that the data should be retrieved from.\\nNote that you don\'t need a record key in order to retrieve public data from a record. Using a record name will work just fine."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34722,"name":"marker","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The marker that needs to be assigned to the data items that should be included in the list.\\ne.g. Using \\"publicRead\\" will return all data items with the \\"publicRead\\" marker."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34723,"name":"startingAddress","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address after which items will be included in the list.\\nSince items are ordered within the record by address, this can be used as way to iterate through all the data items in a record.\\nIf omitted, then the list will start with the first item."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"},{"id":34724,"name":"options","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37787,"name":"ListDataOptions","package":"@casual-simulation/aux-runtime","id":37787,"qualifiedName":"ListDataOptions"},"defaultValue":"{}"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40219,"name":"ListDataResult","package":"@casual-simulation/aux-records","id":40219,"qualifiedName":"ListDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets a partial list of [data](glossary:data-record) with the given marker that is stored in the given record.\\nOptionally accepts the address before the first item that should be included in the list.\\nReturns a promise that resolves with an object that contains the items (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nGet a list of publicRead data items in a record\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead\');\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nList all the items that have the publicRead marker in a record\\nlet lastAddress;\\nlet items = [];\\nwhile(true) {\\n    const result = await os.listDataByMarker(\'myRecord\', \'publicRead\', lastAddress);\\n    if (result.success) {\\n        console.log(result.items);\\n        items.push(...result.items);\\n        if (result.items.length > 0) {\\n            lastAddress = result.items[result.items.length - 1].address;\\n        } else {\\n            // result.items is empty, so we can break out of the loop\\n            break;\\n        }\\n    } else {\\n        os.toast(\\"Failed \\" + result.errorMessage);\\n        break;\\n    }\\n}\\n```"},{"tagName":"example","text":"```ts\\nList publicRead items in descending order\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead\', null, { sort: \'descending\' });\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nList publicRead items stored at \\"myContainer\\" in descending order\\nconst result = await os.listDataByMarker(\'myRecord\', \'publicRead:myContainer\', null, { sort: \'descending\' });\\nif (result.success) {\\n    os.toast(result.items);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.listDataByMarker"}]},"group":"01-records"},{"id":34790,"order":9999,"name":"os.listUserStudios","reflection":{"id":34790,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the list of studios that the currently logged in user has access to.\\n\\nReturns a promise that resolves with an object that contains the list of studios (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the list of studios that the user has access to\\nconst result = await os.listUserStudios();\\n\\nif (result.success) {\\n     os.toast(result.studios.map(s => s.name).join(\', \'));\\n} else {\\n     os.toast(\'Failed to get studios \' + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.listUserStudios"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":9408,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L9408"}],"parameters":[{"id":34791,"name":"endpoint","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be retrieved from. If omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":39723,"name":"ListStudiosResult","package":"@casual-simulation/aux-records","id":39723,"qualifiedName":"ListStudiosResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets the list of studios that the currently logged in user has access to.\\n\\nReturns a promise that resolves with an object that contains the list of studios (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nGet the list of studios that the user has access to\\nconst result = await os.listUserStudios();\\n\\nif (result.success) {\\n     os.toast(result.studios.map(s => s.name).join(\', \'));\\n} else {\\n     os.toast(\'Failed to get studios \' + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.listUserStudios"}]},"group":"01-records"},{"id":34688,"order":9999,"name":"os.recordData","reflection":{"id":34688,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Stores the given [data](glossary:data-record) in the given [record](glossary:record) at the given address.\\nIf data already exists at the given address, it will be overwritten.\\n\\nReturns a promise that resolves with an object that indicates if the request was successful."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nPublish some data to a record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordData(recordKeyResult.recordKey, \'myAddress\', \'myData\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRecord data to the user\'s personal record\\nconst result = await os.recordData(authBot.id, \'myAddress\', \'myData\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRecord data with a custom marker\\nconst result = await os.recordData(authBot.id, \'myAddress\', \'myData\', {\\n    marker: \'myMarker\'\\n});\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.recordData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8438,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8438"}],"parameters":[{"id":34689,"name":"recordKeyOrRecordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the key that should be used to access the record. You can request a record key by using "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34690,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data should be stored at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34691,"name":"data","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the data that should be stored. This can be any value that can be serialized to JSON.\\nMust be less than 300KB in size.\\nIf you need to store data larger than 300KB, you can use "},{"kind":"text","text":"[`os.recordFile(recordKeyOrName, data, options, endpoint)`](ref:os.recordFile)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}},{"id":34692,"name":"endpointOrOptions","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options that should be used to record the data."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":37731,"name":"DataRecordOptions","package":"@casual-simulation/aux-runtime","id":37731,"qualifiedName":"DataRecordOptions"}]}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40177,"name":"RecordDataResult","package":"@casual-simulation/aux-records","id":40177,"qualifiedName":"RecordDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Stores the given [data](glossary:data-record) in the given [record](glossary:record) at the given address.\\nIf data already exists at the given address, it will be overwritten.\\n\\nReturns a promise that resolves with an object that indicates if the request was successful.","tags":[{"tagName":"example","text":"```ts\\nPublish some data to a record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordData(recordKeyResult.recordKey, \'myAddress\', \'myData\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nRecord data to the user\'s personal record\\nconst result = await os.recordData(authBot.id, \'myAddress\', \'myData\');\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nRecord data with a custom marker\\nconst result = await os.recordData(authBot.id, \'myAddress\', \'myData\', {\\n    marker: \'myMarker\'\\n});\\n\\nif (result.success) {\\n    os.toast(\\"Success!\\");\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.recordData"}]},"group":"01-records"},{"id":34778,"order":9999,"name":"os.recordEvent","reflection":{"id":34778,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Records that the given [event](glossary:event-record) occurred in the given record.\\n\\nReturns a promise that resolves with an object that indicates whether the operation was successful or unsuccessful."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRecord that a click event happened\\nawait os.recordEvent(myRecordKey, \'click\');\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.recordEvent"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":9297,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L9297"}],"parameters":[{"id":34779,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record key or record name that should be used to record the event."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34780,"name":"eventName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the event whose count should be incremented."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34781,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to. If omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40696,"name":"AddCountResult","package":"@casual-simulation/aux-records","id":40696,"qualifiedName":"AddCountResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Records that the given [event](glossary:event-record) occurred in the given record.\\n\\nReturns a promise that resolves with an object that indicates whether the operation was successful or unsuccessful.","tags":[{"tagName":"example","text":"```ts\\nRecord that a click event happened\\nawait os.recordEvent(myRecordKey, \'click\');\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.recordEvent"}]},"group":"01-records"},{"id":34739,"order":9999,"name":"os.recordFile","reflection":{"id":34739,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Stores the given [file data](glossary:file-record) in the given record using the given options for the file. The file can later be retrieved by using os.getFile(urlOrRecordFileResult).\\n\\nReturns a promise that resolves with an object that contains the URL that the file was stored at (if successful) or information about the error that occurred."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nUpload a file\\nconst files = await os.showUploadFiles();\\n\\nif (files.length <= 0) {\\n    return;\\n}\\n\\nconst file = files[0];\\nconst result = await os.recordFile(tags.recordKey, file);\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nUpload a string to a file record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordFile(recordKeyResult.recordKey, \'my file data\');\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nUpload red bots to a file record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordFile(recordKeyResult.recordKey, getBots(\\"color\\", \\"red\\"), {\\n    description: \'my bots\'\\n});\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nUpload a file to a custom endpoint\\nconst files = await os.showUploadFiles();\\n\\nif (files.length <= 0) {\\n    return;\\n}\\n\\nconst file = files[0];\\nconst result = await os.recordFile(tags.recordKey, file, undefined, \'https://myendpoint.com\');\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.recordFile"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8937,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8937"}],"parameters":[{"id":34740,"name":"recordKeyOrName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the record key or record name that should be used to access the record. You can request a record key by using "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34741,"name":"data","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the data that should be stored in the record. This can be a string, an object, a blob, or an ArrayBuffer."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}},{"id":34742,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The options that should be used to record the file."}],"blockTags":[]},"type":{"type":"reference","target":35989,"name":"RecordFileOptions","package":"@casual-simulation/aux-runtime","id":35989,"qualifiedName":"RecordFileOptions"}},{"id":34743,"name":"endpoint","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the HTTP Endpoint of the records website that the data should be recorded to. If omitted, then the preconfigured records endpoint will be used. Note that when using a custom endpoint, the record key must be a valid record key for that endpoint."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"null"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":35886,"name":"RecordFileResult","package":"@casual-simulation/aux-runtime","id":35886,"qualifiedName":"RecordFileApiResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Stores the given [file data](glossary:file-record) in the given record using the given options for the file. The file can later be retrieved by using os.getFile(urlOrRecordFileResult).\\n\\nReturns a promise that resolves with an object that contains the URL that the file was stored at (if successful) or information about the error that occurred.","tags":[{"tagName":"example","text":"```ts\\nUpload a file\\nconst files = await os.showUploadFiles();\\n\\nif (files.length <= 0) {\\n    return;\\n}\\n\\nconst file = files[0];\\nconst result = await os.recordFile(tags.recordKey, file);\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nUpload a string to a file record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordFile(recordKeyResult.recordKey, \'my file data\');\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nUpload red bots to a file record\\nconst recordKeyResult = await os.getPublicRecordKey(\'myRecord\');\\nif (!recordKeyResult.success) {\\n    os.toast(\\"Failed to get a record key! \\" + recordKeyResult.errorMessage);\\n    return;\\n}\\nconst result = await os.recordFile(recordKeyResult.recordKey, getBots(\\"color\\", \\"red\\"), {\\n    description: \'my bots\'\\n});\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"example","text":"```ts\\nUpload a file to a custom endpoint\\nconst files = await os.showUploadFiles();\\n\\nif (files.length <= 0) {\\n    return;\\n}\\n\\nconst file = files[0];\\nconst result = await os.recordFile(tags.recordKey, file, undefined, \'https://myendpoint.com\');\\n\\nif (result.success) {\\n    tags.uploadUrl = result.url;\\n    os.toast(\\"Success! Uploaded to \\" + result.url);\\n} else {\\n    os.toast(\\"Failed \\" + result.errorMessage);\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.recordFile"}]},"group":"01-records"},{"id":34695,"order":9999,"name":"os.recordManualApprovalData","reflection":{"id":34695,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Stores the given [manual approval data](glossary:manual-approval-data-record) in the given record at the given address. If data already exists at the given address, it will be overwritten.\\n\\nReturns a promise that resolves with an object that indicates if the request was successful.\\n\\nWorks the same as "},{"kind":"text","text":"[`os.recordData(recordKeyOrRecordName, address, data, endpointOrOptions)`](ref:os.recordData)"},{"kind":"text","text":" except that manual approval data records require the user to allow the operation manually."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.recordManualApprovalData"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8471,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8471"}],"parameters":[{"id":34696,"name":"recordKeyOrRecordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the key that should be used to access the record. You can request a record key by using "},{"kind":"text","text":"[`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34697,"name":"address","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the address that the data should be stored at."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34698,"name":"data","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the data that should be stored. This can be any value that can be serialized to JSON.\\nMust be less than 300KB in size.\\nIf you need to store data larger than 300KB, you can use "},{"kind":"text","text":"[`os.recordFile(recordKeyOrName, data, options, endpoint)`](ref:os.recordFile)"},{"kind":"text","text":"."}],"blockTags":[]},"type":{"type":"intrinsic","name":"any"}},{"id":34699,"name":"endpointOrOptions","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options that should be used to record the data."}],"blockTags":[]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":37731,"name":"DataRecordOptions","package":"@casual-simulation/aux-runtime","id":37731,"qualifiedName":"DataRecordOptions"}]}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":40177,"name":"RecordDataResult","package":"@casual-simulation/aux-records","id":40177,"qualifiedName":"RecordDataResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Stores the given [manual approval data](glossary:manual-approval-data-record) in the given record at the given address. If data already exists at the given address, it will be overwritten.\\n\\nReturns a promise that resolves with an object that indicates if the request was successful.\\n\\nWorks the same as os.recordData except that manual approval data records require the user to allow the operation manually.","tags":[{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.recordManualApprovalData"}]},"group":"01-records"},{"id":34623,"order":9999,"name":"os.requestAuthBot","reflection":{"id":34623,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Requests that an \\"authentication\\" bot be added to the inst for the current browser tab.\\nAuth bots are useful for discovering general information about the logged in user and are typically associated with a [https://publicos.link](https://publicos.link) user account.\\n\\nReturns a promise that resolves with a bot that contains information about the signed in user session.\\nResolves with "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the user was unable to sign in.\\n\\nOn success, the "},{"kind":"code","text":"`authBot`"},{"kind":"text","text":" global variable will reference the bot that was returned by the promise.\\n\\nSee [Auth Bot Tags](page:tags#auth-bot-tags) for more information.\\n\\nSee "},{"kind":"text","text":"[`os.requestAuthBotInBackground()`](ref:os.requestAuthBotInBackground)"},{"kind":"text","text":" for a version of this function that does not show a popup if the user is not signed in."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRequest an auth bot for the user\\nawait os.requestAuthBot();\\nos.toast(\\"Logged in!\\");\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@doctitle","content":[{"kind":"text","text":"Records Actions"}]},{"tag":"@docsidebar","content":[{"kind":"text","text":"Records"}]},{"tag":"@docdescription","content":[{"kind":"text","text":"Records are a way to store permenent data in CasualOS."}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.requestAuthBot"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":7965,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L7965"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":38150,"name":"Bot","package":"@casual-simulation/aux-common","id":38150,"qualifiedName":"Bot"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Requests that an \\"authentication\\" bot be added to the inst for the current browser tab.\\nAuth bots are useful for discovering general information about the logged in user and are typically associated with a [https://publicos.link](https://publicos.link) user account.\\n\\nReturns a promise that resolves with a bot that contains information about the signed in user session.\\nResolves with `null` if the user was unable to sign in.\\n\\nOn success, the `authBot` global variable will reference the bot that was returned by the promise.\\n\\nSee [Auth Bot Tags](page:tags#auth-bot-tags) for more information.\\n\\nSee os.requestAuthBotInBackground for a version of this function that does not show a popup if the user is not signed in.","tags":[{"tagName":"example","text":"```ts\\nRequest an auth bot for the user\\nawait os.requestAuthBot();\\nos.toast(\\"Logged in!\\");\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"doctitle","text":"Records Actions"},{"tagName":"docsidebar","text":"Records"},{"tagName":"docdescription","text":"Records are a way to store permenent data in CasualOS."},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.requestAuthBot"}]},"group":"01-records"},{"id":34626,"order":9999,"name":"os.requestAuthBotInBackground","reflection":{"id":34626,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Requests that an \\"authentication\\" bot be added to the inst for the current browser tab.\\nWorks similarly to "},{"kind":"text","text":"[`os.requestAuthBot()`](ref:os.requestAuthBot)"},{"kind":"text","text":", except that the request will not show a popup if the user is not signed in.\\n\\nAuth bots are useful for discovering general information about the logged in user and are typically associated with a [https://publicos.link](https://publicos.link) user account.\\n\\nReturns a promise that resolves with a bot that contains information about the signed in user session.\\nResolves with "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the user is not already signed in.\\n\\nOn success, the "},{"kind":"code","text":"`authBot`"},{"kind":"text","text":" global variable will reference the bot that was returned by the promise.\\n\\nSee [Auth Bot Tags](page:tags#auth-bot-tags) for more information.\\n\\nSee "},{"kind":"text","text":"[`os.requestAuthBot()`](ref:os.requestAuthBot)"},{"kind":"text","text":" for a version of this function that shows a popup if the user is not signed in."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRequest the auth bot in the background.\\nconst authBot = await os.requestAuthBotInBackground();\\nif (authBot) {\\n    os.toast(\\"Logged in!\\");\\n} else {\\n    os.toast(\\"Not logged in.\\");\\n}\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@doctitle","content":[{"kind":"text","text":"Records Actions"}]},{"tag":"@docsidebar","content":[{"kind":"text","text":"Records"}]},{"tag":"@docdescription","content":[{"kind":"text","text":"Records are a way to store permenent data in CasualOS."}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.requestAuthBotInBackground"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":7999,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L7999"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":38150,"name":"Bot","package":"@casual-simulation/aux-common","id":38150,"qualifiedName":"Bot"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Requests that an \\"authentication\\" bot be added to the inst for the current browser tab.\\nWorks similarly to os.requestAuthBot, except that the request will not show a popup if the user is not signed in.\\n\\nAuth bots are useful for discovering general information about the logged in user and are typically associated with a [https://publicos.link](https://publicos.link) user account.\\n\\nReturns a promise that resolves with a bot that contains information about the signed in user session.\\nResolves with `null` if the user is not already signed in.\\n\\nOn success, the `authBot` global variable will reference the bot that was returned by the promise.\\n\\nSee [Auth Bot Tags](page:tags#auth-bot-tags) for more information.\\n\\nSee os.requestAuthBot for a version of this function that shows a popup if the user is not signed in.","tags":[{"tagName":"example","text":"```ts\\nRequest the auth bot in the background.\\nconst authBot = await os.requestAuthBotInBackground();\\nif (authBot) {\\n    os.toast(\\"Logged in!\\");\\n} else {\\n    os.toast(\\"Not logged in.\\");\\n}\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"doctitle","text":"Records Actions"},{"tagName":"docsidebar","text":"Records"},{"tagName":"docdescription","text":"Records are a way to store permenent data in CasualOS."},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.requestAuthBotInBackground"}]},"group":"01-records"},{"id":34677,"order":9999,"name":"os.revokeInstRole","reflection":{"id":34677,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Revokes the given role from the given inst in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRevoke the \\"myRole\\" role from a public inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeInstRole(\'myRecord\', \'myRole\', \'/myInst\');\\n```"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRevoke the \\"myRole\\" role from a studio inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeInstRole(\'myRecord\', \'myRole\', \'myRecord/myInst\');\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.revokeInstRole"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8352,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8352"}],"parameters":[{"id":34678,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"The name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34679,"name":"role","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the role that should be revoked from the inst."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34680,"name":"inst","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the inst that the role should be revoked from."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34681,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43733,"name":"RevokeRoleResult","package":"@casual-simulation/aux-records","id":43733,"qualifiedName":"RevokeRoleResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Revokes the given role from the given inst in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nRevoke the \\"myRole\\" role from a public inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeInstRole(\'myRecord\', \'myRole\', \'/myInst\');\\n```"},{"tagName":"example","text":"```ts\\nRevoke the \\"myRole\\" role from a studio inst with the name \\"myInst\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeInstRole(\'myRecord\', \'myRole\', \'myRecord/myInst\');\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.revokeInstRole"}]},"group":"01-records"},{"id":34643,"order":9999,"name":"os.revokePermission","reflection":{"id":34643,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Revokes the permission with the given ID from the the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.revokePermission"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8170,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8170"}],"parameters":[{"id":34644,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34645,"name":"permissionId","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the ID of the permission that should be removed."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34646,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43685,"name":"RevokeMarkerPermissionResult","package":"@casual-simulation/aux-records","id":43685,"qualifiedName":"RevokePermissionResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Revokes the permission with the given ID from the the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.revokePermission"}]},"group":"01-records"},{"id":34662,"order":9999,"name":"os.revokeUserRole","reflection":{"id":34662,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Revokes the given role from the given user in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nRevoke the \\"myRole\\" role from the user with the ID \\"myUserId\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeUserRole(\'myRecord\', \'myRole\', \'myUserId\');\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docgroup","content":[{"kind":"text","text":"01-records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.revokeUserRole"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":8272,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L8272"}],"parameters":[{"id":34663,"name":"recordName","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the name of the record."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34664,"name":"role","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the role that should be revoked from the user."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34665,"name":"userId","variant":"param","kind":32768,"flags":{},"comment":{"summary":[{"kind":"text","text":"the ID of the user."}],"blockTags":[]},"type":{"type":"intrinsic","name":"string"}},{"id":34666,"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"the options for the operation."}],"blockTags":[]},"type":{"type":"reference","target":37722,"name":"RecordActionOptions","package":"@casual-simulation/aux-runtime","id":37722,"qualifiedName":"RecordActionOptions"}}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":43733,"name":"RevokeRoleResult","package":"@casual-simulation/aux-records","id":43733,"qualifiedName":"RevokeRoleResult"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Revokes the given role from the given user in the given record.\\n\\nSee [Record Security](page:learn/records/security) for more information.","tags":[{"tagName":"example","text":"```ts\\nRevoke the \\"myRole\\" role from the user with the ID \\"myUserId\\" in the \\"myRecord\\" record.\\nconst result = await os.revokeUserRole(\'myRecord\', \'myRole\', \'myUserId\');\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docgroup","text":"01-records"},{"tagName":"docname","text":"os.revokeUserRole"}]},"group":"01-records"},{"id":34794,"order":9999,"name":"os.getRecordsEndpoint","reflection":{"id":34794,"name":"__type","variant":"signature","kind":4096,"flags":{},"comment":{"summary":[{"kind":"text","text":"Gets the default records endpoint. That is, the records endpoint that is used for records actions when no endpoint is specified."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\\nGet the default records endpoint.\\nconst endpoint = await os.getRecordsEndpoint();\\nos.toast(\\"The default records endpoint is: \\" + endpoint);\\n```"}]},{"tag":"@dochash","content":[{"kind":"text","text":"actions/os/records"}]},{"tag":"@docname","content":[{"kind":"text","text":"os.getRecordsEndpoint"}]}]},"sources":[{"fileName":"src/aux-runtime/runtime/AuxLibrary.ts","line":9429,"character":13,"url":"https://github.com/casual-simulation/casualos/blob/5261174ee/src/aux-runtime/runtime/AuxLibrary.ts#L9429"}],"type":{"type":"reference","target":{"sourceFileName":"../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript"}},"comment":{"text":"Gets the default records endpoint. That is, the records endpoint that is used for records actions when no endpoint is specified.","tags":[{"tagName":"example","text":"```ts\\nGet the default records endpoint.\\nconst endpoint = await os.getRecordsEndpoint();\\nos.toast(\\"The default records endpoint is: \\" + endpoint);\\n```"},{"tagName":"dochash","text":"actions/os/records"},{"tagName":"docname","text":"os.getRecordsEndpoint"}]},"group":null}],"references":{"CasualOSError":"types/error","id-38671":"CasualOSError","Quaternion":"types/math/rotations","id-135":"Quaternion","Rotation":"types/math/rotations","id-167":"Rotation","Vector2":"types/math/vectors","id-1":"Vector2","Vector3":"types/math/vectors","id-58":"Vector3","AIChatMessage":"types/ai","id-38708":"AIChatMessage","AIChatOptions":"types/ai","id-37669":"AIChatOptions","AIDataContent":"types/ai","id-38717":"AIDataContent","AIGenerateImageSuccess":"types/ai","id-35487":"AIGenerateImageSuccess","AIGenerateImageOptions":"types/ai","id-37709":"AIGenerateImageOptions","AIGenerateSkyboxAction":"types/ai","id-37676":"AIGenerateSkyboxAction","AIGenerateSkyboxBlockadeLabsOptions":"types/ai","id-37687":"AIGenerateSkyboxBlockadeLabsOptions","AIGenerateSkyboxOptions":"types/ai","id-37684":"AIGenerateSkyboxOptions","AIGenerateSkyboxRequest":"types/ai","id-35480":"AIGenerateSkyboxRequest","AIGenerateSkyboxResult":"types/ai","id-35484":"AIGenerateSkyboxResult","AIGeneratedImage":"types/ai","id-35490":"AIGeneratedImage","AITextContent":"types/ai","id-38715":"AITextContent","AIUrlContent":"types/ai","id-38720":"AIUrlContent","ARSupportedAction":"types/os/xr","id-37006":"ARSupportedAction","AddCountFailure":"types/records/events","id-40702":"AddCountFailure","AddCountSuccess":"types/records/events","id-40697":"AddCountSuccess","AddDropSnapAction":"types/os/portals","id-37139":"AddDropSnapAction","AddDropSnapPointsAction":"types/os/portals","id-37143":"AddDropSnapPointsAction","AnalyticsRecordEventAction":"types/os/portals","id-37472":"AnalyticsRecordEventAction","AnimateTagOptions":"types/animation","id-35495":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-35788":"AttachDebuggerOptions","AuthData":"types/os/records","id-37314":"AuthData","DebuggerOptions":"types/debuggers/common","id-35804":"DebuggerOptions","CasualOSDevice":"types/os/system","id-38639":"CasualOSDevice","CasualOSVersion":"types/os/system","id-38631":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-213":"AxisAndAngle","BeginRecordingAction":"types/os/audio","id-37218":"BeginRecordingAction","BotIntersection":"types/os/portals","id-35997":"BotIntersection","BotTagMasks":"types/core","id-38255":"BotTagMasks","BotTags":"types/core","id-38258":"BotTags","BotState":"types/core","id-38333":"BotState","BufferFormAddressGLTFAction":"types/os/portals","id-37385":"BufferFormAddressGLTFAction","BufferSoundAction":"types/os/audio","id-36854":"BufferSoundAction","CalculateRayFromCameraAction":"types/os/portals","id-37378":"CalculateRayFromCameraAction","CancelSoundAction":"types/os/audio","id-36860":"CancelSoundAction","CompiledBotListeners":"types/core","id-38208":"CompiledBotListeners","CompiledBotModules":"types/core","id-38214":"CompiledBotModules","ConfigureWakeLockAction":"types/os/portals","id-37459":"ConfigureWakeLockAction","ConvertGeolocationToWhat3WordsAction":"types/os/geolocation","id-37340":"ConvertGeolocationToWhat3WordsAction","ConvertGeolocationToWhat3WordsOptions":"types/os/geolocation","id-37336":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-39684":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-39680":"CreatePublicRecordKeySuccess","DataPermission":"types/permissions","id-305":"DataPermission","DebuggerCallFrame":"types/debuggers/common","id-35828":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-35836":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-35822":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-35782":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-35777":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-35842":"DebuggerVariable","DefineGlobalBotAction":"types/os/portals","id-37328":"DefineGlobalBotAction","DownloadAction":"types/os/files","id-36866":"DownloadAction","Easing":"types/animation","id-36956":"Easing","EnableARAction":"types/os/xr","id-37002":"EnableARAction","EnableCollaborationAction":"types/os/spaces","id-36933":"EnableCollaborationAction","EnableCustomDraggingAction":"types/os/portals","id-37194":"EnableCustomDraggingAction","EnablePOVAction":"types/os/portals","id-37020":"EnablePOVAction","EnableVRAction":"types/os/xr","id-37016":"EnableVRAction","EnableXROptions":"types/os/xr","id-37000":"EnableXROptions","EndRecordingAction":"types/os/audio","id-37230":"EndRecordingAction","EraseDataFailure":"types/records/data","id-40208":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-40204":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-40389":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-40385":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-216":"EulerAnglesRotation","EventPermission":"types/permissions","id-405":"EventPermission","ExitFullscreenAction":"types/os/portals","id-37035":"ExitFullscreenAction","FilePermission":"types/permissions","id-353":"FilePermission","FilePermissionOptions":"types/permissions","id-340":"FilePermissionOptions","FocusOnOptions":"types/os/camera","id-36605":"FocusOnOptions","FocusOnRotation":"types/os/camera","id-36617":"FocusOnRotation","FormAnimationData":"types/os/animations","id-37440":"FormAnimationData","FromToRotation":"types/math/rotations","id-210":"FromToRotation","GenericError":"types/error","id-38668":"GenericError","GetAverageFrameRateAction":"types/os/portals","id-37358":"GetAverageFrameRateAction","GetCountFailure":"types/records/events","id-40713":"GetCountFailure","GetCountSuccess":"types/records/events","id-40707":"GetCountSuccess","GetDataFailure":"types/records/data","id-40199":"GetDataFailure","GetDataSuccess":"types/records/data","id-40190":"GetDataSuccess","GetGeolocationAction":"types/os/geolocation","id-37271":"GetGeolocationAction","GetRoomOptionsFailure":"types/os/portals","id-35949":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os/portals","id-35945":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os/portals","id-35983":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os/portals","id-35978":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os/portals","id-35959":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os/portals","id-35954":"GetRoomTrackOptionsSuccess","GetVoicesAction":"types/os/audio","id-37262":"GetVoicesAction","GetWakeLockConfigurationAction":"types/os/portals","id-37465":"GetWakeLockConfigurationAction","GoToTagAction":"types/os/portals","id-37298":"GoToTagAction","GrantMarkerPermissionFailure":"types/records/policies","id-43643":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-43641":"GrantMarkerPermissionSuccess","GrantResourcePermissionFailure":"types/records/policies","id-43666":"GrantResourcePermissionFailure","GrantResourcePermissionSuccess":"types/records/policies","id-43664":"GrantResourcePermissionSuccess","GrantRoleFailure":"types/records/roles","id-43725":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-43723":"GrantRoleSuccess","HideHtmlAction":"types/os/portals","id-36601":"HideHtmlAction","HideTooltipAction":"types/os/portals","id-36590":"HideTooltipAction","HtmlAppEventAction":"types/os/portals","id-37091":"HtmlAppEventAction","HtmlAppMethodCallAction":"types/os/portals","id-37096":"HtmlAppMethodCallAction","ImageClassifierOptions":"types/os/image-classification","id-36727":"ImageClassifierOptions","InstPermission":"types/permissions","id-531":"InstPermission","InstUpdate":"types/os/spaces","id-38664":"InstUpdate","JoinRoomFailure":"types/os/portals","id-35921":"JoinRoomFailure","JoinRoomSuccess":"types/os/portals","id-35918":"JoinRoomSuccess","LeaveRoomFailure":"types/os/portals","id-35930":"LeaveRoomFailure","LeaveRoomSuccess":"types/os/portals","id-35927":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-40230":"ListDataFailure","ListDataSuccess":"types/records/data","id-40220":"ListDataSuccess","ListFormAnimationsAction":"types/os/animations","id-37434":"ListFormAnimationsAction","ListStudiosFailure":"types/records/studios","id-39727":"ListStudiosFailure","ListStudiosSuccess":"types/records/studios","id-39724":"ListStudiosSuccess","ListedData":"types/records/data","id-40226":"ListedData","MarkerPermission":"types/permissions","id-43855":"MarkerPermission","ResourcePermission":"types/permissions","id-43844":"ResourcePermission","ListedStudio":"types/records/studios","id-39731":"ListedStudio","LoadInstAction":"types/os/spaces","id-36732":"LoadInstAction","LoadSpaceAction":"types/os/spaces","id-36926":"LoadSpaceAction","LocalFormAnimationAction":"types/os/animations","id-36949":"LocalFormAnimationAction","LocalPositionTweenAction":"types/os/animations","id-36970":"LocalPositionTweenAction","LocalTweenAction":"types/os/animations","id-36985":"LocalTweenAction","LookRotation":"types/math/rotations","id-233":"LookRotation","MediaPermissionAction":"types/os/media","id-37351":"MediaPermissionAction","MediaPermissionOptions":"types/os/media","id-37348":"MediaPermissionOptions","MeetCommandAction":"types/os/meets","id-37235":"MeetCommandAction","MeetFunctionAction":"types/os/meets","id-37242":"MeetFunctionAction","NodeReference":"types/os/portals","id-37117":"NodeReference","Debugger":"types/debuggers/debugger","id-35602":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-35794":"NormalDebuggerOptions","OpenCircleWipeAction":"types/os/portals","id-37129":"OpenCircleWipeAction","OpenCircleWipeOptions":"types/os/portals","id-37136":"OpenCircleWipeOptions","OpenConsoleAction":"types/os/system","id-36701":"OpenConsoleAction","PhotoCameraOptions":"types/camera","id-36689":"PhotoCameraOptions","OpenURLAction":"types/os/portals","id-36843":"OpenURLAction","ParsedBotLink":"types/core","id-38199":"ParsedBotLink","PartialBotState":"types/core","id-38336":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-35658":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-35799":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-35814":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-35809":"PauseTriggerOptions","Photo":"types/camera","id-36685":"Photo","PlaySoundAction":"types/os/audio","id-36847":"PlaySoundAction","Point2D":"types/os/portals","id-37452":"Point2D","Point3D":"types/os/portals","id-37455":"Point3D","PossiblePauseTriggerLocation":"types/debuggers/common","id-35772":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-35848":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-226":"QuaternionRotation","RaycastFromCameraAction":"types/os/portals","id-37363":"RaycastFromCameraAction","RaycastInPortalAction":"types/os/portals","id-37370":"RaycastInPortalAction","RaycastRay":"types/os/portals","id-36006":"RaycastRay","RaycastResult":"types/os/portals","id-35994":"RaycastResult","RecordActionOptions":"types/records/extra","id-37722":"RecordActionOptions","RecordDataFailure":"types/records/data","id-40182":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-40178":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-35891":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-35887":"RecordFileSuccess","RecordFileRequest":"types/records/files","id-40357":"RecordFileRequest","RecordedFile":"types/experimental","id-37293":"RecordedFile","Recording":"types/experimental","id-37291":"Recording","RecordingOptions":"types/experimental","id-37210":"RecordingOptions","RegisterBuiltinPortalAction":"types/os/portals","id-37049":"RegisterBuiltinPortalAction","RegisterCustomAppAction":"types/os/portals","id-37055":"RegisterCustomAppAction","RegisterHtmlAppAction":"types/os/portals","id-37068":"RegisterHtmlAppAction","RegisterPrefixOptions":"types/core","id-37126":"RegisterPrefixOptions","RejectAction":"types/os/event","id-36893":"RejectAction","RemoteAction":"types/os/event","id-48044":"RemoteAction","ReportInstAction":"types/os/moderation","id-37303":"ReportInstAction","RequestAuthDataAction":"types/os/records","id-37308":"RequestAuthDataAction","RequestFullscreenAction":"types/os/portals","id-37033":"RequestFullscreenAction","RevokeMarkerPermissionFailure":"types/records/policies","id-43654":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-43652":"RevokeMarkerPermissionSuccess","RevokePermissionFailure":"types/records/policies","id-43688":"RevokePermissionFailure","RevokePermissionSuccess":"types/records/policies","id-43686":"RevokePermissionSuccess","RevokeResourcePermissionFailure":"types/records/policies","id-43677":"RevokeResourcePermissionFailure","RevokeResourcePermissionSuccess":"types/records/policies","id-43675":"RevokeResourcePermissionSuccess","RevokeRoleFailure":"types/records/roles","id-43736":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-43734":"RevokeRoleSuccess","RolePermission":"types/permissions","id-484":"RolePermission","RolePermissionOptions":"types/permissions","id-475":"RolePermissionOptions","RoomJoinOptions":"types/os/portals","id-37938":"RoomJoinOptions","RoomOptions":"types/os/portals","id-37934":"RoomOptions","RoomRemoteOptions":"types/os/portals","id-37993":"RoomRemoteOptions","RoomTrackOptions":"types/os/rooms","id-37971":"RoomTrackOptions","RunScriptAction":"types/os/system","id-36913":"RunScriptAction","RuntimeBot":"types/core","id-38150":"RuntimeBot","RuntimeBotLinks":"types/core","id-38202":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-38205":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-224":"SequenceRotation","SerializableMutationRecord":"types/os/portals","id-37105":"SerializableMutationRecord","SessionSelector":"types/os/event","id-35463":"SessionSelector","SetAppOutputAction":"types/os/portals","id-37080":"SetAppOutputAction","SetClipboardAction":"types/os/clipboard","id-36896":"SetClipboardAction","SetRoomOptionsFailure":"types/os/portals","id-35939":"SetRoomOptionsFailure","SetRoomOptionsSuccess":"types/os/portals","id-35936":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os/portals","id-37968":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os/portals","id-35971":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os/portals","id-35966":"SetRoomTrackOptionsSuccess","ShareAction":"types/os/input","id-37041":"ShareAction","ShareOptions":"types/os/input","id-37037":"ShareOptions","ShowChatBarAction":"types/os/input","id-36899":"ShowChatBarAction","ShowChatOptions":"types/os/input","id-36907":"ShowChatOptions","ShowConfirmAction":"types/os/input","id-36824":"ShowConfirmAction","ShowConfirmOptions":"types/os/input","id-36830":"ShowConfirmOptions","ShowHtmlAction":"types/os/portals","id-36596":"ShowHtmlAction","ShowInputItem":"types/os/input","id-36881":"ShowInputItem","ShowInputOptions":"types/os/input","id-36872":"ShowInputOptions","ShowJoinCodeAction":"types/os/barcodes","id-37029":"ShowJoinCodeAction","ShowToastAction":"types/os/portals","id-36576":"ShowToastAction","ShowTooltipAction":"types/os/portals","id-36581":"ShowTooltipAction","ShowUploadAuxFileAction":"types/os/input","id-36919":"ShowUploadAuxFileAction","ShowUploadFilesAction":"types/os/input","id-36921":"ShowUploadFilesAction","SnapAxis":"types/os/portals","id-37155":"SnapAxis","SnapGrid":"types/os/portals","id-37173":"SnapGrid","SnapGridTarget":"types/os/portals","id-35896":"SnapGridTarget","SnapPoint":"types/os/portals","id-37148":"SnapPoint","SpeakTextAction":"types/os/audio","id-37253":"SpeakTextAction","SpeakTextOptions":"types/experimental","id-35517":"SpeakTextOptions","StartFormAnimationAction":"types/os/animations","id-37404":"StartFormAnimationAction","StartFormAnimationOptions":"types/os/animations","id-37391":"StartFormAnimationOptions","StopFormAnimationAction":"types/os/animations","id-37426":"StopFormAnimationAction","StopFormAnimationOptions":"types/os/animations","id-37423":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os/geolocation","id-37277":"SuccessfulGeolocation","SyntheticVoice":"types/experimental","id-37267":"SyntheticVoice","TweenOptions":"types/experimental","id-35521":"TweenOptions","UnloadInstAction":"types/os/spaces","id-36736":"UnloadInstAction","UnregisterCustomAppAction":"types/os/portals","id-37062":"UnregisterCustomAppAction","UnregisterHtmlAppAction":"types/os/portals","id-37075":"UnregisterHtmlAppAction","UnsuccessfulGeolocation":"types/os/geolocation","id-37287":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-40727":"UpdateEventRecordFailure","UpdateEventRecordRequest":"types/records/events","id-40717":"UpdateEventRecordRequest","UpdateEventRecordSuccess":"types/records/events","id-40725":"UpdateEventRecordSuccess","UpdateHtmlAppAction":"types/os/portals","id-37085":"UpdateHtmlAppAction","UploadedFile":"types/os/files","id-36009":"UploadedFile","VRSupportedAction":"types/os/xr","id-37011":"VRSupportedAction","WakeLockConfiguration":"types/os/portals","id-37470":"WakeLockConfiguration","WebhookOptions":"types/web","id-35468":"WebhookOptions","WebhookResult":"types/web","id-35879":"WebhookResult","AIChatContent":"types/ai","id-38714":"AIChatContent","ActionKinds":"types/permissions","id-261":"ActionKinds","AddCountResult":"types/records/events","id-40696":"AddCountResult","AvailablePermissions":"types/permissions","id-268":"AvailablePermissions","BarcodeFormat":"types/os/barcodes","id-36710":"BarcodeFormat","BotAction":"types/os/event","id-36513":"BotAction","BotAnchorPoint":"types/core","id-38362":"BotAnchorPoint","BotFilter":"types/core","id-35505":"BotFilter","BotSpace":"types/core","id-38245":"BotSpace","CameraPortal":"types/os/portals","id-37451":"CameraPortal","CameraType":"types/os/camera","id-36664":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-39679":"CreatePublicRecordKeyResult","DataActionKinds":"types/permissions","id-262":"DataActionKinds","EaseMode":"types/animation","id-36955":"EaseMode","EaseType":"types/animation","id-36954":"EaseType","EraseDataResult":"types/records/data","id-40203":"EraseDataResult","EraseFileResult":"types/records/files","id-40384":"EraseFileResult","EventActionKinds":"types/permissions","id-264":"EventActionKinds","FileActionKinds":"types/permissions","id-263":"FileActionKinds","Geolocation":"types/os/geolocation","id-37276":"Geolocation","GetCountResult":"types/records/events","id-40706":"GetCountResult","GetDataResult":"types/records/data","id-40189":"GetDataResult","GetRoomOptionsResult":"types/os/portals","id-35944":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os/portals","id-35977":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os/portals","id-35953":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-43640":"GrantMarkerPermissionResult","GrantResourcePermissionResult":"types/records/policies","id-43663":"GrantResourcePermissionResult","GrantRoleResult":"types/records/roles","id-43722":"GrantRoleResult","InstActionKinds":"types/permissions","id-267":"InstActionKinds","JoinRoomResult":"types/os/portals","id-35917":"JoinRoomResult","LeaveRoomResult":"types/os/portals","id-35926":"LeaveRoomResult","ListDataResult":"types/records/data","id-40219":"ListDataResult","ListStudiosResult":"types/records/studios","id-39723":"ListStudiosResult","MarkerActionKinds":"types/permissions","id-265":"MarkerActionKinds","Mod":"types/core","id-35462":"Mod","PortalType":"types/core","id-38248":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-35776":"PossiblePauseTriggerStates","PublicRecordKeyPolicy":"types/records/key","id-40024":"PublicRecordKeyPolicy","RecordDataResult":"types/records/data","id-40177":"RecordDataResult","RecordFileResult":"types/records/files","id-35886":"RecordFileResult","RecordUserPolicyType":"types/records/extra","id-37730":"RecordUserPolicyType","ResourceKinds":"types/permissions","id-245":"ResourceKinds","RevokeMarkerPermissionResult":"types/records/policies","id-43651":"RevokeMarkerPermissionResult","RevokeResourcePermissionResult":"types/records/policies","id-43674":"RevokeResourcePermissionResult","RevokeRoleResult":"types/records/roles","id-43733":"RevokeRoleResult","RoleActionKinds":"types/permissions","id-266":"RoleActionKinds","SetRoomOptionsResult":"types/os/portals","id-35935":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os/portals","id-35965":"SetRoomTrackOptionsResult","ShowInputSuptype":"types/os/input","id-36885":"ShowInputSuptype","ShowInputType":"types/os/input","id-36884":"ShowInputType","SnapTarget":"types/os/portals","id-37167":"SnapTarget","StudioAssignmentRole":"types/records/studios","id-39987":"StudioAssignmentRole","SubjectType":"types/permissions","id-238":"SubjectType","TagFilter":"types/core","id-35458":"TagFilter","TrackKind":"types/records/rooms","id-37983":"TrackKind","TrackSource":"types/records/rooms","id-37984":"TrackSource","TrackVideoQuality":"types/os/rooms","id-37985":"TrackVideoQuality","UpdateEventRecordResult":"types/records/events","id-40724":"UpdateEventRecordResult","UserPolicy":"types/records/data","id-40304":"UserPolicy","animateTag-byOptions":"actions/os/animations","id-1053":"animateTag-byOptions","getbot-tag":"actions/data","id-718":"getbot-tag","getbots-tag":"actions/data","id-702":"getbots-tag","animateTag-byTag":"actions/os/animations","id-1047":"animateTag-byTag","changeState":"actions/data","id-863":"changeState","create":"actions/data","id-847":"create","destroy":"actions/data","id-851":"destroy","getbot-filters":"actions/data","id-711":"getbot-filters","getbots-filters":"actions/data","id-695":"getbots-filters","priorityShout":"actions/os/event","id-912":"priorityShout","shout":"actions/os/event","id-925":"shout","updateBotLinks":"actions/data","id-885":"updateBotLinks","whisper":"actions/os/event","id-951":"whisper","action.perform":"actions/os/event","id-34959":"action.perform","action.reject":"actions/os/event","id-34963":"action.reject","ai.chat-string":"actions/ai","id-1112":"ai.chat-string","ai.chat-message":"actions/ai","id-1115":"ai.chat-message","ai.chat-messages":"actions/ai","id-1118":"ai.chat-messages","ai.generateImage-string":"actions/ai","id-1131":"ai.generateImage-string","ai.generateImage-request":"actions/ai","id-1135":"ai.generateImage-request","ai.generateSkybox-string":"actions/ai","id-1123":"ai.generateSkybox-string","ai.generateSkybox-request":"actions/ai","id-1127":"ai.generateSkybox-request","applyDiffToSnapshot":"actions/data","id-768":"applyDiffToSnapshot","applyMod":"actions/mods","id-837":"applyMod","assert":"actions/debuggers","id-1096":"assert","assertEqual":"actions/debuggers","id-1101":"assertEqual","atPosition":"actions/bot-filters","id-982":"atPosition","byCreator":"actions/bot-filters","id-1003":"byCreator","byID":"actions/bot-filters","id-970":"byID","byMod":"actions/bot-filters","id-974":"byMod","bySpace":"actions/bot-filters","id-999":"bySpace","byTag":"actions/bot-filters","id-965":"byTag","bytes.fromBase64String":"actions/bytes","id-35172":"bytes.fromBase64String","bytes.fromBase64Url":"actions/bytes","id-35189":"bytes.fromBase64Url","bytes.fromHexString":"actions/bytes","id-35180":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-35168":"bytes.toBase64String","bytes.toBase64Url":"actions/bytes","id-35184":"bytes.toBase64Url","bytes.toHexString":"actions/bytes","id-35176":"bytes.toHexString","clearAnimations":"actions/os/animations","id-1067":"clearAnimations","clearTagMasks":"actions/data","id-791":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-35195":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-35201":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-35232":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-35225":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-35290":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-35285":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-35296":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-35281":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-35277":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-35261":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-35251":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-35256":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-35271":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-35300":"crypto.keypair","crypto.sha256":"actions/crypto","id-35217":"crypto.sha256","crypto.sha512":"actions/crypto","id-35221":"crypto.sha512","crypto.sign":"actions/crypto","id-35304":"crypto.sign","deleteTagMaskText":"actions/data","id-818":"deleteTagMaskText","deleteTagText":"actions/data","id-811":"deleteTagText","diffSnapshots":"actions/data","id-763":"diffSnapshots","either":"actions/bot-filters","id-1007":"either","os.beginAudioRecording":"actions/os/audio","id-35006":"os.beginAudioRecording","experiment.beginRecording":"actions/experimental","id-35013":"experiment.beginRecording","os.endAudioRecording":"actions/os/audio","id-35010":"os.endAudioRecording","experiment.endRecording":"actions/experimental","id-35017":"experiment.endRecording","experiment.getAnchorPointPosition":"actions/experimental","id-34996":"experiment.getAnchorPointPosition","experiment.getVoices":"actions/experimental","id-35025":"experiment.getVoices","experiment.localFormAnimation":"actions/experimental","id-34969":"experiment.localFormAnimation","experiment.localPositionTween":"actions/experimental","id-34974":"experiment.localPositionTween","experiment.localRotationTween":"actions/experimental","id-34985":"experiment.localRotationTween","experiment.speakText":"actions/experimental","id-35020":"experiment.speakText","getBotLinks":"actions/data","id-881":"getBotLinks","getBotPosition":"actions/data","id-737":"getBotPosition","getBotRotation":"actions/data","id-742":"getBotRotation","getBotTagValues":"actions/data","id-727":"getBotTagValues","getFormattedJSON":"actions/data","id-755":"getFormattedJSON","getID":"actions/data","id-747":"getID","getJSON":"actions/data","id-751":"getJSON","getLink":"actions/data","id-877":"getLink","getMod":"actions/mods","id-732":"getMod","getSnapshot":"actions/data","id-759":"getSnapshot","getTag":"actions/data","id-773":"getTag","inDimension":"actions/bot-filters","id-978":"inDimension","inStack":"actions/bot-filters","id-988":"inStack","insertTagMaskText":"actions/data","id-803":"insertTagMaskText","insertTagText":"actions/data","id-796":"insertTagText","math.abs":"actions/math","id-35042":"math.abs","math.addVectors":"actions/math","id-35112":"math.addVectors","math.areClose":"actions/math","id-35143":"math.areClose","math.avg":"actions/math","id-35034":"math.avg","math.degreesToRadians":"actions/math","id-35068":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-35108":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-35076":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-35050":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-35085":"math.intersectPlane","math.negateVector":"actions/math","id-35122":"math.negateVector","math.normalizeVector":"actions/math","id-35127":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-35072":"math.radiansToDegrees","math.random":"actions/math","id-35063":"math.random","math.randomInt":"actions/math","id-35058":"math.randomInt","math.scaleVector":"actions/math","id-35137":"math.scaleVector","math.setRandomSeed":"actions/math","id-35054":"math.setRandomSeed","math.sqrt":"actions/math","id-35038":"math.sqrt","math.stdDev":"actions/math","id-35046":"math.stdDev","math.subtractVectors":"actions/math","id-35117":"math.subtractVectors","math.sum":"actions/math","id-35030":"math.sum","math.vectorLength":"actions/math","id-35132":"math.vectorLength","neighboring":"actions/bot-filters","id-993":"neighboring","not":"actions/bot-filters","id-1014":"not","os.attachDebugger":"actions/debuggers","id-34915":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-34904":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-34908":"os.createDebugger-pausable","os.focusOn-bot":"actions/os/portals","id-1199":"os.focusOn-bot","os.focusOn-position":"actions/os/portals","id-1204":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-34912":"os.getExecutingDebugger","showChat-options":"actions/os/input","id-1226":"showChat-options","showChat-placeholder":"actions/os/input","id-1222":"showChat-placeholder","os.showInput":"actions/os/portals","id-1448":"os.showInput","os.addBotDropGrid":"actions/os/portals","id-1518":"os.addBotDropGrid","os.addBotDropSnap":"actions/os/portals","id-1509":"os.addBotDropSnap","os.addDropGrid":"actions/os/portals","id-1514":"os.addDropGrid","os.addDropSnap":"actions/os/portals","id-1505":"os.addDropSnap","os.applyUpdatesToInst":"actions/os/spaces","id-34867":"os.applyUpdatesToInst","os.arSupported":"actions/os/xr","id-1273":"os.arSupported","os.bufferFormAddressGLTF":"actions/os/animations","id-34817":"os.bufferFormAddressGLTF","os.bufferSound":"actions/os/audio","id-1481":"os.bufferSound","os.calculateRayFromCamera":"actions/os/portals","id-34812":"os.calculateRayFromCamera","os.cancelSound":"actions/os/audio","id-1485":"os.cancelSound","os.capturePhoto":"actions/os/camera","id-1368":"os.capturePhoto","os.closeBarcodeScanner":"actions/os/barcodes","id-1346":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/os/portals","id-1497":"os.closeCircleWipe","os.closeImageClassifier":"actions/os/image-classification","id-1361":"os.closeImageClassifier","os.closePhotoCamera":"actions/os/camera","id-1372":"os.closePhotoCamera","os.closeQRCodeScanner":"actions/os/barcodes","id-1332":"os.closeQRCodeScanner","os.compileApp":"actions/os/app","id-1632":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os/geolocation","id-34797":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/os/records","id-34784":"os.countEvents","os.createInitializationUpdate":"actions/os/spaces","id-34863":"os.createInitializationUpdate","os.device":"actions/os/system","id-1244":"os.device","os.disableAR":"actions/os/xr","id-1263":"os.disableAR","os.disablePointOfView":"actions/os/portals","id-1288":"os.disablePointOfView","os.disableVR":"actions/os/xr","id-1270":"os.disableVR","os.disableWakeLock":"actions/os/portals","id-1294":"os.disableWakeLock","os.download":"actions/os/files","id-1300":"os.download","os.downloadBots":"actions/os/files","id-1306":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/os/files","id-1311":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/os/files","id-1319":"os.downloadInst","os.enableAR":"actions/os/xr","id-1259":"os.enableAR","os.enableCollaboration":"actions/os/spaces","id-1250":"os.enableCollaboration","os.enableCustomDragging":"actions/os/portals","id-1523":"os.enableCustomDragging","os.enablePointOfView":"actions/os/portals","id-1279":"os.enablePointOfView","os.enableVR":"actions/os/xr","id-1266":"os.enableVR","os.eraseData":"actions/os/records","id-34727":"os.eraseData","os.eraseManualApprovalData":"actions/os/records","id-34733":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/os/portals","id-1170":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os/portals","id-1580":"os.getAverageFrameRate","os.getCameraPosition":"actions/os/portals","id-1536":"os.getCameraPosition","os.getCameraRotation":"actions/os/portals","id-1540":"os.getCameraRotation","os.getCurrentDimension":"actions/os/portals","id-1419":"os.getCurrentDimension","os.getCurrentInst":"actions/os/portals","id-1425":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os/spaces","id-34871":"os.getCurrentInstUpdate","os.getData":"actions/os/records","id-34702":"os.getData","os.getDimensionalDepth":"actions/os/portals","id-1438":"os.getDimensionalDepth","os.getFocusPoint":"actions/os/portals","id-1548":"os.getFocusPoint","os.getGeolocation":"actions/os/geolocation","id-1530":"os.getGeolocation","os.getInputList":"actions/os/portals","id-1573":"os.getInputList","os.getInputState":"actions/os/portals","id-1568":"os.getInputState","os.getInstStateFromUpdates":"actions/os/spaces","id-34859":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/os/records","id-34708":"os.getManualApprovalData","os.getMediaPermission":"actions/os/media","id-1576":"os.getMediaPermission","os.getMenuDimension":"actions/os/portals","id-1428":"os.getMenuDimension","os.getMiniPortalDimension":"actions/os/portals","id-1431":"os.getMiniPortalDimension","os.getPointerDirection":"actions/os/portals","id-1564":"os.getPointerDirection","os.getPointerPosition":"actions/os/portals","id-1552":"os.getPointerPosition","os.getPointerRotation":"actions/os/portals","id-1556":"os.getPointerRotation","os.getPortalDimension":"actions/os/portals","id-1434":"os.getPortalDimension","os.getPublicRecordKey":"actions/os/records","id-34629":"os.getPublicRecordKey","os.getRecordsEndpoint":"actions/os/records","id-34794":"os.getRecordsEndpoint","os.getRoomOptions":"actions/os/rooms","id-1598":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/os/rooms","id-1613":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/os/rooms","id-1602":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/os/records","id-34633":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os/portals","id-1297":"os.getWakeLockConfiguration","os.goToDimension":"actions/os/portals","id-1462":"os.goToDimension","os.goToURL":"actions/os/portals","id-1466":"os.goToURL","os.grantInstAdminPermission":"actions/os/records","id-34649":"os.grantInstAdminPermission","os.grantInstRole":"actions/os/records","id-34669":"os.grantInstRole","os.grantPermission":"actions/os/records","id-34637":"os.grantPermission","os.grantUserRole":"actions/os/records","id-34654":"os.grantUserRole","os.hasBotInMiniPortal":"actions/os/portals","id-1489":"os.hasBotInMiniPortal","os.hideBarcode":"actions/os/barcodes","id-1354":"os.hideBarcode","os.hideChat":"actions/os/input","id-1234":"os.hideChat","os.hideHtml":"actions/os/portals","id-1177":"os.hideHtml","os.hideQRCode":"actions/os/barcodes","id-1339":"os.hideQRCode","os.hideTips":"actions/os/portals","id-1158":"os.hideTips","os.importAUX":"actions/os/files","id-1403":"os.importAUX","os.inSheet":"actions/os/portals","id-1533":"os.inSheet","os.isCollaborative":"actions/os/spaces","id-1247":"os.isCollaborative","os.isInDimension":"actions/os/portals","id-1415":"os.isInDimension","os.isRecordKey":"actions/os/records","id-34684":"os.isRecordKey","os.joinRoom":"actions/os/rooms","id-1583":"os.joinRoom","os.ldrawCountTextBuildSteps":"actions/os/ldraw","id-34836":"os.ldrawCountTextBuildSteps","os.leaveRoom":"actions/os/rooms","id-1588":"os.leaveRoom","os.listBuiltinTags":"actions/os/app","id-34617":"os.listBuiltinTags","os.listData":"actions/os/records","id-34714":"os.listData","os.listDataByMarker":"actions/os/records","id-34720":"os.listDataByMarker","os.listFormAnimations":"actions/os/animations","id-34832":"os.listFormAnimations","os.listInstUpdates":"actions/os/spaces","id-34856":"os.listInstUpdates","os.listUserStudios":"actions/os/records","id-34790":"os.listUserStudios","os.loadInst":"actions/os/spaces","id-1395":"os.loadInst","os.log":"actions/os/system","id-1526":"os.log","os.meetCommand":"actions/os/meets","id-34892":"os.meetCommand","os.meetFunction":"actions/os/meets","id-34897":"os.meetFunction","os.mergeInstUpdates":"actions/os/spaces","id-34874":"os.mergeInstUpdates","os.openBarcodeScanner":"actions/os/barcodes","id-1342":"os.openBarcodeScanner","os.openCircleWipe":"actions/os/portals","id-1501":"os.openCircleWipe","os.openDevConsole":"actions/os/system","id-1474":"os.openDevConsole","os.openImageClassifier":"actions/os/image-classification","id-1357":"os.openImageClassifier","os.openPhotoCamera":"actions/os/camera","id-1364":"os.openPhotoCamera","os.openQRCodeScanner":"actions/os/barcodes","id-1328":"os.openQRCodeScanner","os.openURL":"actions/os/portals","id-1470":"os.openURL","os.parseBotsFromData":"actions/os/files","id-1407":"os.parseBotsFromData","os.playSound":"actions/os/audio","id-1477":"os.playSound","os.raycast":"actions/os/portals","id-34806":"os.raycast","os.raycastFromCamera":"actions/os/portals","id-34801":"os.raycastFromCamera","os.recordData":"actions/os/records","id-34688":"os.recordData","os.recordEvent":"actions/os/records","id-34778":"os.recordEvent","os.recordFile":"actions/os/records","id-34739":"os.recordFile","os.recordManualApprovalData":"actions/os/records","id-34695":"os.recordManualApprovalData","os.registerApp":"actions/os/app","id-1623":"os.registerApp","os.registerTagPrefix":"actions/os/app","id-1618":"os.registerTagPrefix","os.remoteCount":"actions/os/remotes","id-34878":"os.remoteCount","os.remotes":"actions/os/remotes","id-34853":"os.remotes","os.replaceDragBot":"actions/os/portals","id-1411":"os.replaceDragBot","os.reportInst":"actions/os/moderation","id-34620":"os.reportInst","os.requestAuthBot":"actions/os/records","id-34623":"os.requestAuthBot","os.requestAuthBotInBackground":"actions/os/records","id-34626":"os.requestAuthBotInBackground","os.requestFullscreenMode":"actions/os/portals","id-1167":"os.requestFullscreenMode","os.requestWakeLock":"actions/os/portals","id-1291":"os.requestWakeLock","os.revokeInstRole":"actions/os/records","id-34677":"os.revokeInstRole","os.revokePermission":"actions/os/records","id-34643":"os.revokePermission","os.revokeUserRole":"actions/os/records","id-34662":"os.revokeUserRole","os.run":"actions/os/system","id-1237":"os.run","os.setClipboard":"actions/os/clipboard","id-1180":"os.setClipboard","os.setRoomOptions":"actions/os/rooms","id-1593":"os.setRoomOptions","os.setRoomTrackOptions":"actions/os/rooms","id-1607":"os.setRoomTrackOptions","os.share":"actions/os/input","id-1493":"os.share","os.showAccountInfo":"actions/os/system","id-1253":"os.showAccountInfo","os.showBarcode":"actions/os/barcodes","id-1349":"os.showBarcode","os.showConfirm":"actions/os/portals","id-1458":"os.showConfirm","os.showHtml":"actions/os/portals","id-1173":"os.showHtml","os.showInputForTag":"actions/os/portals","id-1442":"os.showInputForTag","os.showJoinCode":"actions/os/barcodes","id-1162":"os.showJoinCode","os.showQRCode":"actions/os/barcodes","id-1335":"os.showQRCode","os.showUploadAuxFile":"actions/os/files","id-1322":"os.showUploadAuxFile","os.showUploadFiles":"actions/os/files","id-1325":"os.showUploadFiles","os.sleep":"actions/os/system","id-1142":"os.sleep","os.startFormAnimation":"actions/os/animations","id-34821":"os.startFormAnimation","os.stopFormAnimation":"actions/os/animations","id-34827":"os.stopFormAnimation","os.tip":"actions/os/portals","id-1151":"os.tip","os.toast":"actions/os/portals","id-1146":"os.toast","os.totalRemoteCount":"actions/os/remotes","id-34882":"os.totalRemoteCount","os.unloadInst":"actions/os/spaces","id-1399":"os.unloadInst","os.unregisterApp":"actions/os/app","id-1628":"os.unregisterApp","os.version":"actions/os/system","id-1241":"os.version","os.vrSupported":"actions/os/xr","id-1276":"os.vrSupported","os.agreedUponTime":"actions/os/time","id-1376":"os.agreedUponTime","os.deadReckoningTime":"actions/os/time","id-1384":"os.deadReckoningTime","os.instLatency":"actions/os/time","id-1378":"os.instLatency","os.instTimeOffset":"actions/os/time","id-1380":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/os/time","id-1382":"os.instTimeOffsetSpread","os.localTime":"actions/os/time","id-1374":"os.localTime","remote":"actions/os/event","id-1021":"remote","sendRemoteData":"actions/os/event","id-1033":"sendRemoteData","removeTags":"actions/data","id-826":"removeTags","renameTag":"actions/data","id-831":"renameTag","setTag":"actions/data","id-778":"setTag","setTagMask":"actions/data","id-784":"setTagMask","subtractMods":"actions/mods","id-842":"subtractMods","superShout":"actions/os/event","id-907":"superShout","uuid":"actions/data","id-1044":"uuid","web.get":"actions/web","id-35323":"web.get","web.hook":"actions/web","id-35334":"web.hook","web.post":"actions/web","id-35328":"web.post","configBot":"actions/os/system","id-1107":"configBot"}}');var n=s(1601);s(5058),s(6967);const i={id:"records",title:"Records Actions",sidebar_label:"Records",description:"Records are a way to store permenent data in CasualOS."},c=void 0,d={id:"actions/os/records",title:"Records Actions",description:"Records are a way to store permenent data in CasualOS.",source:"@site/docs/actions/os/records.mdx",sourceDirName:"actions/os",slug:"/actions/os/records",permalink:"/actions/os/records",draft:!1,unlisted:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/actions/os/records.mdx",tags:[],version:"current",frontMatter:{id:"records",title:"Records Actions",sidebar_label:"Records",description:"Records are a way to store permenent data in CasualOS."},sidebar:"docs",previous:{title:"System",permalink:"/actions/os/system"},next:{title:"Remotes",permalink:"/actions/os/remotes"}},l={},m=[...(0,n.KO)(a)];function u(e){return(0,o.jsx)(n.hl,{doc:a})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u()}},1601:(e,t,s)=>{s.d(t,{hl:()=>F,KO:()=>P});var o=s(79),r=s(5058),a=s(6144),n=s(8405),i=s(1888),c=s(5250);class d extends o.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0,error:e}}componentDidCatch(e,t){const s="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw s;console.error(s)}render(){return this.state.hasError?(0,c.jsxs)("h1",{children:["[",this.props.reflection.name,"] ",this.state.error]}):this.props.children}}var l=s(1537),m=s(6967),u=s(7544),p=s(3324),g=s(5834),y=s(1623);function h(e){void 0===e&&(e={});const t=e.references;return e=>{(0,g.Vn)(e,"link",(e=>{if(e.url.startsWith("tags:")){const t=e.url.slice(5);t.startsWith("@")?e.url=(0,l.Z)("tags/listen")+f(t.slice(1)):e.url=(0,l.Z)(y.L0[t])+f(t)}else if(e.url.startsWith("ref:")){const s=e.url.slice(4),o=t[s];e.url=(0,l.Z)(o)+"#"+s}else if(e.url.startsWith("glossary:")){const t=e.url.slice(9);e.url=(0,l.Z)("glossary")+"#"+x(t)}else if(e.url.startsWith("page:")){const[t,s]=e.url.slice(5).split("#");e.url=(0,l.Z)(t)+"#"+s}}))}}function f(e){return"#"+x(e)}function x(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function b(e){return void 0===e&&(e={}),e=>{e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}const k={Project:1,Module:2,Namespace:4,Enum:8,EnumMember:16,Variable:32,Function:64,Class:128,Interface:256,Constructor:512,Property:1024,Method:2048,CallSignature:4096,IndexSignature:8192,ConstructorSignature:16384,Parameter:32768,TypeLiteral:65536,TypeParameter:131072,Accessor:262144,GetSignature:524288,SetSignature:1048576,TypeAlias:2097152,Reference:4194304};console.log("ReflectionKind",k);const R=new Map([[k.Property,["type"]],["reflection",["declaration"]],[k.TypeLiteral,["children","signatures"]],[k.CallSignature,["parameters","comment","type"]]]);function v(e,t,s){void 0===s&&(s=null),function(e,t,s){var o;void 0===s&&(s=null);let r=R.get(null!=(o=e.kind)?o:e.type)||[];for(let a of r){let o=e[a];if(Array.isArray(o))for(let e of o)e&&t(e,s,a);else o&&t(o,s,a)}}(e,((e,s,o)=>{t(e,s,o),v(e,t,e)}))}function A(e,t){let s=[];return t(e)&&s.push(e),v(e,((e,o,r)=>{t(e,o,r)&&s.push(e)})),s}const S=["first","second","third","fourth","fifth"];function w(e,t){return e.name+"-"+t.name}function T(e,t){const s=w(e,t);let o;var r;return o=t.kind===k.Constructor?$(t.signatures[0],be(t)):t.kind===k.Method?$(t.signatures[0]):t.kind===k.Accessor?(r=t).name+": "+de(r.getSignature.type):re(t),o="<span>"+o+"</span>",{value:o,id:s,level:3}}function N(e){let t=[],{properties:s,constructors:o,methods:r}=function(e){let t=[],s=[],o=[];if(!e)return{properties:t,constructors:s,methods:o};for(let r of e)r.flags.isPrivate||(r.kind===k.Property||r.kind===k.Accessor?t.push(r):r.kind===k.Constructor?s.push(r):r.kind===k.Method&&o.push(r));return{properties:t,constructors:s,methods:o}}(e.children);return s.length>0&&t.push(...s.map((t=>T(e,t)))),o.length>0&&t.push(...o.map((t=>T(e,t)))),r.length>0&&t.push(...r.map((t=>T(e,t)))),t}function P(e){let t=[{value:e.pageTitle,id:"",level:2}];for(let s of e.contents)if(s.reflection.kind===k.Interface||s.reflection.kind===k.Class){const e=be(s.reflection),o=ke(s.reflection);t.push({value:e,id:o,level:2}),s.reflection.kind===k.Class&&t.push(...N(s.reflection))}else if(s.reflection.kind===k.CallSignature){const e=be(s.reflection),o=ke(s.reflection);t.push({value:"<span>"+$(s.reflection,e)+"</span>",id:o,level:2})}else if(s.reflection.kind===k.TypeAlias){const e=be(s.reflection),o=ke(s.reflection);t.push({value:e,id:o,level:2})}else if(s.reflection.kind===k.GetSignature||s.reflection.kind===k.SetSignature){const e=be(s.reflection),o=ke(s.reflection);t.push({value:"<code>"+$(s.reflection,e)+"</code>",id:o,level:2})}else{const e=be(s.reflection),o=ke(s.reflection);t.push({value:e,id:o,level:2})}return t}function F(e){let{doc:t}=e;const s=t.contents,o=t.references;return(0,c.jsx)("ul",{className:"api api-list",children:s.map((e=>(0,c.jsx)("li",{className:"api-member-item",children:(0,c.jsx)(O,{reflection:e.reflection,references:o})},e.id)))})}function O(e){let{reflection:t,references:s}=e;return t.kind===k.Interface||t.kind===k.Class?(0,c.jsx)(G,{reflection:t,references:s}):t.kind===k.CallSignature||t.kind===k.GetSignature||t.kind===k.SetSignature?(0,c.jsx)(M,{reflection:t,references:s}):t.kind===k.TypeAlias?(0,c.jsx)(D,{reflection:t,references:s}):(0,c.jsx)(L,{reflection:t,references:s})}function D(e){let{reflection:t,references:s}=e;const o=be(t),a=ke(t);return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h2",id:a,children:o}),(0,c.jsx)(K,{reflection:t,references:s}),(0,c.jsx)(j,{reflection:t,name:o,references:s}),(0,c.jsx)(te,{member:t})]})}function j(e){let{reflection:t,name:s,references:o}=e,r="";return"union"===t.type.type&&(r=(0,c.jsx)(I,{type:t.type,name:s,references:o})),r}function I(e){let{type:t,name:s,references:o}=e;return(0,c.jsxs)("div",{children:[(0,c.jsxs)("p",{children:["A ",s," can be one of the following values:"]}),(0,c.jsx)("ul",{children:t.types.map(((e,t)=>(0,c.jsx)(C,{type:e,references:o},t)))})]})}function C(e){let{type:t,references:s}=e;return(0,c.jsx)("li",{children:(0,c.jsx)("code",{children:(0,c.jsx)(ce,{type:t,references:s})})})}function G(e){let{reflection:t,references:s}=e;const o=be(t),a=ke(t);return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h2",id:a,children:o}),(0,c.jsx)(B,{reflection:t,references:s}),(0,c.jsx)(te,{member:t})]})}function L(e){let{reflection:t,references:s}=e;const o=be(t),a=ke(t);return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h2",id:a,children:o}),(0,c.jsx)(W,{reflection:t,references:s}),(0,c.jsx)(te,{member:t})]})}function M(e){let{reflection:t,references:s}=e;const o=be(t),r=ke(t);return(0,c.jsx)("div",{children:(0,c.jsx)(J,{func:t,sig:t,name:o,link:r,references:s})})}function B(e){var t;const s=e.reflection;if(!s)throw new Error("Unable to find "+e.name+"!");const o=function(e){return(0,i.sortBy)(e,(e=>e.kind===k.Property||e.kind===k.Accessor?0:e.kind===k.Constructor?1:2)).filter((e=>!e.flags.isPrivate))}(null!=(t=s.children)?t:[]);return(0,c.jsx)(d,{reflection:s,root:!0,children:(0,c.jsxs)("div",{className:"api",children:[(0,c.jsx)(K,{reflection:s,references:e.references}),(0,c.jsx)(r.Z,{as:"h3",id:s.name+"-properties",children:"Members"}),(0,c.jsx)("div",{children:(0,c.jsxs)("ul",{className:"class-members-list",children:[s.indexSignature?(0,c.jsx)(U,{reflection:s,index:s.indexSignature,references:e.references}):"",s.references?(0,c.jsx)(E,{prop:s,references:e.references}):"",o.map((t=>(0,c.jsx)(q,{member:t,link:w(s,t),references:e.references},t.name)))]})})]})})}function U(e){let{reflection:t,index:s,references:o}=e;const a=s.parameters[0];return(0,c.jsxs)("li",{className:"class-member-item",children:[(0,c.jsx)(r.Z,{as:"h4",id:t.name+"-_index",children:"Index Signature"}),(0,c.jsx)(K,{reflection:s,references:o}),(0,c.jsx)("pre",{children:(0,c.jsxs)("code",{children:["[",a.name,": ",(0,c.jsx)(ce,{type:a.type,references:o}),"]: ",(0,c.jsx)(ce,{type:s.type,references:o})]})}),(0,c.jsx)(te,{member:s})]})}function K(e){let{reflection:t,references:s}=e;return(0,c.jsx)("div",{children:(0,c.jsx)(z,{comment:t.comment,references:s})})}function q(e){let t;return t=e.member.kind===k.Property?function(e){let t,s=e.member,o="";s.references?(o=(0,c.jsx)(_,{prop:s,references:e.references}),t=(0,c.jsx)(c.Fragment,{children:s.typeReference})):"reflection"===s.type.type&&s.typeText&&s.typeReference?(t=(0,c.jsx)(c.Fragment,{children:s.typeReference}),o=(0,c.jsx)(a.Z,{language:"typescript",children:s.typeText})):t=(0,c.jsx)(ce,{type:e.member.type,references:e.references});!o&&s.typeText&&s.typeReference&&(o=(0,c.jsx)(a.Z,{language:"typescript",children:s.typeText}));const n=be(s);ke(s);return(0,c.jsxs)("div",{className:"class-member-property",children:[(0,c.jsxs)(r.Z,{as:"h4",id:e.link,children:[(0,c.jsxs)("span",{className:"class-member-name",children:[n,e.member.flags.isOptional?(0,c.jsx)("span",{className:"class-member-optional",children:"?"}):""]})," ",(0,c.jsx)("span",{className:"class-member-type",children:t})]}),(0,c.jsx)(K,{reflection:e.member,references:e.references}),o]})}(e):e.member.kind===k.Constructor?function(e){const t=be(e.member);return(0,c.jsx)("div",{children:(0,c.jsx)(J,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references})})}(e):e.member.kind===k.Method?function(e){const t=be(e.member);return(0,c.jsx)("div",{children:(0,c.jsx)(J,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references})})}(e):e.member.kind===k.Accessor?function(e){var t;return(0,c.jsxs)("div",{className:"class-member-property",children:[(0,c.jsxs)(r.Z,{as:"h4",id:e.link,children:[(0,c.jsx)("span",{className:"class-member-name",children:e.member.name})," ",(0,c.jsx)("span",{className:"class-member-type",children:(0,c.jsx)(ce,{type:e.member.getSignature.type,references:e.references})})]}),(0,c.jsx)("p",{children:null==(t=e.member.getSignature.comment)?void 0:t.text})]})}(e):"Kind not found "+e.member.kind,(0,c.jsxs)(d,{reflection:e.member,children:[(0,c.jsx)("span",{role:"separator",className:"class-member-separator"}),(0,c.jsx)("li",{className:"class-member-item",children:t})]})}function E(e){let{prop:t,references:s}=e;const o=ke(t);return(0,c.jsxs)("li",{className:"class-member-item",children:[(0,c.jsx)(r.Z,{as:"h4",id:o+"-extra-functions",children:"Extra Functions"}),(0,c.jsx)("p",{children:"The extra functions that are available on this type."}),(0,c.jsxs)(n.Z,{children:[(0,c.jsx)("p",{children:"See the following functions for more information:"}),(0,c.jsx)(Q,{children:t.references,references:s})]})]})}function _(e){let{prop:t,references:s}=e;return(0,c.jsxs)(n.Z,{children:[(0,c.jsx)("p",{children:"See the following functions for more information:"}),(0,c.jsx)(Q,{children:t.references,references:s})]})}function W(e){const t=e.reflection,s=(t.type.declaration,Ne(t));return(0,c.jsx)(d,{reflection:t,root:!0,children:(0,c.jsxs)("div",{className:"api",children:[(0,c.jsx)(K,{reflection:t,references:e.references}),s.map((t=>(0,c.jsx)(V,{group:t,references:e.references},t.group)))]})})}function V(e){let{group:t,references:s}=e;const o=t.children,a=we(t);return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h3",id:t.group,children:a}),o.map((e=>(0,c.jsx)(H,{namespace:e.namespace,name:e.name,property:e.child,link:w(e.reflection,e.child),references:s},e.child.id)))]})}function H(e){let t;if(me(e.property)){var s;const o=e.namespace?e.namespace+"."+e.name:e.name,r=e.property.type.declaration;t=J({name:o,func:e.property,sig:null!=(s=ve(r.signatures))?s:r.signatures[0],link:e.link,references:e.references})}else if(pe(e.property)){const s=e.namespace?e.namespace+"."+e.name:e.name,o=Ae(e.property);t=J({name:s,func:e.property,sig:o,link:e.link,references:e.references})}else t=ye(e.property)?(0,c.jsxs)(c.Fragment,{children:["This is really fun! ",e.property.name]}):e.property.kind===k.Property?function(e){return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h3",id:e.link,children:(0,c.jsxs)("code",{children:[e.property.name,": ",(0,c.jsx)(ce,{type:e.property.type,references:e.references})]})}),(0,c.jsx)(K,{reflection:e.property,references:e.references})]})}(e):"Kind Not found "+e.property.kind;return(0,c.jsx)(d,{reflection:e.property,children:(0,c.jsx)("div",{children:t})})}function J(e){let{func:t,sig:s,link:o,name:a,references:n}=e;const i=s.parameters||[];return(0,c.jsxs)("div",{children:[(0,c.jsx)(r.Z,{as:"h4",id:o,children:(0,c.jsx)(X,{func:t,sig:s,name:a,references:n})}),(0,c.jsx)(Z,{sig:s,references:n}),i.length>0?(0,c.jsx)("div",{children:i.map(((e,t)=>(0,c.jsx)(ee,{param:e,index:t,references:n},e.name)))}):"",(0,c.jsx)(te,{member:s})]})}function Z(e){let{sig:t,references:s}=e;return(0,c.jsx)(z,{comment:t.comment,references:s})}function z(e){let{comment:t,references:s}=e;return(0,c.jsx)(Q,{references:s,children:Y(t)})}function Q(e){let{children:t,remarkPlugins:s,rehypePlugins:o,references:r}=e;return(0,c.jsx)(u.U,{remarkPlugins:[[h,{references:r}],...s||[]],rehypePlugins:[p.Z,...o||[]],children:t})}function Y(e){let t="";if(e&&e.summary)for(let s of e.summary)t+=s.text;return t}function X(e){let{func:t,sig:s,name:o,references:r}=e;const a=s.parameters||[];let n="";return t.kind!==k.GetSignature&&(n=(0,c.jsxs)(c.Fragment,{children:["(",a.map(((e,t)=>(0,c.jsxs)("span",{children:[t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",(0,c.jsx)(ce,{type:e.type,references:r})]},e.name))),")"]})),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)("span",{className:"function-member-name",children:[(t.flags.isStatic?"static ":"")+(o||s.name),n]}),": ",(0,c.jsx)("span",{className:"function-member-type",children:(0,c.jsx)(ce,{type:s.type,references:r})})]})}function $(e,t){void 0===t&&(t=e.name);const s=e.parameters||[];let o="";return e.kind!==k.GetSignature&&(o="("+s.map(((e,t)=>(e.flags.isRest?"...":"")+e.name)).join(", ")+")"),""+t+o+": "+de(e.type)}function ee(e){let t,{param:s,index:o,references:r}=e;return t=s.flags.isRest&&s.type.elementType?0===o?(0,c.jsxs)("p",{children:[(0,c.jsx)("em",{children:"Each parameter"})," is a ",(0,c.jsx)(ce,{type:s.type.elementType,references:r})," and are ",(0,c.jsx)(ae,{param:s,isRest:!0,references:r})]}):(0,c.jsxs)("p",{children:[(0,c.jsx)("em",{children:"Each other parameter"})," is a ",(0,c.jsx)(ce,{type:s.type.elementType,references:r})," and are ",(0,c.jsx)(ae,{param:s,isRest:!0,references:r})]}):(0,c.jsxs)("p",{children:["The ",(0,c.jsxs)("em",{children:[oe(o)," parameter"]})," is",s.flags.isOptional?" optional and is":""," a ",(0,c.jsx)(ce,{type:s.type,references:r})," and ",(0,c.jsx)(ae,{param:s,references:r})]}),t}function te(e){var t;let{member:s}=e;if(null==(t=s.comment)||!t.blockTags)return"";const o=s.comment.blockTags.filter((e=>"@example"===e.tag));return o.length>0?(0,c.jsxs)("div",{children:[(0,c.jsx)("h5",{className:"examples-heading",children:"Examples"}),o.map(((e,t)=>(0,c.jsx)(se,{example:e},t)))]}):""}function se(e){let{example:t}=e;const s=t.content.map((e=>e.text)).join(""),o=s.indexOf("\n"),r=s.indexOf("\n",o+1);let n="typescript";o>3&&(n=s.substring(3,o).trim());const i=s.lastIndexOf("```"),d=s.substring(o,r),l=s.substring(r,i);return(0,c.jsx)(a.Z,{language:n,title:d.trim(),children:l.trim()})}function oe(e){return S[e]}function re(e,t){let s;return void 0===t&&(t=e.name),s=e.typeReference?e.typeReference:de(e.type),t+(e.flags.isOptional?"?":"")+": "+s}function ae(e){let{param:t,isRest:s,references:o}=e;return(0,c.jsx)(Q,{remarkPlugins:[b],references:o,children:ne(t,s)})}function ne(e,t){let s=Y(e.comment);return s?(s=s.slice(0,1).toLowerCase()+s.slice(1),s.startsWith("the")&&!t&&(s="is "+s),s):""}const ie=new Map([["ArrayBuffer","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"],["Blob","https://developer.mozilla.org/en-US/docs/Web/API/Blob"],["Uint8Array","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"],["RegExp","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"],["Function","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"],["Error","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"]]);function ce(e){let{type:t,references:s,isInUnionOrArray:r}=e;if("intrinsic"===t.type)return(0,c.jsx)("span",{children:t.name});if(t.name){var a,n,i,d,u,p;if(t.name===(null==(a=t.target)?void 0:a.qualifiedName)&&ie.has(t.name)){const e=ie.get(t.name);return(0,c.jsx)(c.Fragment,{children:(0,c.jsx)("a",{className:"type-link",href:e,children:t.name})})}if("Promise"===t.name&&"Promise"===(null==(n=t.target)?void 0:n.qualifiedName)&&t.typeArguments&&1===t.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"Promise"}),"<",(0,c.jsx)(ce,{type:t.typeArguments[0],references:s}),">"]});if("Partial"===t.name&&"Partial"===(null==(i=t.target)?void 0:i.qualifiedName)&&t.typeArguments&&1===t.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype",children:"Partial"}),"<",(0,c.jsx)(ce,{type:t.typeArguments[0],references:s}),">"]});if("Omit"===t.name&&"Omit"===(null==(d=t.target)?void 0:d.qualifiedName)&&t.typeArguments&&2===t.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys",children:"Omit"}),"<",(0,c.jsx)(ce,{type:t.typeArguments[0],references:s}),", ",(0,c.jsx)(ce,{type:t.typeArguments[1],references:s}),">"]});if("Map"===t.name&&"Map"===(null==(u=t.target)?void 0:u.qualifiedName)&&t.typeArguments&&2===t.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:"Map"}),"<",(0,c.jsx)(ce,{type:t.typeArguments[0],references:s}),", ",(0,c.jsx)(ce,{type:t.typeArguments[1],references:s}),">"]});if("Set"===t.name&&"Set"===(null==(p=t.target)?void 0:p.qualifiedName)&&t.typeArguments&&1===t.typeArguments.length)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("a",{className:"type-link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",children:"Set"}),"<",(0,c.jsx)(ce,{type:t.typeArguments[0],references:s}),">"]});let e="#"+t.name;const o=t.id?null==s?void 0:s["id-"+t.id]:null;if(o){const t=null==s?void 0:s[o];t&&(e=(0,l.Z)(t)+"#"+o)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry. ");return(0,c.jsx)(m.Z,{className:"type-link",href:e,children:t.name})}if("union"===t.type)return(0,c.jsxs)("span",{children:["(",t.types.map(((e,t)=>(0,c.jsxs)(o.Fragment,{children:[t>0?" | ":"",(0,c.jsx)(ce,{type:e,references:s,isInUnionOrArray:!0})]},t))),")"]});if("array"===t.type)return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(ce,{type:t.elementType,references:s,isInUnionOrArray:!0}),"[]"]});if("literal"===t.type)return"string"==typeof t.value?(0,c.jsxs)("span",{children:['"',t.value,'"']}):"number"==typeof t.value?(0,c.jsx)("span",{children:t.value}):"boolean"==typeof t.value?(0,c.jsx)("span",{children:t.value?"true":"false"}):void 0===t.value?(0,c.jsx)("span",{children:"undefined"}):null===t.value?(0,c.jsx)("span",{children:"null"}):""+JSON.stringify(t);if("reflection"===t.type){const e=t.declaration;if(e.kind===k.TypeLiteral&&e.signatures&&!e.children){var g;const t=null!=(g=ve(e.signatures))?g:e.signatures[0],o=t.parameters||[];return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("span",{children:[r?"(":"","(",o.map(((e,t)=>(0,c.jsxs)("span",{children:[t>0?",":"",e.name,": ",(0,c.jsx)(ce,{type:e.type,references:s})]},t))),") => ",(0,c.jsx)(ce,{type:t.type,references:s}),r?")":""]})})}return"object"}if("intersection"===t.type){return t.types.map(((e,t)=>(0,c.jsxs)(c.Fragment,{children:[t>0?" & ":"",(0,c.jsx)(ce,{type:e,references:s,isInUnionOrArray:!0})]})))}if("tuple"===t.type){const e=t.elements.map(((e,t)=>(0,c.jsxs)(c.Fragment,{children:[t>0?", ":"",(0,c.jsx)(ce,{type:e,references:s,isInUnionOrArray:!0})]})));return(0,c.jsxs)("span",{children:["[",e,"]"]})}return"typeOperator"===t.type?(0,c.jsxs)("span",{children:[t.operator," ",(0,c.jsx)(ce,{type:t.target,references:s,isInUnionOrArray:!0})]}):""+JSON.stringify(t)}function de(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+de(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((e=>de(e))).join(" | ")+")":"array"===e.type?de(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function le(e){return me(e)||pe(e)}function me(e){return e&&ue(e.type)}function ue(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((e=>e.kind===k.CallSignature))}function pe(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((e=>ue(e)))}function ge(e){return e&&e.kind===k.CallSignature}function ye(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&e.type.declaration.kind===k.TypeLiteral&&e.type.declaration.children}function he(e,t){var s;const o=null==(s=e.comment)||null==(s=s.blockTags)?void 0:s.find((e=>e.tag===t));return o?o.content.map((e=>e.text)).join(""):null}function fe(e){if(e)for(let t of e){const e=he(t,"@docname");if(e)return e.trim()}return null}function xe(e){if(me(e)){var t;const s=null==e||null==(t=e.type)?void 0:t.declaration;let o=Re(null==s?void 0:s.signatures);if(o)return o}else if(pe(e)){const t=e.type.types;for(let e of t)if(ue(e)){let t=Re(e.declaration.signatures);if(t)return t}}else if(ge(e)){let t=Re([e]);if(t)return t}return"99-default"}function be(e){if(e.kind===k.Method){let t=fe(e.signatures);if(t)return t}else if(me(e)){var t;const s=null==e||null==(t=e.type)?void 0:t.declaration;let o=fe(null==s?void 0:s.signatures);if(o)return o}else if(pe(e)){const t=e.type.types;for(let e of t)if(ue(e)){let t=fe(e.declaration.signatures);if(t)return t}}else if(ge(e)){let t=fe([e]);if(t)return t}return he(s=e,"@docname")||s.name;var s}function ke(e){const t=he(e,"@docid");if(t)return t;const s=function(e,t){let s=[];return v(e,((e,o,r)=>{"comment"===r&&(console.log(e),s.push(...e.blockTags.filter((e=>e.tag===t))))})),s}(e,"@docid");return s.length>0?s[0].text.trim():be(e)}function Re(e){if(e)for(let t of e){const e=he(t,"@docgroup");if(e)return e.trim()}return null}function ve(e){for(let t of e){if(he(t,"@docgroup"))return t}return null}function Ae(e){const t=e.type.types;let s=null;for(let o of t)if(ue(o)){const e=o.declaration.signatures;s||(s=e[0]);let t=ve(e);if(t)return t}return s}function Se(e){const t=(s=e,o=k.CallSignature,A(s,(e=>e.kind===o)));var s,o;for(let r of t){const e=he(r,"@docgrouptitle");if(e)return e.trim()}return null}function we(e){for(let t of e.children){let e=Se(t.child);if(e)return e}return e.group}function Te(e){if(e.kind===k.CallSignature)return ge(e)||le(e)||ye(e)?[{group:xe(e),name:be(e),reflection:e,child:e}]:[];if(e.kind===k.TypeAlias||e.kind===k.GetSignature||e.kind===k.SetSignature)return[];const t=e.type.declaration.children.filter((e=>ge(e)||le(e)||ye(e))),s=null!==he(e,"@hiddennamespace")?null:e.name;return(0,i.flatMap)(t,(t=>le(t)?{group:xe(t),name:be(t),namespace:s,reflection:e,child:t}:Te(t)))}function Ne(e){const t=Te(e),s=(0,i.groupBy)(t,(e=>e.group));let o=[];for(let r in s)o.push({group:r,children:s[r]});return o=(0,i.sortBy)(o,(e=>e.group)),o}}}]);