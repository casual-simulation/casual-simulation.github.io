"use strict";(self.webpackChunkcasual_simulation=self.webpackChunkcasual_simulation||[]).push([[4002],{4629:function(e,t,r){r.d(t,{hl:function(){return w},zl:function(){return Z},KO:function(){return N},HE:function(){return D},Op:function(){return R}});var s=r(7639),i=r(7294),n=r(2503),a=r(814),o=r(4673),c=r(6486),l=r(1073),m=function(e){function t(t){var r;return(r=e.call(this,t)||this).state={hasError:!1},r}(0,l.Z)(t,e),t.getDerivedStateFromError=function(e){return{hasError:!0,error:e}};var r=t.prototype;return r.componentDidCatch=function(e,t){var r="["+this.props.reflection.name+"] "+e;if(!this.props.root)throw r;console.error(r)},r.render=function(){return this.state.hasError?i.createElement("h1",null,"[",this.props.reflection.name,"] ",this.state.error):this.props.children},t}(i.Component),d=r(4996),p=r(9960),u=r(7120),y=r(6388),f=r(1169);function h(e){void 0===e&&(e={});var t=e.references;return function(e){(0,f.Vn)(e,"link",(function(e){if(e.url.startsWith("tags:")){var r=e.url.slice("tags:".length);r.startsWith("@")?e.url=(0,d.Z)("listen-tags")+g(r.slice(1)):e.url=(0,d.Z)("tags")+g(r)}else if(e.url.startsWith("ref:")){var s=e.url.slice("ref:".length),i=t[s];e.url=(0,d.Z)(i)+"#"+s}else if(e.url.startsWith("glossary:")){var n=e.url.slice("glossary:".length);e.url=(0,d.Z)("glossary")+"#"+P(n)}else if(e.url.startsWith("page:")){var a=e.url.slice("page:".length).split("#"),o=a[0],c=a[1];e.url=(0,d.Z)(o)+"#"+c}}))}}function g(e){return"#"+P(e)}function P(e){return e.replace(/[\.\(\)\@\[\]]/g,"").toLowerCase()}function v(e){return void 0===e&&(e={}),function(e){e&&e.children&&e.children.length>0&&"paragraph"===e.children[0].type&&(e.children=e.children[0].children.concat(e.children.slice(1)))}}var b={Property:["type"],reflection:["declaration"],"Type literal":["children","signatures"],"Call signature":["parameters","comment","type"]};function k(e,t,r){void 0===r&&(r=null),function(e,t,r){var i;void 0===r&&(r=null);for(var n,a=b[null!=(i=e.kindString)?i:e.type]||[],o=(0,s.Z)(a);!(n=o()).done;){var c=n.value,l=e[c];if(Array.isArray(l))for(var m,d=(0,s.Z)(l);!(m=d()).done;){var p=m.value;p&&t(p,r,c)}else l&&t(l,r,c)}}(e,(function(e,r,s){t(e,r,s),k(e,t,e)}))}function x(e,t){var r=[];return t(e)&&r.push(e),k(e,(function(e,s,i){t(e,s,i)&&r.push(e)})),r}function R(e){e}var T=["first","second","third","fourth","fifth"];function S(e,t){return e.name+"-"+t.name}function E(e,t){var r,s=S(e,t);return{value:"<code>"+("Constructor"===t.kindString||"Method"===t.kindString?te(t.signatures[0]):"Accessor"===t.kindString?(r=t).name+": "+ce(r.getSignature[0].type):ne(t))+"</code>",id:s,level:3}}function D(e){var t=[],r=function(e){var t=[],r=[],i=[];if(!e)return{properties:t,constructors:r,methods:i};for(var n,a=(0,s.Z)(e);!(n=a()).done;){var o=n.value;o.flags.isPrivate||("Property"===o.kindString||"Accessor"===o.kindString?t.push(o):"Constructor"===o.kindString?r.push(o):"Method"===o.kindString&&i.push(o))}return{properties:t,constructors:r,methods:i}}(e.children),i=r.properties,n=r.constructors,a=r.methods;return i.length>0&&t.push.apply(t,i.map((function(t){return E(e,t)}))),n.length>0&&t.push.apply(t,n.map((function(t){return E(e,t)}))),a.length>0&&t.push.apply(t,a.map((function(t){return E(e,t)}))),t}function I(e){for(var t,r=[],i=Ee(e),n=(0,s.Z)(i);!(t=n()).done;){var a=t.value,o=Te(a);r.push({value:o,id:a.group,level:2}),r.push.apply(r,a.children.map((function(e){return F(e)})))}return r}function F(e){var t,r=e.reflection,s=e.child,i=(e.group,e.name),n=e.namespace,a=n?n+"."+i:i;if(me(s)){var o,c=s.type.declaration.signatures;t=te(null!=(o=ke(c))?o:c[0],a)}else if(pe(s)){t=te(xe(s),a)}else t=ne(s,a);return{value:t="<code>"+t+"</code>",id:r.name+"-"+s.name,level:3}}function N(e){for(var t,r=[{value:e.pageTitle,id:"",level:2}],i=(0,s.Z)(e.contents);!(t=i()).done;){var n=t.value;if("Interface"===n.reflection.kindString||"Class"===n.reflection.kindString){var a=Pe(n.reflection),o=ve(n.reflection);r.push({value:a,id:o,level:2}),r.push.apply(r,D(n.reflection))}else if("Call signature"===n.reflection.kindString){var c=Pe(n.reflection),l=ve(n.reflection);r.push({value:"<code>"+te(n.reflection,c)+"</code>",id:l,level:3})}else if("Type alias"===n.reflection.kindString){var m=Pe(n.reflection),d=ve(n.reflection);r.push({value:m,id:d,level:2})}else if("Get signature"===n.reflection.kindString||"Set signature"===n.reflection.kindString){var p=Pe(n.reflection),u=ve(n.reflection);r.push({value:"<code>"+te(n.reflection,p)+"</code>",id:u,level:3})}else{var y=Pe(n.reflection),f=ve(n.reflection);r.push({value:y,id:f,level:2}),r.push.apply(r,I(n.reflection))}}return r}function w(e){var t=e.doc,r=t.contents,s=t.references;return i.createElement("div",{className:"api"},r.map((function(e){return i.createElement(O,{key:e.id,reflection:e.reflection,references:s})})))}function O(e){var t=e.reflection,r=e.references;return"Interface"===t.kindString||"Class"===t.kindString?i.createElement(G,{reflection:t,references:r}):"Call signature"===t.kindString||"Get signature"===t.kindString||"Set signature"===t.kindString?i.createElement(L,{reflection:t,references:r}):"Type alias"===t.kindString?i.createElement(C,{reflection:t,references:r}):i.createElement(U,{reflection:t,references:r})}function C(e){var t=e.reflection,r=e.references,s=Pe(t),a=ve(t);return i.createElement("div",null,i.createElement(n.Z,{as:"h2",id:a},s),i.createElement(V,{reflection:t,references:r}),i.createElement(A,{reflection:t,name:s,references:r}),i.createElement(se,{member:t}))}function A(e){var t=e.reflection,r=e.name,s=e.references,n="";return"union"===t.type.type&&(n=i.createElement(M,{type:t.type,name:r,references:s})),n}function M(e){var t=e.type,r=e.name,s=e.references;return i.createElement("div",null,i.createElement("p",null,"A ",r," can be one of the following values:"),i.createElement("ul",null,t.types.map((function(e,t){return i.createElement(B,{key:t,type:e,references:s})}))))}function B(e){var t=e.type,r=e.references;return i.createElement("li",null,i.createElement("code",null,i.createElement(oe,{type:t,references:r})))}function G(e){var t=e.reflection,r=e.references,s=Pe(t),a=ve(t);return i.createElement("div",null,i.createElement(n.Z,{as:"h2",id:a},s),i.createElement(Z,{reflection:t,references:r}),i.createElement(se,{member:t}))}function U(e){var t=e.reflection,r=e.references,s=Pe(t),a=ve(t);return i.createElement("div",null,i.createElement(n.Z,{as:"h2",id:a},s),i.createElement(q,{reflection:t,references:r}),i.createElement(se,{member:t}))}function L(e){var t=e.reflection,r=e.references,s=Pe(t),n=ve(t);return i.createElement("div",null,i.createElement(H,{func:t,sig:t,name:s,link:n,references:r}))}function Z(e){var t,r=e.reflection;if(!r)throw new Error("Unable to find "+e.name+"!");var s=function(e){return(0,c.sortBy)(e,(function(e){return"Property"===e.kindString||"Accessor"===e.kindString?0:"Constructor"===e.kindString?1:2})).filter((function(e){return!e.flags.isPrivate}))}(null!=(t=r.children)?t:[]);return i.createElement(m,{reflection:r,root:!0},i.createElement("div",{className:"api"},i.createElement(V,{reflection:r,references:e.references}),r.indexSignature?i.createElement(W,{reflection:r,index:r.indexSignature,references:e.references}):"",r.references?i.createElement(J,{prop:r,references:e.references}):"",s.map((function(t){return i.createElement(z,{key:t.name,member:t,link:S(r,t),references:e.references})}))))}function W(e){var t=e.reflection,r=e.index,s=e.references,a=r.parameters[0];return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:t.name+"-_index"},"Index Signature"),i.createElement(V,{reflection:r,references:s}),i.createElement("pre",null,i.createElement("code",null,"[",a.name,": ",i.createElement(oe,{type:a.type,references:s}),"]: ",i.createElement(oe,{type:r.type,references:s}))),i.createElement(se,{member:r}))}function V(e){var t=e.reflection,r=e.references;return i.createElement("div",null,i.createElement(_,{comment:t.comment,references:r}))}function z(e){var t;return t="Property"===e.member.kindString?function(e){var t,r=e.member,s="";r.references?(s=i.createElement(K,{prop:r,references:e.references}),t=i.createElement(i.Fragment,null,r.typeReference)):"reflection"===r.type.type&&r.typeText&&r.typeReference?(t=i.createElement(i.Fragment,null,r.typeReference),s=i.createElement(a.Z,{language:"typescript"},r.typeText)):t=i.createElement(oe,{type:e.member.type,references:e.references});!s&&r.typeText&&r.typeReference&&(s=i.createElement(a.Z,{language:"typescript"},r.typeText));var o=Pe(r);ve(r);return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:e.link},i.createElement("code",null,o,e.member.flags.isOptional?"?":"",": ",t)),i.createElement(V,{reflection:e.member,references:e.references}),s)}(e):"Constructor"===e.member.kindString?function(e){var t=Pe(e.member);return i.createElement("div",null,i.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Method"===e.member.kindString?function(e){var t=Pe(e.member);return i.createElement("div",null,i.createElement(H,{func:e.member,name:t,sig:e.member.signatures[0],link:e.link,references:e.references}))}(e):"Accessor"===e.member.kindString?function(e){var t;return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:e.link},i.createElement("code",null,e.member.name,": ",i.createElement(oe,{type:e.member.getSignature[0].type,references:e.references}))),i.createElement("p",null,null==(t=e.member.getSignature[0].comment)?void 0:t.shortText))}(e):"Not found "+e.member.kindString,i.createElement(m,{reflection:e.member},i.createElement("div",null,t))}function J(e){var t=e.prop,r=e.references,s=ve(t);return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:s+"-extra-functions"},"Extra Functions"),i.createElement("p",null,"The extra functions that are available on this type."),i.createElement(o.Z,null,i.createElement("p",null,"See the following functions for more information:"),i.createElement(Y,{children:t.references,references:r})))}function K(e){var t=e.prop,r=e.references;return i.createElement(o.Z,null,i.createElement("p",null,"See the following functions for more information:"),i.createElement(Y,{children:t.references,references:r}))}function q(e){var t=e.reflection,r=(t.type.declaration,Ee(t));return console.log(r),i.createElement(m,{reflection:t,root:!0},i.createElement("div",{className:"api"},i.createElement(V,{reflection:t,references:e.references}),r.map((function(t){return i.createElement(Q,{key:t.group,group:t,references:e.references})}))))}function Q(e){var t=e.group,r=e.references,s=t.children,a=Te(t);return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:t.group},a),s.map((function(e){return i.createElement(j,{key:e.child.id,namespace:e.namespace,name:e.name,property:e.child,link:S(e.reflection,e.child),references:r})})))}function j(e){var t;if(me(e.property)){var r,s=e.namespace?e.namespace+"."+e.name:e.name,a=e.property.type.declaration;t=H({name:s,func:e.property,sig:null!=(r=ke(a.signatures))?r:a.signatures[0],link:e.link,references:e.references})}else if(pe(e.property)){var o=e.namespace?e.namespace+"."+e.name:e.name,c=xe(e.property);console.log(o,c,e.property),t=H({name:o,func:e.property,sig:c,link:e.link,references:e.references})}else t=ye(e.property)?i.createElement(i.Fragment,null,"This is really fun! ",e.property.name):"Property"===e.property.kindString?function(e){return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:e.link},i.createElement("code",null,e.property.name,": ",i.createElement(oe,{type:e.property.type,references:e.references}))),i.createElement(V,{reflection:e.property,references:e.references}))}(e):"Not found "+e.property.kindString;return i.createElement(m,{reflection:e.property},i.createElement("div",null,t))}function H(e){var t=e.func,r=e.sig,s=e.link,a=e.name,o=e.references;r||console.log(a,t);var c=r.parameters||[];return i.createElement("div",null,i.createElement(n.Z,{as:"h3",id:s},i.createElement(ee,{func:t,sig:r,name:a,references:o})),i.createElement(X,{sig:r,references:o}),c.length>0?i.createElement("div",null,c.map((function(e,t){return i.createElement(re,{key:e.name,param:e,index:t,references:o})}))):"",i.createElement(se,{member:r}))}function X(e){var t=e.sig,r=e.references;return i.createElement(_,{comment:t.comment,references:r})}function _(e){var t=e.comment,r=e.references;return i.createElement(Y,{references:r},$(t))}function Y(e){var t=e.children,r=e.remarkPlugins,s=e.rehypePlugins,n=e.references;return i.createElement(u.D,{remarkPlugins:[[h,{references:n}]].concat(r||[]),rehypePlugins:[y.Z].concat(s||[])},t)}function $(e){var t="";return e&&(t+=e.shortText,e.text&&(t+="\n\n"+e.text)),t}function ee(e){var t=e.func,r=e.sig,s=e.name,n=e.references,a=r.parameters||[],o="";return"Get signature"!==t.kindString&&(o=i.createElement(i.Fragment,null,"(",a.map((function(e,t){return i.createElement("span",{key:e.name},t>0?", ":"",e.flags.isRest?"...":"",e.name,e.flags.isOptional?"?":"",": ",i.createElement(oe,{type:e.type,references:n}))})),")")),i.createElement("code",null,(t.flags.isStatic?"static ":"")+(s||r.name),o,": ",i.createElement(oe,{type:r.type,references:n}))}function te(e,t){void 0===t&&(t=e.name);var r=e.parameters||[],s="";return"Get signature"!==e.kindString&&(s="("+r.map((function(e,t){return(e.flags.isRest?"...":"")+e.name})).join(", ")+")"),""+t+s+": "+ce(e.type)}function re(e){var t,r=e.param,s=e.index,n=e.references;return t=r.flags.isRest&&r.type.elementType?0===s?i.createElement("p",null,i.createElement("strong",null,"Each parameter")," is a ",i.createElement(oe,{type:r.type.elementType,references:n})," and are ",i.createElement(ae,{param:r,isRest:!0,references:n})):i.createElement("p",null,i.createElement("strong",null,"Each other parameter")," is a ",i.createElement(oe,{type:r.type.elementType,references:n})," and are ",i.createElement(ae,{param:r,isRest:!0,references:n})):i.createElement("p",null,"The ",i.createElement("strong",null,function(e){return T[e]}(s)," parameter")," is",r.flags.isOptional?" optional and is":""," a ",i.createElement(oe,{type:r.type,references:n})," and ",i.createElement(ae,{param:r,references:n})),t}function se(e){var t,r=e.member;if(null==(t=r.comment)||!t.tags)return"";var s=r.comment.tags.filter((function(e){return"example"===e.tag}));return s.length>0?i.createElement("div",null,i.createElement("h4",null,"Examples"),s.map((function(e,t){return i.createElement(ie,{key:t,example:e})}))):""}function ie(e){var t=e.example.text,r=t.indexOf("\n"),s=t.substring(0,r),n=t.substring(r+1);return i.createElement(a.Z,{language:"typescript",title:s.trim()},n.trim())}function ne(e,t){var r;return void 0===t&&(t=e.name),r=e.typeReference?e.typeReference:ce(e.type),t+(e.flags.isOptional?"?":"")+": "+r}function ae(e){var t=e.param,r=e.isRest,s=e.references;return i.createElement(Y,{remarkPlugins:[v],references:s},function(e,t){var r=$(e.comment);if(!r)return"";(r=r.slice(0,1).toLowerCase()+r.slice(1)).startsWith("the")&&!t&&(r="is "+r);return r}(t,r))}function oe(e){var t=e.type,r=e.references,s=e.isInUnionOrArray;if("intrinsic"===t.type)return i.createElement("span",null,t.name);if(t.name){if("Promise"===t.name&&"Promise"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return i.createElement(i.Fragment,null,"Promise<",i.createElement(oe,{type:t.typeArguments[0],references:r}),">");if("Partial"===t.name&&"Partial"===t.qualifiedName&&t.typeArguments&&1===t.typeArguments.length)return i.createElement(i.Fragment,null,i.createElement("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"Partial"),"<",i.createElement(oe,{type:t.typeArguments[0],references:r}),">");var n="#"+t.name,a=t.id?null==r?void 0:r["id-"+t.id]:null;if(a){var o=null==r?void 0:r[a];o&&(n=(0,d.Z)(o)+"#"+a)}else t.id?console.log("Missing reference for",t.id,t.name,t,"it is likely that the type does not have a @docid or @docname comment"):console.log("Missing reference for",t,"it is likely that the type is not exported from the entry");return i.createElement(p.Z,{href:n},t.name)}if("union"===t.type)return i.createElement("span",null,"(",t.types.map((function(e,t){return i.createElement(i.Fragment,{key:t},t>0?" | ":"",i.createElement(oe,{type:e,references:r,isInUnionOrArray:!0}))})),")");if("array"===t.type)return i.createElement(i.Fragment,null,i.createElement(oe,{type:t.elementType,references:r,isInUnionOrArray:!0}),"[]");if("literal"===t.type)return"string"==typeof t.value?i.createElement("span",null,'"',t.value,'"'):"number"==typeof t.value?i.createElement("span",null,t.value):"boolean"==typeof t.value?i.createElement("span",null,t.value?"true":"false"):void 0===t.value?i.createElement("span",null,"undefined"):null===t.value?i.createElement("span",null,"null"):""+JSON.stringify(t);if("reflection"===t.type){var c=t.declaration;if("Type literal"===c.kindString&&c.signatures&&!c.children){var l,m=null!=(l=ke(c.signatures))?l:c.signatures[0],u=m.parameters||[];return i.createElement(i.Fragment,null,i.createElement("span",null,s?"(":"","(",u.map((function(e,t){return i.createElement("span",{key:t},t>0?",":"",e.name,": ",i.createElement(oe,{type:e.type,references:r}))})),") => ",i.createElement(oe,{type:m.type,references:r}),s?")":""))}return"object"}return""+JSON.stringify(t)}function ce(e){return"intrinsic"===e.type?e.name:e.name?"Promise"===e.name&&"Promise"===e.qualifiedName&&e.typeArguments&&1===e.typeArguments.length?"Promise&lt;"+ce(e.typeArguments[0])+"&gt;":e.name:"union"===e.type?"("+e.types.map((function(e){return ce(e)})).join(" | ")+")":"array"===e.type?ce(e.elementType)+"[]":"literal"===e.type?"string"==typeof e.value?'"'+e.value+'"':"number"==typeof e.value?String(e.value):"boolean"==typeof e.value?e.value?"true":"false":""+JSON.stringify(e):"reflection"===e.type?"object":"missing!: "+JSON.stringify(e)}function le(e){return me(e)||pe(e)}function me(e){return e&&de(e.type)}function de(e){return e&&"reflection"===e.type&&e.declaration&&e.declaration.signatures&&e.declaration.signatures.some((function(e){return"Call signature"===e.kindString}))}function pe(e){return e&&e.type&&"intersection"===e.type.type&&e.type.types.some((function(e){return de(e)}))}function ue(e){return e&&"Call signature"===e.kindString}function ye(e){return e&&e.type&&"reflection"===e.type.type&&e.type.declaration&&"Type literal"===e.type.declaration.kindString&&e.type.declaration.children}function fe(e,t){var r,s,i=null==(r=e.comment)||null==(s=r.tags)?void 0:s.find((function(e){return e.tag===t}));return i?i.text.trim():null}function he(e){if(e)for(var t,r=(0,s.Z)(e);!(t=r()).done;){var i=fe(t.value,"docname");if(i)return i.trim()}return null}function ge(e){if(me(e)){var t,r=null==e||null==(t=e.type)?void 0:t.declaration,i=be(null==r?void 0:r.signatures);if(i)return i}else if(pe(e))for(var n,a=e.type.types,o=(0,s.Z)(a);!(n=o()).done;){var c=n.value;if(de(c)){var l=be(c.declaration.signatures);if(l)return l}}else if(ue(e)){var m=be([e]);if(m)return m}return"99-default"}function Pe(e){if("Method"===e.kindString){var t=he(e.signatures);if(t)return t}else if(me(e)){var r,i=null==e||null==(r=e.type)?void 0:r.declaration,n=he(null==i?void 0:i.signatures);if(n)return n}else if(pe(e))for(var a,o=e.type.types,c=(0,s.Z)(o);!(a=c()).done;){var l=a.value;if(de(l)){var m=he(l.declaration.signatures);if(m)return m}}else if(ue(e)){var d=he([e]);if(d)return d}return fe(p=e,"docname")||p.name;var p}function ve(e){var t=fe(e,"docid");if(t)return t;var r,s,i=(r="docid",s=[],k(e,(function(e,t,i){"comment"===i&&s.push.apply(s,e.tags.filter((function(e){return e.tag===r})))})),s);return i.length>0?i[0].text.trim():Pe(e)}function be(e){if(e)for(var t,r=(0,s.Z)(e);!(t=r()).done;){var i=fe(t.value,"docgroup");if(i)return i.trim()}return null}function ke(e){for(var t,r=(0,s.Z)(e);!(t=r()).done;){var i=t.value;if(fe(i,"docgroup"))return i}return null}function xe(e){for(var t,r=e.type.types,i=null,n=(0,s.Z)(r);!(t=n()).done;){var a=t.value;if(de(a)){var o=a.declaration.signatures;i||(i=o[0]);var c=ke(o);if(c)return c}}return i}function Re(e){for(var t,r,i=(t="Call signature",x(e,(function(e){return e.kindString===t}))),n=(0,s.Z)(i);!(r=n()).done;){var a=fe(r.value,"docgrouptitle");if(a)return a.trim()}return null}function Te(e){for(var t,r=(0,s.Z)(e.children);!(t=r()).done;){var i=Re(t.value.child);if(i)return i}return e.group}function Se(e){if("Call signature"===e.kindString)return ue(e)||le(e)||ye(e)?[{group:ge(e),name:Pe(e),reflection:e,child:e}]:[];if("Type alias"===e.kindString||"Get signature"===e.kindString||"Set signature"===e.kindString)return[];var t=e.type.declaration.children.filter((function(e){return ue(e)||le(e)||ye(e)})),r=null!==fe(e,"hiddennamespace")?null:e.name;return(0,c.flatMap)(t,(function(t){return le(t)?{group:ge(t),name:Pe(t),namespace:r,reflection:e,child:t}:Se(t)}))}function Ee(e){var t=Se(e),r=(0,c.groupBy)(t,(function(e){return e.group})),s=[];for(var i in r)s.push({group:i,children:r[i]});return s=(0,c.sortBy)(s,(function(e){return e.group}))}},2104:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return f},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var s=r(3117),i=r(102),n=(r(7294),r(3905)),a=JSON.parse('{"hash":"types/permissions","pageTitle":"Permission Types","pageDescription":"Defines the types of permissions that can be added to policies.","pageSidebarLabel":"Permissions","contents":[{"id":2916,"order":9999,"name":"AssignPolicyPermission","reflection":{"id":2916,"name":"AssignPolicyPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to assign a policy to a particular resource.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2918,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2919,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2917,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":487,"character":4}],"type":{"type":"literal","value":"policy.assign"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2918,2919,2917]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":486,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to assign a policy to a particular resource.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2830,"order":9999,"name":"AvailablePermissions","reflection":{"id":2830,"name":"AvailablePermissions","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"The possible types of permissions that can be added to policies.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions"},{"tag":"doctitle","paramName":"","text":"Permission Types"},{"tag":"docsidebar","paramName":"","text":"Permissions"},{"tag":"docdescription","paramName":"","text":"Defines the types of permissions that can be added to policies."},{"tag":"docname","paramName":"","text":"AvailablePermissions\\n"}]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":12,"character":12}],"type":{"type":"union","types":[{"type":"reference","id":2831,"name":"CreateDataPermission"},{"type":"reference","id":2835,"name":"ReadDataPermission"},{"type":"reference","id":2839,"name":"UpdateDataPermission"},{"type":"reference","id":2847,"name":"DeleteDataPermission"},{"type":"reference","id":2843,"name":"ListDataPermission"},{"type":"reference","id":2851,"name":"CreateFilePermission"},{"type":"reference","id":2856,"name":"ReadFilePermission"},{"type":"reference","id":2861,"name":"UpdateFilePermission"},{"type":"reference","id":2866,"name":"DeleteFilePermission"},{"type":"reference","id":2871,"name":"IncrementEventPermission"},{"type":"reference","id":2875,"name":"CountEventPermission"},{"type":"reference","id":2879,"name":"UpdateEventPermission"},{"type":"reference","id":2924,"name":"ReadPolicyPermission"},{"type":"reference","id":2908,"name":"GrantPermissionToPolicyPermission"},{"type":"reference","id":2912,"name":"RevokePermissionFromPolicyPermission"},{"type":"reference","id":2928,"name":"ListPoliciesPermission"},{"type":"reference","id":2916,"name":"AssignPolicyPermission"},{"type":"reference","id":2920,"name":"UnassignPolicyPermission"},{"type":"reference","id":2883,"name":"GrantRolePermission"},{"type":"reference","id":2890,"name":"RevokeRolePermission"},{"type":"reference","id":2896,"name":"ReadRolePermission"},{"type":"reference","id":2904,"name":"ListRolesPermission"},{"type":"reference","id":2900,"name":"UpdateRolePermission"},{"type":"reference","name":"CreateRecordKeyPermission"}]}},"comment":{"shortText":"The possible types of permissions that can be added to policies.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions"},{"tagName":"doctitle","paramName":"","text":"Permission Types"},{"tagName":"docsidebar","paramName":"","text":"Permissions"},{"tagName":"docdescription","paramName":"","text":"Defines the types of permissions that can be added to policies."},{"tagName":"docname","paramName":"","text":"AvailablePermissions\\n"}]},"group":null},{"id":2875,"order":9999,"name":"CountEventPermission","reflection":{"id":2875,"name":"CountEventPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to count an event record.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2877,"name":"events","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The events that can be manipulated.","text":"If true, then all events are allowed.\\nIf a string, then it should be a Regular Expression that matches only events that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":316,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.events"}},{"id":2878,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.role"}},{"id":2876,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":349,"character":4}],"type":{"type":"literal","value":"event.count"},"overwrites":{"type":"reference","name":"EventPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2877,2878,2876]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":348,"character":17}],"extendedTypes":[{"type":"reference","name":"EventPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to count an event record.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2831,"order":9999,"name":"CreateDataPermission","reflection":{"id":2831,"name":"CreateDataPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to create data for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2833,"name":"addresses","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The addresses that can be manipulated.","text":"If true, then all addresses are allowed.\\nIf a string, then it should be a Regular Expression that matches only addresses that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":106,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.addresses"}},{"id":2834,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.role"}},{"id":2832,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":122,"character":4}],"type":{"type":"literal","value":"data.create"},"overwrites":{"type":"reference","name":"DataPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2833,2834,2832]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":121,"character":17}],"extendedTypes":[{"type":"reference","name":"DataPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to create data for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2851,"order":9999,"name":"CreateFilePermission","reflection":{"id":2851,"name":"CreateFilePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to create a file for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2854,"name":"allowedMimeTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The list of allowed file MIME types.\\nIf true, then all file types are allowed.\\nIf an array of strings, then only MIME types that are specified are allowed.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":221,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":true},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"FilePermission.allowedMimeTypes"}},{"id":2853,"name":"maxFileSizeInBytes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum allowed file size in bytes.\\nDefaults to Infinity.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":214,"character":4}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"FilePermission.maxFileSizeInBytes"}},{"id":2855,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"FilePermission.role"}},{"id":2852,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":239,"character":4}],"type":{"type":"literal","value":"file.create"},"overwrites":{"type":"reference","name":"FilePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2854,2853,2855,2852]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":238,"character":17}],"extendedTypes":[{"type":"reference","name":"FilePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to create a file for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2847,"order":9999,"name":"DeleteDataPermission","reflection":{"id":2847,"name":"DeleteDataPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to delete data for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2849,"name":"addresses","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The addresses that can be manipulated.","text":"If true, then all addresses are allowed.\\nIf a string, then it should be a Regular Expression that matches only addresses that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":106,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.addresses"}},{"id":2850,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.role"}},{"id":2848,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":176,"character":4}],"type":{"type":"literal","value":"data.delete"},"overwrites":{"type":"reference","name":"DataPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2849,2850,2848]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":175,"character":17}],"extendedTypes":[{"type":"reference","name":"DataPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to delete data for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2866,"order":9999,"name":"DeleteFilePermission","reflection":{"id":2866,"name":"DeleteFilePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to delete a file for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2869,"name":"allowedMimeTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The list of allowed file MIME types.\\nIf true, then all file types are allowed.\\nIf an array of strings, then only MIME types that are specified are allowed.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":221,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":true},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"FilePermission.allowedMimeTypes"}},{"id":2868,"name":"maxFileSizeInBytes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum allowed file size in bytes.\\nDefaults to Infinity.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":214,"character":4}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"FilePermission.maxFileSizeInBytes"}},{"id":2870,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"FilePermission.role"}},{"id":2867,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":294,"character":4}],"type":{"type":"literal","value":"file.delete"},"overwrites":{"type":"reference","name":"FilePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2869,2868,2870,2867]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":293,"character":17}],"extendedTypes":[{"type":"reference","name":"FilePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to delete a file for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2908,"order":9999,"name":"GrantPermissionToPolicyPermission","reflection":{"id":2908,"name":"GrantPermissionToPolicyPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to grant a permission to a policy.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2910,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2911,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2909,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":444,"character":4}],"type":{"type":"literal","value":"policy.grantPermission"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2910,2911,2909]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":443,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to grant a permission to a policy.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2883,"order":9999,"name":"GrantRolePermission","reflection":{"id":2883,"name":"GrantRolePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to grant a role.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2886,"name":"instances","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"What instances can the role be granted to?\\nIf true, then the role can be granted to any instance.\\nIf false, then the role cannot be granted to an instance.\\nIf a string, then it should be a Regular Expression that matches only instances that are allowed to be granted to.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":558,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2887,"name":"maxDurationMs","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum lifetime that the role can be granted for in miliseconds.\\nIf not specified, then the role can be granted for an infinite amount of time.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":564,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2889,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.role"}},{"id":2888,"name":"roles","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The roles that can be manipulated.","text":"If true, then all roles are allowed.\\nIf a string, then it should be a Regular Expression that matches only roles that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":527,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.roles"}},{"id":2884,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":542,"character":4}],"type":{"type":"literal","value":"role.grant"},"overwrites":{"type":"reference","name":"RolePermission.type"}},{"id":2885,"name":"userIds","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"What user IDs can the role be granted to?\\nIf true, then the role can be granted to anyone.\\nIf false, then the role cannot be granted to a user.\\nIf an array of strings, then the role can only be granted to the users with the given IDs.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":550,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2886,2887,2889,2888,2884,2885]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":541,"character":17}],"extendedTypes":[{"type":"reference","name":"RolePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to grant a role.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2871,"order":9999,"name":"IncrementEventPermission","reflection":{"id":2871,"name":"IncrementEventPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to increment an event record.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2873,"name":"events","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The events that can be manipulated.","text":"If true, then all events are allowed.\\nIf a string, then it should be a Regular Expression that matches only events that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":316,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.events"}},{"id":2874,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.role"}},{"id":2872,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":331,"character":4}],"type":{"type":"literal","value":"event.increment"},"overwrites":{"type":"reference","name":"EventPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2873,2874,2872]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":330,"character":17}],"extendedTypes":[{"type":"reference","name":"EventPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to increment an event record.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2843,"order":9999,"name":"ListDataPermission","reflection":{"id":2843,"name":"ListDataPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to list data for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2845,"name":"addresses","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The addresses that can be manipulated.","text":"If true, then all addresses are allowed.\\nIf a string, then it should be a Regular Expression that matches only addresses that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":106,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.addresses"}},{"id":2846,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.role"}},{"id":2844,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":194,"character":4}],"type":{"type":"literal","value":"data.list"},"overwrites":{"type":"reference","name":"DataPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2845,2846,2844]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":193,"character":17}],"extendedTypes":[{"type":"reference","name":"DataPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to list data for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2928,"order":9999,"name":"ListPoliciesPermission","reflection":{"id":2928,"name":"ListPoliciesPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to list policies.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2930,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2931,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2929,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":426,"character":4}],"type":{"type":"literal","value":"policy.list"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2930,2931,2929]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":425,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to list policies.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2904,"order":9999,"name":"ListRolesPermission","reflection":{"id":2904,"name":"ListRolesPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to list the available roles.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2907,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.role"}},{"id":2906,"name":"roles","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The roles that can be manipulated.","text":"If true, then all roles are allowed.\\nIf a string, then it should be a Regular Expression that matches only roles that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":527,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.roles"}},{"id":2905,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":652,"character":4}],"type":{"type":"literal","value":"role.list"},"overwrites":{"type":"reference","name":"RolePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2907,2906,2905]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":651,"character":17}],"extendedTypes":[{"type":"reference","name":"RolePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to list the available roles.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2835,"order":9999,"name":"ReadDataPermission","reflection":{"id":2835,"name":"ReadDataPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to read data for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2837,"name":"addresses","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The addresses that can be manipulated.","text":"If true, then all addresses are allowed.\\nIf a string, then it should be a Regular Expression that matches only addresses that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":106,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.addresses"}},{"id":2838,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.role"}},{"id":2836,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":140,"character":4}],"type":{"type":"literal","value":"data.read"},"overwrites":{"type":"reference","name":"DataPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2837,2838,2836]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":139,"character":17}],"extendedTypes":[{"type":"reference","name":"DataPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to read data for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2856,"order":9999,"name":"ReadFilePermission","reflection":{"id":2856,"name":"ReadFilePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to read a file for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2859,"name":"allowedMimeTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The list of allowed file MIME types.\\nIf true, then all file types are allowed.\\nIf an array of strings, then only MIME types that are specified are allowed.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":221,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":true},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"FilePermission.allowedMimeTypes"}},{"id":2858,"name":"maxFileSizeInBytes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum allowed file size in bytes.\\nDefaults to Infinity.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":214,"character":4}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"FilePermission.maxFileSizeInBytes"}},{"id":2860,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"FilePermission.role"}},{"id":2857,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":257,"character":4}],"type":{"type":"literal","value":"file.read"},"overwrites":{"type":"reference","name":"FilePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2859,2858,2860,2857]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":256,"character":17}],"extendedTypes":[{"type":"reference","name":"FilePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to read a file for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2924,"order":9999,"name":"ReadPolicyPermission","reflection":{"id":2924,"name":"ReadPolicyPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to read a policy.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2926,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2927,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2925,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":408,"character":4}],"type":{"type":"literal","value":"policy.read"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2926,2927,2925]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":407,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to read a policy.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2896,"order":9999,"name":"ReadRolePermission","reflection":{"id":2896,"name":"ReadRolePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to read a role.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2899,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.role"}},{"id":2898,"name":"roles","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The roles that can be manipulated.","text":"If true, then all roles are allowed.\\nIf a string, then it should be a Regular Expression that matches only roles that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":527,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.roles"}},{"id":2897,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":616,"character":4}],"type":{"type":"literal","value":"role.read"},"overwrites":{"type":"reference","name":"RolePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2899,2898,2897]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":615,"character":17}],"extendedTypes":[{"type":"reference","name":"RolePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to read a role.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2912,"order":9999,"name":"RevokePermissionFromPolicyPermission","reflection":{"id":2912,"name":"RevokePermissionFromPolicyPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to revoke a permission from a policy.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2914,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2915,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2913,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":465,"character":4}],"type":{"type":"literal","value":"policy.revokePermission"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2914,2915,2913]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":464,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to revoke a permission from a policy.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2890,"order":9999,"name":"RevokeRolePermission","reflection":{"id":2890,"name":"RevokeRolePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to revoke a role.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2893,"name":"instances","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"What instances can the role be revoked from?\\nIf true, then the role can be revoked from any instance.\\nIf false, then the role cannot be revoked from an instance.\\nIf a string, then it should be a Regular Expression that matches only instances that are allowed to be revoked from.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":598,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"}]}},{"id":2895,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.role"}},{"id":2894,"name":"roles","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The roles that can be manipulated.","text":"If true, then all roles are allowed.\\nIf a string, then it should be a Regular Expression that matches only roles that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":527,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.roles"}},{"id":2891,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":582,"character":4}],"type":{"type":"literal","value":"role.revoke"},"overwrites":{"type":"reference","name":"RolePermission.type"}},{"id":2892,"name":"userIds","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"What user IDs can the role be revoked from?\\nIf true, then the role can be revoked from anyone.\\nIf false, then the role cannot be revoked from a user.\\nIf an array of strings, then the role can only be revoked from the users with the given IDs.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":590,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[2893,2895,2894,2891,2892]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":581,"character":17}],"extendedTypes":[{"type":"reference","name":"RolePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to revoke a role.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2920,"order":9999,"name":"UnassignPolicyPermission","reflection":{"id":2920,"name":"UnassignPolicyPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to remove a policy from a particular resource.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2922,"name":"policies","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The policies that can be manipulated.","text":"If true, then all policies are allowed.\\nIf a string, then it should be a Regular Expression that matches only policies that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":390,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.policies"}},{"id":2923,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"PolicyPermission.role"}},{"id":2921,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":505,"character":4}],"type":{"type":"literal","value":"policy.unassign"},"overwrites":{"type":"reference","name":"PolicyPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2922,2923,2921]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":504,"character":17}],"extendedTypes":[{"type":"reference","name":"PolicyPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to remove a policy from a particular resource.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2839,"order":9999,"name":"UpdateDataPermission","reflection":{"id":2839,"name":"UpdateDataPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to update data for a record marker.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2841,"name":"addresses","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The addresses that can be manipulated.","text":"If true, then all addresses are allowed.\\nIf a string, then it should be a Regular Expression that matches only addresses that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":106,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.addresses"}},{"id":2842,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"DataPermission.role"}},{"id":2840,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":158,"character":4}],"type":{"type":"literal","value":"data.update"},"overwrites":{"type":"reference","name":"DataPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2841,2842,2840]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":157,"character":17}],"extendedTypes":[{"type":"reference","name":"DataPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to update data for a record marker.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2879,"order":9999,"name":"UpdateEventPermission","reflection":{"id":2879,"name":"UpdateEventPermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to update an event record.\\nCurrently only used to update resource markers that are on an event.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2881,"name":"events","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The events that can be manipulated.","text":"If true, then all events are allowed.\\nIf a string, then it should be a Regular Expression that matches only events that are allowed to be created.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":316,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.events"}},{"id":2882,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"EventPermission.role"}},{"id":2880,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":368,"character":4}],"type":{"type":"literal","value":"event.update"},"overwrites":{"type":"reference","name":"EventPermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2881,2882,2880]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":367,"character":17}],"extendedTypes":[{"type":"reference","name":"EventPermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to update an event record.\\nCurrently only used to update resource markers that are on an event.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2861,"order":9999,"name":"UpdateFilePermission","reflection":{"id":2861,"name":"UpdateFilePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to be able to update a file for a record marker.\\nCurrently only used to update resource markers that are on a file.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2864,"name":"allowedMimeTypes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The list of allowed file MIME types.\\nIf true, then all file types are allowed.\\nIf an array of strings, then only MIME types that are specified are allowed.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":221,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":true},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"FilePermission.allowedMimeTypes"}},{"id":2863,"name":"maxFileSizeInBytes","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum allowed file size in bytes.\\nDefaults to Infinity.","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":214,"character":4}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"FilePermission.maxFileSizeInBytes"}},{"id":2865,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"FilePermission.role"}},{"id":2862,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":276,"character":4}],"type":{"type":"literal","value":"file.update"},"overwrites":{"type":"reference","name":"FilePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2864,2863,2865,2862]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":275,"character":17}],"extendedTypes":[{"type":"reference","name":"FilePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to be able to update a file for a record marker.\\nCurrently only used to update resource markers that are on a file.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null},{"id":2900,"order":9999,"name":"UpdateRolePermission","reflection":{"id":2900,"name":"UpdateRolePermission","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Defines an interface that describes a permission to update a role.","tags":[{"tag":"dochash","paramName":"","text":"types/permissions\\n"}]},"children":[{"id":2903,"name":"role","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The role that this permission is can be performed by.","text":"If true, then the permission is valid for all roles. (everyone)\\nIf a string, then the permission is valid for that specific role.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":86,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.role"}},{"id":2902,"name":"roles","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The roles that can be manipulated.","text":"If true, then all roles are allowed.\\nIf a string, then it should be a Regular Expression that matches only roles that are allowed to be manipulated.\\n","tags":[]},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":527,"character":4}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":true}]},"inheritedFrom":{"type":"reference","name":"RolePermission.roles"}},{"id":2901,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":634,"character":4}],"type":{"type":"literal","value":"role.update"},"overwrites":{"type":"reference","name":"RolePermission.type"}}],"groups":[{"title":"Properties","kind":1024,"children":[2903,2902,2901]}],"sources":[{"fileName":"src/aux-records/PolicyPermissions.ts","line":633,"character":17}],"extendedTypes":[{"type":"reference","name":"RolePermission"}]},"comment":{"shortText":"Defines an interface that describes a permission to update a role.","text":"","tags":[{"tagName":"dochash","paramName":"","text":"types/permissions\\n"}]},"group":null}],"references":{"Quaternion":"types/math/rotations","id-3179":"Quaternion","Rotation":"types/math/rotations","id-3211":"Rotation","Vector2":"types/math/vectors","id-3045":"Vector2","Vector3":"types/math/vectors","id-3102":"Vector3","AddCountFailure":"types/records/events","id-2992":"AddCountFailure","AddCountSuccess":"types/records/events","id-2987":"AddCountSuccess","AnimateTagOptions":"types/animation","id-2103":"AnimateTagOptions","AttachDebuggerOptions":"types/debuggers/common","id-2478":"AttachDebuggerOptions","CasualOSDevice":"types/os","id-2811":"CasualOSDevice","CasualOSVersion":"types/os","id-2803":"CasualOSVersion","AxisAndAngle":"types/math/rotations","id-3257":"AxisAndAngle","BotTagMasks":"types/core","id-2780":"BotTagMasks","BotTags":"types/core","id-2695":"BotTags","BotState":"types/core","id-2793":"BotState","CompiledBotListeners":"types/core","id-2774":"CompiledBotListeners","ConvertGeolocationToWhat3WordsOptions":"types/os","id-2513":"ConvertGeolocationToWhat3WordsOptions","CreatePublicRecordKeyFailure":"types/records/key","id-2825":"CreatePublicRecordKeyFailure","CreatePublicRecordKeySuccess":"types/records/key","id-2821":"CreatePublicRecordKeySuccess","DebuggerCallFrame":"types/debuggers/common","id-2431":"DebuggerCallFrame","DebuggerFunctionLocation":"types/debuggers/common","id-2466":"DebuggerFunctionLocation","DebuggerPause":"types/debuggers/common","id-2460":"DebuggerPause","DebuggerTagMaskUpdate":"types/debuggers/common","id-2439":"DebuggerTagMaskUpdate","DebuggerTagUpdate":"types/debuggers/common","id-2445":"DebuggerTagUpdate","DebuggerVariable":"types/debuggers/common","id-2472":"DebuggerVariable","EnableXROptions":"types/os","id-2587":"EnableXROptions","EraseDataFailure":"types/records/data","id-2960":"EraseDataFailure","EraseDataSuccess":"types/records/data","id-2956":"EraseDataSuccess","EraseFileFailure":"types/records/files","id-2982":"EraseFileFailure","EraseFileSuccess":"types/records/files","id-2978":"EraseFileSuccess","EulerAnglesRotation":"types/math/rotations","id-3260":"EulerAnglesRotation","FocusOnOptions":"types/os","id-2547":"FocusOnOptions","FocusOnRotation":"types/os","id-2559":"FocusOnRotation","FormAnimationData":"types/os","id-2605":"FormAnimationData","FromToRotation":"types/math/rotations","id-3254":"FromToRotation","GetCountFailure":"types/records/events","id-3003":"GetCountFailure","GetCountSuccess":"types/records/events","id-2997":"GetCountSuccess","GetDataFailure":"types/records/data","id-2951":"GetDataFailure","GetDataSuccess":"types/records/data","id-2942":"GetDataSuccess","GetRoomOptionsFailure":"types/os","id-2193":"GetRoomOptionsFailure","GetRoomOptionsSuccess":"types/os","id-2189":"GetRoomOptionsSuccess","GetRoomRemoteOptionsFailure":"types/os","id-2236":"GetRoomRemoteOptionsFailure","GetRoomRemoteOptionsSuccess":"types/os","id-2231":"GetRoomRemoteOptionsSuccess","GetRoomTrackOptionsFailure":"types/os","id-2212":"GetRoomTrackOptionsFailure","GetRoomTrackOptionsSuccess":"types/os","id-2207":"GetRoomTrackOptionsSuccess","GrantMarkerPermissionFailure":"types/records/policies","id-3031":"GrantMarkerPermissionFailure","GrantMarkerPermissionSuccess":"types/records/policies","id-3029":"GrantMarkerPermissionSuccess","GrantRoleFailure":"types/records/roles","id-3017":"GrantRoleFailure","GrantRoleSuccess":"types/records/roles","id-3015":"GrantRoleSuccess","ImageClassifierOptions":"types/os","id-2565":"ImageClassifierOptions","InstUpdate":"types/os","id-2816":"InstUpdate","JoinRoomFailure":"types/os","id-2174":"JoinRoomFailure","JoinRoomSuccess":"types/os","id-2171":"JoinRoomSuccess","LeaveRoomFailure":"types/os","id-2183":"LeaveRoomFailure","LeaveRoomSuccess":"types/os","id-2180":"LeaveRoomSuccess","ListDataFailure":"types/records/data","id-2973":"ListDataFailure","ListDataSuccess":"types/records/data","id-2965":"ListDataSuccess","LookRotation":"types/math/rotations","id-3277":"LookRotation","MediaPermissionOptions":"types/os","id-2584":"MediaPermissionOptions","Debugger":"types/debuggers/debugger","id-2243":"Debugger","NormalDebuggerOptions":"types/debuggers/common","id-2450":"NormalDebuggerOptions","ParsedBotLink":"types/core","id-2799":"ParsedBotLink","PartialBotState":"types/core","id-2796":"PartialBotState","PausableDebugger":"types/debuggers/pausable-debugger","id-2299":"PausableDebugger","PausableDebuggerOptions":"types/debuggers/common","id-2455":"PausableDebuggerOptions","PauseTrigger":"types/debuggers/common","id-2418":"PauseTrigger","PauseTriggerOptions":"types/debuggers/common","id-2426":"PauseTriggerOptions","PossiblePauseTriggerLocation":"types/debuggers/common","id-2413":"PossiblePauseTriggerLocation","PseudoRandomNumberGenerator":"types/core","id-2480":"PseudoRandomNumberGenerator","QuaternionRotation":"types/math/rotations","id-3270":"QuaternionRotation","RaycastRay":"types/os","id-2167":"RaycastRay","RaycastResult":"types/os","id-2164":"RaycastResult","RecordActionOptions":"types/records/extra","id-2496":"RecordActionOptions","RecordDataFailure":"types/records/data","id-2937":"RecordDataFailure","RecordDataSuccess":"types/records/data","id-2933":"RecordDataSuccess","RecordFileFailure":"types/records/files","id-2134":"RecordFileFailure","RecordFileSuccess":"types/records/files","id-2130":"RecordFileSuccess","RegisterPrefixOptions":"types/core","id-2644":"RegisterPrefixOptions","RevokeMarkerPermissionFailure":"types/records/policies","id-3038":"RevokeMarkerPermissionFailure","RevokeMarkerPermissionSuccess":"types/records/policies","id-3036":"RevokeMarkerPermissionSuccess","RevokeRoleFailure":"types/records/roles","id-3024":"RevokeRoleFailure","RevokeRoleSuccess":"types/records/roles","id-3022":"RevokeRoleSuccess","RoomJoinOptions":"types/os","id-2610":"RoomJoinOptions","RoomOptions":"types/os","id-2619":"RoomOptions","RoomRemoteOptions":"types/os","id-2635":"RoomRemoteOptions","RoomTrackOptions":"types/os","id-2623":"RoomTrackOptions","RuntimeBot":"types/core","id-2647":"RuntimeBot","RuntimeBotLinks":"types/core","id-2786":"RuntimeBotLinks","RuntimeBotVars":"types/core","id-2783":"RuntimeBotVars","SequenceRotation":"types/math/rotations","id-3268":"SequenceRotation","SetRoomOptionsSuccess":"types/os","id-2198":"SetRoomOptionsSuccess","SetRoomTrackOptions":"types/os","id-2641":"SetRoomTrackOptions","SetRoomTrackOptionsFailure":"types/os","id-2224":"SetRoomTrackOptionsFailure","SetRoomTrackOptionsSuccess":"types/os","id-2219":"SetRoomTrackOptionsSuccess","ShareOptions":"types/os","id-2543":"ShareOptions","ShowChatOptions":"types/os","id-2537":"ShowChatOptions","ShowConfirmOptions":"types/os","id-2579":"ShowConfirmOptions","ShowInputOptions":"types/os","id-2570":"ShowInputOptions","SnapAxis":"types/os","id-2517":"SnapAxis","SnapGridTarget":"types/os","id-2139":"SnapGridTarget","SnapPoint":"types/os","id-2529":"SnapPoint","StartFormAnimationOptions":"types/os","id-2589":"StartFormAnimationOptions","StopFormAnimationOptions":"types/os","id-2602":"StopFormAnimationOptions","SuccessfulGeolocation":"types/os","id-2499":"SuccessfulGeolocation","UnsuccessfulGeolocation":"types/os","id-2509":"UnsuccessfulGeolocation","UpdateEventRecordFailure":"types/records/events","id-3010":"UpdateEventRecordFailure","UpdateEventRecordSuccess":"types/records/events","id-3008":"UpdateEventRecordSuccess","UploadedFile":"types/os","id-2160":"UploadedFile","WebhookOptions":"types/web","id-2084":"WebhookOptions","WebhookResult":"types/web","id-2096":"WebhookResult","AddCountResult":"types/records/events","id-2986":"AddCountResult","AvailablePermissions":"types/permissions","id-2830":"AvailablePermissions","BarcodeFormat":"types/os","id-2564":"BarcodeFormat","BotFilter":"types/core","id-2118":"BotFilter","BotSpace":"types/core","id-2770":"BotSpace","CameraType":"types/os","id-2563":"CameraType","CreatePublicRecordKeyResult":"types/records/key","id-2820":"CreatePublicRecordKeyResult","EraseDataResult":"types/records/data","id-2955":"EraseDataResult","EraseFileResult":"types/records/files","id-2977":"EraseFileResult","Geolocation":"types/os","id-2498":"Geolocation","GetCountResult":"types/records/events","id-2996":"GetCountResult","GetDataResult":"types/records/data","id-2941":"GetDataResult","GetRoomOptionsResult":"types/os","id-2188":"GetRoomOptionsResult","GetRoomRemoteOptionsResult":"types/os","id-2230":"GetRoomRemoteOptionsResult","GetRoomTrackOptionsResult":"types/os","id-2206":"GetRoomTrackOptionsResult","GrantMarkerPermissionResult":"types/records/policies","id-3028":"GrantMarkerPermissionResult","GrantRoleResult":"types/records/roles","id-3014":"GrantRoleResult","JoinRoomResult":"types/os","id-2170":"JoinRoomResult","LeaveRoomResult":"types/os","id-2179":"LeaveRoomResult","ListDataResult":"types/records/data","id-2964":"ListDataResult","Mod":"types/core","id-2113":"Mod","PortalType":"types/core","id-2802":"PortalType","PossiblePauseTriggerStates":"types/debuggers/common","id-2417":"PossiblePauseTriggerStates","RecordDataResult":"types/records/data","id-2932":"RecordDataResult","RecordFileResult":"types/records/files","id-2129":"RecordFileResult","RevokeMarkerPermissionResult":"types/records/policies","id-3035":"RevokeMarkerPermissionResult","RevokeRoleResult":"types/records/roles","id-3021":"RevokeRoleResult","SetRoomOptionsResult":"types/os","id-2197":"SetRoomOptionsResult","SetRoomTrackOptionsResult":"types/os","id-2218":"SetRoomTrackOptionsResult","SnapTarget":"types/os","id-2536":"SnapTarget","TagFilter":"types/core","id-2114":"TagFilter","UpdateEventRecordResult":"types/records/events","id-3007":"UpdateEventRecordResult","animateTag-byOptions":"actions/utility","id-364":"animateTag-byOptions","getbot-tag":"actions/data","id-33":"getbot-tag","getbots-tag":"actions/data","id-17":"getbots-tag","animateTag-byTag":"actions/utility","id-358":"animateTag-byTag","changeState":"actions/data","id-177":"changeState","create":"actions/data","id-162":"create","destroy":"actions/data","id-166":"destroy","getbot-filters":"actions/data","id-26":"getbot-filters","getbots-filters":"actions/data","id-10":"getbots-filters","priorityShout":"actions/event","id-225":"priorityShout","shout":"actions/event","id-237":"shout","updateBotLinks":"actions/data","id-198":"updateBotLinks","whisper":"actions/event","id-263":"whisper","action.perform":"actions/event","id-1589":"action.perform","action.reject":"actions/event","id-1593":"action.reject","applyDiffToSnapshot":"actions/data","id-83":"applyDiffToSnapshot","applyMod":"actions/mods","id-152":"applyMod","assert":"actions/debuggers","id-407":"assert","assertEqual":"actions/debuggers","id-412":"assertEqual","atPosition":"actions/bot-filters","id-293":"atPosition","byCreator":"actions/bot-filters","id-314":"byCreator","byID":"actions/bot-filters","id-281":"byID","byMod":"actions/bot-filters","id-285":"byMod","bySpace":"actions/bot-filters","id-310":"bySpace","byTag":"actions/bot-filters","id-276":"byTag","bytes.fromBase64String":"actions/bytes","id-1817":"bytes.fromBase64String","bytes.fromHexString":"actions/bytes","id-1825":"bytes.fromHexString","bytes.toBase64String":"actions/bytes","id-1813":"bytes.toBase64String","bytes.toHexString":"actions/bytes","id-1821":"bytes.toHexString","clearAnimations":"actions/utility","id-378":"clearAnimations","clearTagMasks":"actions/data","id-106":"clearTagMasks","crypto.hash-raw":"actions/crypto","id-1831":"crypto.hash-raw","crypto.hash-string":"actions/crypto","id-1837":"crypto.hash-string","crypto.hmac-raw":"actions/crypto","id-1868":"crypto.hmac-raw","crypto.hmac-string":"actions/crypto","id-1861":"crypto.hmac-string","crypto.asymmetric.decrypt":"actions/crypto","id-1926":"crypto.asymmetric.decrypt","crypto.asymmetric.encrypt":"actions/crypto","id-1921":"crypto.asymmetric.encrypt","crypto.asymmetric.isEncrypted":"actions/crypto","id-1932":"crypto.asymmetric.isEncrypted","crypto.asymmetric.isKeypair":"actions/crypto","id-1917":"crypto.asymmetric.isKeypair","crypto.asymmetric.keypair":"actions/crypto","id-1913":"crypto.asymmetric.keypair","crypto.encrypt":"actions/crypto","id-1897":"crypto.encrypt","crypto.hmacSha256":"actions/crypto","id-1887":"crypto.hmacSha256","crypto.hmacSha512":"actions/crypto","id-1892":"crypto.hmacSha512","crypto.isEncrypted":"actions/crypto","id-1907":"crypto.isEncrypted","crypto.keypair":"actions/crypto","id-1936":"crypto.keypair","crypto.sha256":"actions/crypto","id-1853":"crypto.sha256","crypto.sha512":"actions/crypto","id-1857":"crypto.sha512","crypto.sign":"actions/crypto","id-1940":"crypto.sign","deleteTagMaskText":"actions/data","id-133":"deleteTagMaskText","deleteTagText":"actions/data","id-126":"deleteTagText","diffSnapshots":"actions/data","id-78":"diffSnapshots","either":"actions/bot-filters","id-318":"either","os.beginAudioRecording":"actions/audio","id-1647":"os.beginAudioRecording","os.endAudioRecording":"actions/audio","id-1651":"os.endAudioRecording","getBotLinks":"actions/data","id-194":"getBotLinks","getBotPosition":"actions/data","id-52":"getBotPosition","getBotRotation":"actions/data","id-57":"getBotRotation","getBotTagValues":"actions/data","id-42":"getBotTagValues","getFormattedJSON":"actions/data","id-70":"getFormattedJSON","getID":"actions/data","id-62":"getID","getJSON":"actions/data","id-66":"getJSON","getLink":"actions/data","id-190":"getLink","getMod":"actions/mods","id-47":"getMod","getSnapshot":"actions/data","id-74":"getSnapshot","getTag":"actions/data","id-88":"getTag","inDimension":"actions/bot-filters","id-289":"inDimension","inStack":"actions/bot-filters","id-299":"inStack","insertTagMaskText":"actions/data","id-118":"insertTagMaskText","insertTagText":"actions/data","id-111":"insertTagText","math.abs":"actions/math","id-1687":"math.abs","math.addVectors":"actions/math","id-1757":"math.addVectors","math.areClose":"actions/math","id-1788":"math.areClose","math.avg":"actions/math","id-1679":"math.avg","math.degreesToRadians":"actions/math","id-1713":"math.degreesToRadians","math.getAnchorPointOffset":"actions/math","id-1753":"math.getAnchorPointOffset","math.getForwardDirection":"actions/math","id-1721":"math.getForwardDirection","math.getSeededRandomNumberGenerator":"actions/math","id-1695":"math.getSeededRandomNumberGenerator","math.intersectPlane":"actions/math","id-1730":"math.intersectPlane","math.negateVector":"actions/math","id-1767":"math.negateVector","math.normalizeVector":"actions/math","id-1772":"math.normalizeVector","math.radiansToDegrees":"actions/math","id-1717":"math.radiansToDegrees","math.random":"actions/math","id-1708":"math.random","math.randomInt":"actions/math","id-1703":"math.randomInt","math.scaleVector":"actions/math","id-1782":"math.scaleVector","math.setRandomSeed":"actions/math","id-1699":"math.setRandomSeed","math.sqrt":"actions/math","id-1683":"math.sqrt","math.stdDev":"actions/math","id-1691":"math.stdDev","math.subtractVectors":"actions/math","id-1762":"math.subtractVectors","math.sum":"actions/math","id-1675":"math.sum","math.vectorLength":"actions/math","id-1777":"math.vectorLength","neighboring":"actions/bot-filters","id-304":"neighboring","not":"actions/bot-filters","id-325":"not","os.attachDebugger":"actions/debuggers","id-1287":"os.attachDebugger","os.createDebugger-normal":"actions/debuggers","id-1276":"os.createDebugger-normal","os.createDebugger-pausable":"actions/debuggers","id-1280":"os.createDebugger-pausable","os.focusOn-bot":"actions/portals","id-480":"os.focusOn-bot","os.focusOn-position":"actions/portals","id-485":"os.focusOn-position","os.getExecutingDebugger":"actions/debuggers","id-1284":"os.getExecutingDebugger","showChat-options":"actions/os","id-507":"showChat-options","showChat-placeholder":"actions/os","id-503":"showChat-placeholder","os.showInput":"actions/portals","id-712":"os.showInput","os.addBotDropGrid":"actions/portals","id-786":"os.addBotDropGrid","os.addBotDropSnap":"actions/portals","id-777":"os.addBotDropSnap","os.addDropGrid":"actions/portals","id-782":"os.addDropGrid","os.addDropSnap":"actions/portals","id-773":"os.addDropSnap","os.applyUpdatesToInst":"actions/os","id-1230":"os.applyUpdatesToInst","os.arSupported":"actions/xr","id-548":"os.arSupported","os.bufferSound":"actions/audio","id-749":"os.bufferSound","os.calculateRayFromCamera":"actions/portals","id-1178":"os.calculateRayFromCamera","os.cancelSound":"actions/audio","id-753":"os.cancelSound","os.closeBarcodeScanner":"actions/barcodes","id-621":"os.closeBarcodeScanner","os.closeCircleWipe":"actions/portals","id-765":"os.closeCircleWipe","os.closeImageClassifier":"actions/image-classification","id-636":"os.closeImageClassifier","os.closeQRCodeScanner":"actions/barcodes","id-607":"os.closeQRCodeScanner","os.compileApp":"actions/app","id-900":"os.compileApp","os.convertGeolocationToWhat3Words":"actions/os","id-1163":"os.convertGeolocationToWhat3Words","os.countEvents":"actions/records","id-1157":"os.countEvents","os.createInitializationUpdate":"actions/os","id-1226":"os.createInitializationUpdate","os.device":"actions/os","id-525":"os.device","os.disableAR":"actions/xr","id-538":"os.disableAR","os.disablePointOfView":"actions/portals","id-563":"os.disablePointOfView","os.disableVR":"actions/xr","id-545":"os.disableVR","os.disableWakeLock":"actions/os","id-569":"os.disableWakeLock","os.download":"actions/files","id-575":"os.download","os.downloadBots":"actions/files","id-581":"os.downloadBots","os.downloadBotsAsInitialzationUpdate":"actions/files","id-586":"os.downloadBotsAsInitialzationUpdate","os.downloadInst":"actions/files","id-594":"os.downloadInst","os.enableAR":"actions/xr","id-534":"os.enableAR","os.enableCustomDragging":"actions/portals","id-791":"os.enableCustomDragging","os.enablePointOfView":"actions/portals","id-554":"os.enablePointOfView","os.enableVR":"actions/xr","id-541":"os.enableVR","os.eraseData":"actions/records","id-1100":"os.eraseData","os.eraseManualApprovalData":"actions/records","id-1106":"os.eraseManualApprovalData","os.exitFullscreenMode":"actions/portals","id-451":"os.exitFullscreenMode","os.getAverageFrameRate":"actions/os","id-848":"os.getAverageFrameRate","os.getCameraPosition":"actions/portals","id-804":"os.getCameraPosition","os.getCameraRotation":"actions/portals","id-808":"os.getCameraRotation","os.getCurrentDimension":"actions/portals","id-683":"os.getCurrentDimension","os.getCurrentInst":"actions/portals","id-689":"os.getCurrentInst","os.getCurrentInstUpdate":"actions/os","id-1234":"os.getCurrentInstUpdate","os.getData":"actions/records","id-1082":"os.getData","os.getDimensionalDepth":"actions/portals","id-702":"os.getDimensionalDepth","os.getFocusPoint":"actions/portals","id-816":"os.getFocusPoint","os.getGeolocation":"actions/os","id-798":"os.getGeolocation","os.getInputList":"actions/portals","id-841":"os.getInputList","os.getInputState":"actions/portals","id-836":"os.getInputState","os.getInstStateFromUpdates":"actions/os","id-1222":"os.getInstStateFromUpdates","os.getManualApprovalData":"actions/records","id-1088":"os.getManualApprovalData","os.getMediaPermission":"actions/os","id-844":"os.getMediaPermission","os.getMenuDimension":"actions/portals","id-692":"os.getMenuDimension","os.getMiniPortalDimension":"actions/portals","id-695":"os.getMiniPortalDimension","os.getPointerDirection":"actions/portals","id-832":"os.getPointerDirection","os.getPointerPosition":"actions/portals","id-820":"os.getPointerPosition","os.getPointerRotation":"actions/portals","id-824":"os.getPointerRotation","os.getPortalDimension":"actions/portals","id-698":"os.getPortalDimension","os.getPublicRecordKey":"actions/records","id-1007":"os.getPublicRecordKey","os.getRoomOptions":"actions/rooms","id-866":"os.getRoomOptions","os.getRoomRemoteOptions":"actions/rooms","id-881":"os.getRoomRemoteOptions","os.getRoomTrackOptions":"actions/rooms","id-870":"os.getRoomTrackOptions","os.getSubjectlessPublicRecordKey":"actions/records","id-1011":"os.getSubjectlessPublicRecordKey","os.getWakeLockConfiguration":"actions/os","id-572":"os.getWakeLockConfiguration","os.goToDimension":"actions/portals","id-726":"os.goToDimension","os.goToURL":"actions/portals","id-730":"os.goToURL","os.grantInstAdminPermission":"actions/records","id-1029":"os.grantInstAdminPermission","os.grantInstRole":"actions/records","id-1049":"os.grantInstRole","os.grantRecordMarkerPermission":"actions/records","id-1015":"os.grantRecordMarkerPermission","os.grantUserRole":"actions/records","id-1034":"os.grantUserRole","os.hasBotInMiniPortal":"actions/portals","id-757":"os.hasBotInMiniPortal","os.hideBarcode":"actions/barcodes","id-629":"os.hideBarcode","os.hideChat":"actions/os","id-515":"os.hideChat","os.hideHtml":"actions/os","id-458":"os.hideHtml","os.hideQRCode":"actions/barcodes","id-614":"os.hideQRCode","os.hideTips":"actions/portals","id-439":"os.hideTips","os.importAUX":"actions/files","id-667":"os.importAUX","os.inSheet":"actions/portals","id-801":"os.inSheet","os.instStatuses":"actions/os","id-1251":"os.instStatuses","os.instances":"actions/os","id-1241":"os.instances","os.isCollaborative":"actions/os","id-528":"os.isCollaborative","os.isInDimension":"actions/portals","id-679":"os.isInDimension","os.isRecordKey":"actions/records","id-1064":"os.isRecordKey","os.joinRoom":"actions/rooms","id-851":"os.joinRoom","os.leaveRoom":"actions/rooms","id-856":"os.leaveRoom","os.listBuiltinTags":"actions/app","id-1001":"os.listBuiltinTags","os.listData":"actions/records","id-1094":"os.listData","os.listFormAnimations":"actions/animations","id-1198":"os.listFormAnimations","os.listInstUpdates":"actions/os","id-1219":"os.listInstUpdates","os.loadInst":"actions/os","id-659":"os.loadInst","os.log":"actions/os","id-794":"os.log","os.meetCommand":"actions/os","id-1264":"os.meetCommand","os.meetFunction":"actions/os","id-1269":"os.meetFunction","os.openBarcodeScanner":"actions/barcodes","id-617":"os.openBarcodeScanner","os.openCircleWipe":"actions/portals","id-769":"os.openCircleWipe","os.openDevConsole":"actions/os","id-738":"os.openDevConsole","os.openImageClassifier":"actions/image-classification","id-632":"os.openImageClassifier","os.openQRCodeScanner":"actions/barcodes","id-603":"os.openQRCodeScanner","os.openURL":"actions/portals","id-734":"os.openURL","os.parseBotsFromData":"actions/files","id-671":"os.parseBotsFromData","os.playSound":"actions/audio","id-745":"os.playSound","os.raycast":"actions/portals","id-1172":"os.raycast","os.raycastFromCamera":"actions/portals","id-1167":"os.raycastFromCamera","os.recordData":"actions/records","id-1068":"os.recordData","os.recordEvent":"actions/records","id-1151":"os.recordEvent","os.recordFile":"actions/records","id-1112":"os.recordFile","os.recordManualApprovalData":"actions/records","id-1075":"os.recordManualApprovalData","os.registerApp":"actions/app","id-891":"os.registerApp","os.registerTagPrefix":"actions/app","id-886":"os.registerTagPrefix","os.remoteCount":"actions/os","id-1244":"os.remoteCount","os.remotes":"actions/os","id-1216":"os.remotes","os.replaceDragBot":"actions/portals","id-675":"os.replaceDragBot","os.requestAuthBot":"actions/records","id-1004":"os.requestAuthBot","os.requestFullscreenMode":"actions/portals","id-448":"os.requestFullscreenMode","os.requestWakeLock":"actions/os","id-566":"os.requestWakeLock","os.revokeInstRole":"actions/records","id-1057":"os.revokeInstRole","os.revokeRecordMarkerPermission":"actions/records","id-1022":"os.revokeRecordMarkerPermission","os.revokeUserRole":"actions/records","id-1042":"os.revokeUserRole","os.run":"actions/os","id-518":"os.run","os.setClipboard":"actions/os","id-461":"os.setClipboard","os.setRoomOptions":"actions/rooms","id-861":"os.setRoomOptions","os.setRoomTrackOptions":"actions/rooms","id-875":"os.setRoomTrackOptions","os.share":"actions/os","id-761":"os.share","os.showBarcode":"actions/barcodes","id-624":"os.showBarcode","os.showConfirm":"actions/portals","id-722":"os.showConfirm","os.showHtml":"actions/os","id-454":"os.showHtml","os.showInputForTag":"actions/portals","id-706":"os.showInputForTag","os.showJoinCode":"actions/barcodes","id-443":"os.showJoinCode","os.showQRCode":"actions/barcodes","id-610":"os.showQRCode","os.showUploadAuxFile":"actions/files","id-597":"os.showUploadAuxFile","os.showUploadFiles":"actions/files","id-600":"os.showUploadFiles","os.sleep":"actions/os","id-423":"os.sleep","os.startFormAnimation":"actions/animations","id-1187":"os.startFormAnimation","os.stopFormAnimation":"actions/animations","id-1193":"os.stopFormAnimation","os.tip":"actions/portals","id-432":"os.tip","os.toast":"actions/os","id-427":"os.toast","os.totalRemoteCount":"actions/os","id-1248":"os.totalRemoteCount","os.unloadInst":"actions/os","id-663":"os.unloadInst","os.unregisterApp":"actions/app","id-896":"os.unregisterApp","os.version":"actions/os","id-522":"os.version","os.vrSupported":"actions/xr","id-551":"os.vrSupported","os.agreedUponTime":"actions/time","id-640":"os.agreedUponTime","os.deadReckoningTime":"actions/time","id-648":"os.deadReckoningTime","os.instLatency":"actions/time","id-642":"os.instLatency","os.instTimeOffset":"actions/time","id-644":"os.instTimeOffset","os.instTimeOffsetSpread":"actions/time","id-646":"os.instTimeOffsetSpread","os.localTime":"actions/time","id-638":"os.localTime","removeTags":"actions/data","id-141":"removeTags","renameTag":"actions/data","id-146":"renameTag","setTag":"actions/data","id-93":"setTag","setTagMask":"actions/data","id-99":"setTagMask","subtractMods":"actions/mods","id-157":"subtractMods","superShout":"actions/event","id-220":"superShout","uuid":"actions/data","id-355":"uuid","web.get":"actions/web","id-1983":"web.get","web.hook":"actions/web","id-1994":"web.hook","web.post":"actions/web","id-1988":"web.post","configBot":"actions/os","id-418":"configBot"}}'),o=r(4629),c=(r(2503),r(9960),["components"]),l={id:"permissions",title:"Permission Types",sidebar_label:"Permissions",description:"Defines the types of permissions that can be added to policies."},m=void 0,d={unversionedId:"types/permissions",id:"types/permissions",title:"Permission Types",description:"Defines the types of permissions that can be added to policies.",source:"@site/docs/types/permissions.mdx",sourceDirName:"types",slug:"/types/permissions",permalink:"/types/permissions",draft:!1,editUrl:"https://github.com/casual-simulation/casualos/tree/develop/docs/docs/types/permissions.mdx",tags:[],version:"current",frontMatter:{id:"permissions",title:"Permission Types",sidebar_label:"Permissions",description:"Defines the types of permissions that can be added to policies."},sidebar:"docs",previous:{title:"OS",permalink:"/types/os"},next:{title:"Record Keys",permalink:"/types/records/key"}},p={},u=[].concat((0,o.KO)(a)),y={toc:u};function f(e){var t=e.components,r=(0,i.Z)(e,c);return(0,n.kt)("wrapper",(0,s.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)(o.hl,{doc:a,mdxType:"ApiContents"}))}f.isMDXComponent=!0}}]);